
PID_SICAKLIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800c118  0800c118  0001c118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c630  0800c630  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c630  0800c630  0001c630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c638  0800c638  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c638  0800c638  0001c638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c63c  0800c63c  0001c63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c640  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          000003a8  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000590  20000590  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012988  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000294c  00000000  00000000  00032be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010f8  00000000  00000000  00035530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d51  00000000  00000000  00036628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022fae  00000000  00000000  00037379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001572b  00000000  00000000  0005a327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfbce  00000000  00000000  0006fa52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f30  00000000  00000000  0013f620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00145550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c100 	.word	0x0800c100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800c100 	.word	0x0800c100

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <read_calliberation_data>:
* ______________________________________________|
*/
#include "BMP180.h"

void read_calliberation_data (bmp_180_t *bmp_180)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
	uint8_t Callib_Data[22] = {0};
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 800100c:	23aa      	movs	r3, #170	; 0xaa
 800100e:	83fb      	strh	r3, [r7, #30]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8001010:	8bfa      	ldrh	r2, [r7, #30]
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2316      	movs	r3, #22
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	2301      	movs	r3, #1
 8001024:	21ee      	movs	r1, #238	; 0xee
 8001026:	485d      	ldr	r0, [pc, #372]	; (800119c <read_calliberation_data+0x1ac>)
 8001028:	f002 fd36 	bl	8003a98 <HAL_I2C_Mem_Read>
	bmp_180->AC1  = ((Callib_Data[0]  << 8)  | Callib_Data[1]);
 800102c:	7a3b      	ldrb	r3, [r7, #8]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	7a7b      	ldrb	r3, [r7, #9]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	801a      	strh	r2, [r3, #0]
	bmp_180->AC2  = ((Callib_Data[2]  << 8)  | Callib_Data[3]);
 800103e:	7abb      	ldrb	r3, [r7, #10]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	7afb      	ldrb	r3, [r7, #11]
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21a      	sxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	805a      	strh	r2, [r3, #2]
	bmp_180->AC3  = ((Callib_Data[4]  << 8)  | Callib_Data[5]);
 8001050:	7b3b      	ldrb	r3, [r7, #12]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	809a      	strh	r2, [r3, #4]
	bmp_180->AC4  = ((Callib_Data[6]  << 8)  | Callib_Data[7]);
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21b      	sxth	r3, r3
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	80da      	strh	r2, [r3, #6]
	bmp_180->AC5  = ((Callib_Data[8]  << 8)  | Callib_Data[9]);
 8001076:	7c3b      	ldrb	r3, [r7, #16]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	7c7b      	ldrb	r3, [r7, #17]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	b29a      	uxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	811a      	strh	r2, [r3, #8]
	bmp_180->AC6  = ((Callib_Data[10] << 8)  | Callib_Data[11]);
 800108a:	7cbb      	ldrb	r3, [r7, #18]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	7cfb      	ldrb	r3, [r7, #19]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
 8001098:	b29a      	uxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	815a      	strh	r2, [r3, #10]
	bmp_180->B1   = ((Callib_Data[12] << 8)  | Callib_Data[13]);
 800109e:	7d3b      	ldrb	r3, [r7, #20]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7d7b      	ldrb	r3, [r7, #21]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	819a      	strh	r2, [r3, #12]
	bmp_180->B2   = ((Callib_Data[14] << 8)  | Callib_Data[15]);
 80010b0:	7dbb      	ldrb	r3, [r7, #22]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	81da      	strh	r2, [r3, #14]
	bmp_180->MB   = ((Callib_Data[16] << 8)  | Callib_Data[17]);
 80010c2:	7e3b      	ldrb	r3, [r7, #24]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7e7b      	ldrb	r3, [r7, #25]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	821a      	strh	r2, [r3, #16]
	bmp_180->MC   = ((Callib_Data[18] << 8)  | Callib_Data[19]);
 80010d4:	7ebb      	ldrb	r3, [r7, #26]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7efb      	ldrb	r3, [r7, #27]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	825a      	strh	r2, [r3, #18]
	bmp_180->MD   = ((Callib_Data[20] << 8)  | Callib_Data[21]);
 80010e6:	7f3b      	ldrb	r3, [r7, #28]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7f7b      	ldrb	r3, [r7, #29]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	829a      	strh	r2, [r3, #20]

	if( (bmp_180->AC1 == 0x0000  || bmp_180->AC1 == 0xFFFF) ||
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d040      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->AC2 == 0x0000  || bmp_180->AC2 == 0xFFFF) ||
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	if( (bmp_180->AC1 == 0x0000  || bmp_180->AC1 == 0xFFFF) ||
 8001108:	2b00      	cmp	r3, #0
 800110a:	d03b      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->AC3 == 0x0000  || bmp_180->AC3 == 0xFFFF) ||
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		(bmp_180->AC2 == 0x0000  || bmp_180->AC2 == 0xFFFF) ||
 8001112:	2b00      	cmp	r3, #0
 8001114:	d036      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->AC4 == 0x0000  || bmp_180->AC4 == 0xFFFF) ||
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	88db      	ldrh	r3, [r3, #6]
		(bmp_180->AC3 == 0x0000  || bmp_180->AC3 == 0xFFFF) ||
 800111a:	2b00      	cmp	r3, #0
 800111c:	d032      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->AC4 == 0x0000  || bmp_180->AC4 == 0xFFFF) ||
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	88db      	ldrh	r3, [r3, #6]
 8001122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001126:	4293      	cmp	r3, r2
 8001128:	d02c      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->AC5 == 0x0000  || bmp_180->AC5 == 0xFFFF) ||
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	891b      	ldrh	r3, [r3, #8]
		(bmp_180->AC4 == 0x0000  || bmp_180->AC4 == 0xFFFF) ||
 800112e:	2b00      	cmp	r3, #0
 8001130:	d028      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->AC5 == 0x0000  || bmp_180->AC5 == 0xFFFF) ||
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	891b      	ldrh	r3, [r3, #8]
 8001136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113a:	4293      	cmp	r3, r2
 800113c:	d022      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->AC6 == 0x0000  || bmp_180->AC6 == 0xFFFF) ||
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	895b      	ldrh	r3, [r3, #10]
		(bmp_180->AC5 == 0x0000  || bmp_180->AC5 == 0xFFFF) ||
 8001142:	2b00      	cmp	r3, #0
 8001144:	d01e      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->AC6 == 0x0000  || bmp_180->AC6 == 0xFFFF) ||
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	895b      	ldrh	r3, [r3, #10]
 800114a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114e:	4293      	cmp	r3, r2
 8001150:	d018      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->B1  == 0x0000  || bmp_180->B1  == 0xFFFF) ||
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
		(bmp_180->AC6 == 0x0000  || bmp_180->AC6 == 0xFFFF) ||
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->B2  == 0x0000  || bmp_180->B2  == 0xFFFF) ||
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
		(bmp_180->B1  == 0x0000  || bmp_180->B1  == 0xFFFF) ||
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00e      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->MB  == 0x0000  || bmp_180->MB  == 0xFFFF) ||
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
		(bmp_180->B2  == 0x0000  || bmp_180->B2  == 0xFFFF) ||
 800116c:	2b00      	cmp	r3, #0
 800116e:	d009      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->MC  == 0x0000  || bmp_180->MC  == 0xFFFF) ||
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
		(bmp_180->MB  == 0x0000  || bmp_180->MB  == 0xFFFF) ||
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <read_calliberation_data+0x194>
		(bmp_180->MD  == 0x0000  || bmp_180->MD  == 0xFFFF))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
		(bmp_180->MC  == 0x0000  || bmp_180->MC  == 0xFFFF) ||
 8001180:	2b00      	cmp	r3, #0
 8001182:	d106      	bne.n	8001192 <read_calliberation_data+0x1a2>
	{
	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <read_calliberation_data+0x1b0>)
 800118c:	f002 f92e 	bl	80033ec <HAL_GPIO_WritePin>
	    while(1);
 8001190:	e7fe      	b.n	8001190 <read_calliberation_data+0x1a0>
	}

}
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000204 	.word	0x20000204
 80011a0:	40020c00 	.word	0x40020c00

080011a4 <BMP180_Start>:
void BMP180_Start (bmp_180_t *bmp_180)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	read_calliberation_data(bmp_180);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff1f 	bl	8000ff0 <read_calliberation_data>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <Get_UTemp>:
uint16_t Get_UTemp (void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80011c2:	232e      	movs	r3, #46	; 0x2e
 80011c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80011c6:	2300      	movs	r3, #0
 80011c8:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	22f4      	movs	r2, #244	; 0xf4
 80011dc:	21ee      	movs	r1, #238	; 0xee
 80011de:	480f      	ldr	r0, [pc, #60]	; (800121c <Get_UTemp+0x60>)
 80011e0:	f002 fb60 	bl	80038a4 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 80011e4:	2005      	movs	r0, #5
 80011e6:	f001 fd9d 	bl	8002d24 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	2302      	movs	r3, #2
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	22f6      	movs	r2, #246	; 0xf6
 80011fc:	21ee      	movs	r1, #238	; 0xee
 80011fe:	4807      	ldr	r0, [pc, #28]	; (800121c <Get_UTemp+0x60>)
 8001200:	f002 fc4a 	bl	8003a98 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001204:	793b      	ldrb	r3, [r7, #4]
 8001206:	b29b      	uxth	r3, r3
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b29a      	uxth	r2, r3
 800120c:	797b      	ldrb	r3, [r7, #5]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b29b      	uxth	r3, r3
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000204 	.word	0x20000204

08001220 <BMP180_GetTemp>:
float BMP180_GetTemp (bmp_180_t *bmp_180)
{
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	bmp_180->UT = Get_UTemp();
 8001228:	f7ff ffc8 	bl	80011bc <Get_UTemp>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
	bmp_180->X1 = ((bmp_180->UT- bmp_180->AC6) * (bmp_180->AC5/(pow(2,15))));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	8952      	ldrh	r2, [r2, #10]
 800123c:	1a9b      	subs	r3, r3, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f970 	bl	8000524 <__aeabi_i2d>
 8001244:	4604      	mov	r4, r0
 8001246:	460d      	mov	r5, r1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	891b      	ldrh	r3, [r3, #8]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f969 	bl	8000524 <__aeabi_i2d>
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <BMP180_GetTemp+0xfc>)
 8001258:	f7ff faf8 	bl	800084c <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f9c8 	bl	80005f8 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fc72 	bl	8000b58 <__aeabi_d2iz>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
	bmp_180->X2 = ((bmp_180->MC *(pow(2,11))) / (bmp_180->X1 + bmp_180->MD));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f94f 	bl	8000524 <__aeabi_i2d>
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b25      	ldr	r3, [pc, #148]	; (8001320 <BMP180_GetTemp+0x100>)
 800128c:	f7ff f9b4 	bl	80005f8 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80012a2:	4413      	add	r3, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f93d 	bl	8000524 <__aeabi_i2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff facb 	bl	800084c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fc4b 	bl	8000b58 <__aeabi_d2iz>
 80012c2:	4602      	mov	r2, r0
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
	bmp_180->B5 = bmp_180->X1 + bmp_180->X2;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	441a      	add	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
	bmp_180->Temp = (bmp_180->B5 + 8)/(pow(2,4));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012da:	3308      	adds	r3, #8
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f921 	bl	8000524 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <BMP180_GetTemp+0x104>)
 80012e8:	f7ff fab0 	bl	800084c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fc78 	bl	8000be8 <__aeabi_d2f>
 80012f8:	4602      	mov	r2, r0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	649a      	str	r2, [r3, #72]	; 0x48

	return bmp_180->Temp/10;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001304:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001308:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800130c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bdb0      	pop	{r4, r5, r7, pc}
 800131a:	bf00      	nop
 800131c:	40e00000 	.word	0x40e00000
 8001320:	40a00000 	.word	0x40a00000
 8001324:	40300000 	.word	0x40300000

08001328 <Get_UPress>:

uint32_t Get_UPress (int oss)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af04      	add	r7, sp, #16
 800132e:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	019b      	lsls	r3, r3, #6
 8001336:	b2db      	uxtb	r3, r3
 8001338:	3334      	adds	r3, #52	; 0x34
 800133a:	b2db      	uxtb	r3, r3
 800133c:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <Get_UPress+0xb4>)
 8001340:	881b      	ldrh	r3, [r3, #0]
 8001342:	81bb      	strh	r3, [r7, #12]
 8001344:	2300      	movs	r3, #0
 8001346:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134c:	9302      	str	r3, [sp, #8]
 800134e:	2301      	movs	r3, #1
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	f107 030f 	add.w	r3, r7, #15
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2301      	movs	r3, #1
 800135a:	22f4      	movs	r2, #244	; 0xf4
 800135c:	21ee      	movs	r1, #238	; 0xee
 800135e:	4820      	ldr	r0, [pc, #128]	; (80013e0 <Get_UPress+0xb8>)
 8001360:	f002 faa0 	bl	80038a4 <HAL_I2C_Mem_Write>
	switch (oss)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d81a      	bhi.n	80013a0 <Get_UPress+0x78>
 800136a:	a201      	add	r2, pc, #4	; (adr r2, 8001370 <Get_UPress+0x48>)
 800136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001370:	08001381 	.word	0x08001381
 8001374:	08001389 	.word	0x08001389
 8001378:	08001391 	.word	0x08001391
 800137c:	08001399 	.word	0x08001399
	{
		case (0):
			HAL_Delay (5);
 8001380:	2005      	movs	r0, #5
 8001382:	f001 fccf 	bl	8002d24 <HAL_Delay>
			break;
 8001386:	e00b      	b.n	80013a0 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 8001388:	2008      	movs	r0, #8
 800138a:	f001 fccb 	bl	8002d24 <HAL_Delay>
			break;
 800138e:	e007      	b.n	80013a0 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 8001390:	200e      	movs	r0, #14
 8001392:	f001 fcc7 	bl	8002d24 <HAL_Delay>
			break;
 8001396:	e003      	b.n	80013a0 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 8001398:	201a      	movs	r0, #26
 800139a:	f001 fcc3 	bl	8002d24 <HAL_Delay>
			break;
 800139e:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 80013a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2303      	movs	r3, #3
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	22f6      	movs	r2, #246	; 0xf6
 80013b4:	21ee      	movs	r1, #238	; 0xee
 80013b6:	480a      	ldr	r0, [pc, #40]	; (80013e0 <Get_UPress+0xb8>)
 80013b8:	f002 fb6e 	bl	8003a98 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80013bc:	7b3b      	ldrb	r3, [r7, #12]
 80013be:	041a      	lsls	r2, r3, #16
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	4413      	add	r3, r2
 80013c6:	7bba      	ldrb	r2, [r7, #14]
 80013c8:	441a      	add	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f1c3 0308 	rsb	r3, r3, #8
 80013d0:	fa42 f303 	asr.w	r3, r2, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	0800c118 	.word	0x0800c118
 80013e0:	20000204 	.word	0x20000204

080013e4 <BMP180_GetPress>:

float BMP180_GetPress (bmp_180_t *bmp_180 , int oss)
{
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	bmp_180->UP = Get_UPress(oss);
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f7ff ff9a 	bl	8001328 <Get_UPress>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	621a      	str	r2, [r3, #32]
	bmp_180->X1 = ((bmp_180->UT - bmp_180->AC6 )* (bmp_180->AC5 / (pow(2,15))));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	8952      	ldrh	r2, [r2, #10]
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f88c 	bl	8000524 <__aeabi_i2d>
 800140c:	4604      	mov	r4, r0
 800140e:	460d      	mov	r5, r1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	891b      	ldrh	r3, [r3, #8]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f885 	bl	8000524 <__aeabi_i2d>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b9e      	ldr	r3, [pc, #632]	; (8001698 <BMP180_GetPress+0x2b4>)
 8001420:	f7ff fa14 	bl	800084c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7ff f8e4 	bl	80005f8 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fb8e 	bl	8000b58 <__aeabi_d2iz>
 800143c:	4602      	mov	r2, r0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
	bmp_180->X2 = ((bmp_180->MC *(pow(2,11))) / (bmp_180->X1 + bmp_180->MD));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_i2d>
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b92      	ldr	r3, [pc, #584]	; (800169c <BMP180_GetPress+0x2b8>)
 8001454:	f7ff f8d0 	bl	80005f8 <__aeabi_dmul>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4614      	mov	r4, r2
 800145e:	461d      	mov	r5, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800146a:	4413      	add	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f859 	bl	8000524 <__aeabi_i2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7ff f9e7 	bl	800084c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb67 	bl	8000b58 <__aeabi_d2iz>
 800148a:	4602      	mov	r2, r0
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
	bmp_180->B5 = bmp_180->X1 + bmp_180->X2;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	441a      	add	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	635a      	str	r2, [r3, #52]	; 0x34
	bmp_180->B6 = bmp_180->B5 - 4000;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a2:	f5a3 627a 	sub.w	r2, r3, #4000	; 0xfa0
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	63da      	str	r2, [r3, #60]	; 0x3c
	bmp_180->X1 = (bmp_180->B2 * (bmp_180->B6*bmp_180->B6/(pow(2,12))))/(pow(2,11));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f837 	bl	8000524 <__aeabi_i2d>
 80014b6:	4604      	mov	r4, r0
 80014b8:	460d      	mov	r5, r1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f82c 	bl	8000524 <__aeabi_i2d>
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b73      	ldr	r3, [pc, #460]	; (80016a0 <BMP180_GetPress+0x2bc>)
 80014d2:	f7ff f9bb 	bl	800084c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4620      	mov	r0, r4
 80014dc:	4629      	mov	r1, r5
 80014de:	f7ff f88b 	bl	80005f8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b6b      	ldr	r3, [pc, #428]	; (800169c <BMP180_GetPress+0x2b8>)
 80014f0:	f7ff f9ac 	bl	800084c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb2c 	bl	8000b58 <__aeabi_d2iz>
 8001500:	4602      	mov	r2, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
	bmp_180->X2 = bmp_180->AC2 * bmp_180->B6 /(pow(2,11));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800150c:	461a      	mov	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f804 	bl	8000524 <__aeabi_i2d>
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b5e      	ldr	r3, [pc, #376]	; (800169c <BMP180_GetPress+0x2b8>)
 8001522:	f7ff f993 	bl	800084c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb13 	bl	8000b58 <__aeabi_d2iz>
 8001532:	4602      	mov	r2, r0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
	bmp_180->X3 = bmp_180->X1 + bmp_180->X2;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	441a      	add	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
	bmp_180->B3 = (((bmp_180->AC1*4 + bmp_180->X3)<<oss)+2)/4;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154c:	009a      	lsls	r2, r3, #2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	441a      	add	r2, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	3302      	adds	r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	da00      	bge.n	8001562 <BMP180_GetPress+0x17e>
 8001560:	3303      	adds	r3, #3
 8001562:	109b      	asrs	r3, r3, #2
 8001564:	461a      	mov	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	631a      	str	r2, [r3, #48]	; 0x30
	bmp_180->X1 = bmp_180->AC3*bmp_180->B6/pow(2,13);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffd2 	bl	8000524 <__aeabi_i2d>
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4b47      	ldr	r3, [pc, #284]	; (80016a4 <BMP180_GetPress+0x2c0>)
 8001586:	f7ff f961 	bl	800084c <__aeabi_ddiv>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fae1 	bl	8000b58 <__aeabi_d2iz>
 8001596:	4602      	mov	r2, r0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
	bmp_180->X2 = (bmp_180->B1 * (bmp_180->B6*bmp_180->B6/(pow(2,12))))/(pow(2,16));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffbe 	bl	8000524 <__aeabi_i2d>
 80015a8:	4604      	mov	r4, r0
 80015aa:	460d      	mov	r5, r1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffb3 	bl	8000524 <__aeabi_i2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <BMP180_GetPress+0x2bc>)
 80015c4:	f7ff f942 	bl	800084c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7ff f812 	bl	80005f8 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <BMP180_GetPress+0x2c4>)
 80015e2:	f7ff f933 	bl	800084c <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fab3 	bl	8000b58 <__aeabi_d2iz>
 80015f2:	4602      	mov	r2, r0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
	bmp_180->X3 = ((bmp_180->X1+bmp_180->X2)+2)/pow(2,2);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	4413      	add	r3, r2
 8001602:	3302      	adds	r3, #2
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff8d 	bl	8000524 <__aeabi_i2d>
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <BMP180_GetPress+0x2c8>)
 8001610:	f7ff f91c 	bl	800084c <__aeabi_ddiv>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff fa9c 	bl	8000b58 <__aeabi_d2iz>
 8001620:	4602      	mov	r2, r0
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
	bmp_180->B4 = bmp_180->AC4*(unsigned long)(bmp_180->X3+32768)/(pow(2,15));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	88db      	ldrh	r3, [r3, #6]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001634:	fb02 f303 	mul.w	r3, r2, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff63 	bl	8000504 <__aeabi_ui2d>
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <BMP180_GetPress+0x2b4>)
 8001644:	f7ff f902 	bl	800084c <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff faaa 	bl	8000ba8 <__aeabi_d2uiz>
 8001654:	4602      	mov	r2, r0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
	bmp_180->B7 = ((unsigned long)bmp_180->UP-bmp_180->B3)*(50000>>oss);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f24c 3150 	movw	r1, #50000	; 0xc350
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	fa41 f202 	asr.w	r2, r1, r2
 8001670:	fb03 f202 	mul.w	r2, r3, r2
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
	if (bmp_180->B7<0x80000000) bmp_180->Press = (bmp_180->B7*2)/bmp_180->B4;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	2b00      	cmp	r3, #0
 800167e:	db17      	blt.n	80016b0 <BMP180_GetPress+0x2cc>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	005a      	lsls	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	461a      	mov	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	645a      	str	r2, [r3, #68]	; 0x44
 8001694:	e016      	b.n	80016c4 <BMP180_GetPress+0x2e0>
 8001696:	bf00      	nop
 8001698:	40e00000 	.word	0x40e00000
 800169c:	40a00000 	.word	0x40a00000
 80016a0:	40b00000 	.word	0x40b00000
 80016a4:	40c00000 	.word	0x40c00000
 80016a8:	40f00000 	.word	0x40f00000
 80016ac:	40100000 	.word	0x40100000
	else bmp_180->Press = (bmp_180->B7/bmp_180->B4)*2;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	461a      	mov	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
	bmp_180->X1 = (bmp_180->Press/(pow(2,8)))*(bmp_180->Press/(pow(2,8)));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff2b 	bl	8000524 <__aeabi_i2d>
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b3e      	ldr	r3, [pc, #248]	; (80017cc <BMP180_GetPress+0x3e8>)
 80016d4:	f7ff f8ba 	bl	800084c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4614      	mov	r4, r2
 80016de:	461d      	mov	r5, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff1d 	bl	8000524 <__aeabi_i2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <BMP180_GetPress+0x3e8>)
 80016f0:	f7ff f8ac 	bl	800084c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4620      	mov	r0, r4
 80016fa:	4629      	mov	r1, r5
 80016fc:	f7fe ff7c 	bl	80005f8 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff fa26 	bl	8000b58 <__aeabi_d2iz>
 800170c:	4602      	mov	r2, r0
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
	bmp_180->X1 = (bmp_180->X1*3038)/(pow(2,16));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	f640 32de 	movw	r2, #3038	; 0xbde
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff00 	bl	8000524 <__aeabi_i2d>
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <BMP180_GetPress+0x3ec>)
 800172a:	f7ff f88f 	bl	800084c <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff fa0f 	bl	8000b58 <__aeabi_d2iz>
 800173a:	4602      	mov	r2, r0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
	bmp_180->X2 = (-7357*bmp_180->Press)/(pow(2,16));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <BMP180_GetPress+0x3f0>)
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe feea 	bl	8000524 <__aeabi_i2d>
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <BMP180_GetPress+0x3ec>)
 8001756:	f7ff f879 	bl	800084c <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9f9 	bl	8000b58 <__aeabi_d2iz>
 8001766:	4602      	mov	r2, r0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
	bmp_180->Press = bmp_180->Press + (bmp_180->X1+bmp_180->X2+3791)/(pow(2,4));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fed7 	bl	8000524 <__aeabi_i2d>
 8001776:	4604      	mov	r4, r0
 8001778:	460d      	mov	r5, r1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	4413      	add	r3, r2
 8001784:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fecb 	bl	8000524 <__aeabi_i2d>
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <BMP180_GetPress+0x3f4>)
 8001794:	f7ff f85a 	bl	800084c <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fd74 	bl	800028c <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f9d4 	bl	8000b58 <__aeabi_d2iz>
 80017b0:	4602      	mov	r2, r0
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44

	return bmp_180->Press;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017c2:	eeb0 0a67 	vmov.f32	s0, s15
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdb0      	pop	{r4, r5, r7, pc}
 80017cc:	40700000 	.word	0x40700000
 80017d0:	40f00000 	.word	0x40f00000
 80017d4:	ffffe343 	.word	0xffffe343
 80017d8:	40300000 	.word	0x40300000
 80017dc:	00000000 	.word	0x00000000

080017e0 <BMP180_GetAlt>:

float BMP180_GetAlt (bmp_180_t *bmp_180,int oss)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	BMP180_GetPress(bmp_180, oss);
 80017ea:	6839      	ldr	r1, [r7, #0]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fdf9 	bl	80013e4 <BMP180_GetPress>
	return 44330*(1-(pow((bmp_180->Press/(float)atmPress), 0.19029495718)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	ee07 3a90 	vmov	s15, r3
 80017fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fe:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001870 <BMP180_GetAlt+0x90>
 8001802:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001806:	ee16 0a90 	vmov	r0, s13
 800180a:	f7fe fe9d 	bl	8000548 <__aeabi_f2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001860 <BMP180_GetAlt+0x80>
 8001816:	ec43 2b10 	vmov	d0, r2, r3
 800181a:	f009 fd39 	bl	800b290 <pow>
 800181e:	ec53 2b10 	vmov	r2, r3, d0
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	4913      	ldr	r1, [pc, #76]	; (8001874 <BMP180_GetAlt+0x94>)
 8001828:	f7fe fd2e 	bl	8000288 <__aeabi_dsub>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	a30c      	add	r3, pc, #48	; (adr r3, 8001868 <BMP180_GetAlt+0x88>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fedd 	bl	80005f8 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f9cf 	bl	8000be8 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	ee07 3a90 	vmov	s15, r3
}
 8001850:	eeb0 0a67 	vmov.f32	s0, s15
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w
 8001860:	ccd745e4 	.word	0xccd745e4
 8001864:	3fc85b95 	.word	0x3fc85b95
 8001868:	00000000 	.word	0x00000000
 800186c:	40e5a540 	.word	0x40e5a540
 8001870:	47c5e680 	.word	0x47c5e680
 8001874:	3ff00000 	.word	0x3ff00000

08001878 <read_BMP180>:

void read_BMP180(bmp_180_t *bmp_180, bmp_180_data_t *data, uint8_t oss)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	4613      	mov	r3, r2
 8001884:	71fb      	strb	r3, [r7, #7]

	data->altitude = BMP180_GetAlt(bmp_180, oss);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	4619      	mov	r1, r3
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7ff ffa8 	bl	80017e0 <BMP180_GetAlt>
 8001890:	eef0 7a40 	vmov.f32	s15, s0
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	edc3 7a01 	vstr	s15, [r3, #4]
	data->temperature = BMP180_GetTemp(bmp_180);
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f7ff fcc0 	bl	8001220 <BMP180_GetTemp>
 80018a0:	eef0 7a40 	vmov.f32	s15, s0
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	edc3 7a00 	vstr	s15, [r3]

}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <comInit>:
*/

#include "com.h"

void comInit ( com_t* driver)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]

	driver->rxIndex = 0;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
	driver->txIndex = 0;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	705a      	strb	r2, [r3, #1]

	driver->rxReady = FALSE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	709a      	strb	r2, [r3, #2]

	for(i=0;i<BUFFERSIZE;++i)
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e00d      	b.n	80018f2 <comInit+0x40>
	{
		driver->rxBuffer[i] = 0;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	2200      	movs	r2, #0
 80018de:	70da      	strb	r2, [r3, #3]
		driver->txBuffer[i] = 0;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	for(i=0;i<BUFFERSIZE;++i)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	3301      	adds	r3, #1
 80018f0:	73fb      	strb	r3, [r7, #15]
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	2b1f      	cmp	r3, #31
 80018f6:	d9ee      	bls.n	80018d6 <comInit+0x24>

	}
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <comGetData>:

void comGetData(com_t* driver,uint8_t data)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	70fb      	strb	r3, [r7, #3]
	if(driver->rxReady == FALSE && driver->rxIndex < BUFFERSIZE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	789b      	ldrb	r3, [r3, #2]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d121      	bne.n	800195e <comGetData+0x58>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b1f      	cmp	r3, #31
 8001920:	d81d      	bhi.n	800195e <comGetData+0x58>
	{
		driver->rxBuffer[driver->rxIndex++] = data & 0xFF;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	b2d1      	uxtb	r1, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	7011      	strb	r1, [r2, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	70da      	strb	r2, [r3, #3]


		if(driver->rxBuffer[driver->rxIndex-2] == '\r' && driver->rxBuffer[driver->rxIndex-1] == '\n')
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	3b02      	subs	r3, #2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	78db      	ldrb	r3, [r3, #3]
 8001944:	2b0d      	cmp	r3, #13
 8001946:	d10a      	bne.n	800195e <comGetData+0x58>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	3b01      	subs	r3, #1
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	78db      	ldrb	r3, [r3, #3]
 8001954:	2b0a      	cmp	r3, #10
 8001956:	d102      	bne.n	800195e <comGetData+0x58>
		{
			driver->rxReady = TRUE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	709a      	strb	r2, [r3, #2]
		}
	}

}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <comIsRxBufferReady>:

}



uint8_t comIsRxBufferReady (com_t* driver){ return (driver->rxReady); }
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	789b      	ldrb	r3, [r3, #2]
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <comRxBufferProcessed>:

void comRxBufferProcessed (com_t* driver)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	driver->rxReady = FALSE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	709a      	strb	r2, [r3, #2]
	driver->rxIndex = 0;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]

}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f023 030f 	bic.w	r3, r3, #15
 80019b4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	f043 030c 	orr.w	r3, r3, #12
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80019d0:	7bbb      	ldrb	r3, [r7, #14]
 80019d2:	f043 030c 	orr.w	r3, r3, #12
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80019da:	7bbb      	ldrb	r3, [r7, #14]
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80019e4:	f107 0208 	add.w	r2, r7, #8
 80019e8:	2364      	movs	r3, #100	; 0x64
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2304      	movs	r3, #4
 80019ee:	214e      	movs	r1, #78	; 0x4e
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <lcd_send_cmd+0x5c>)
 80019f2:	f001 fe59 	bl	80036a8 <HAL_I2C_Master_Transmit>
}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000204 	.word	0x20000204

08001a04 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f023 030f 	bic.w	r3, r3, #15
 8001a14:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	f043 030d 	orr.w	r3, r3, #13
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	f043 0309 	orr.w	r3, r3, #9
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a30:	7bbb      	ldrb	r3, [r7, #14]
 8001a32:	f043 030d 	orr.w	r3, r3, #13
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a3a:	7bbb      	ldrb	r3, [r7, #14]
 8001a3c:	f043 0309 	orr.w	r3, r3, #9
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a44:	f107 0208 	add.w	r2, r7, #8
 8001a48:	2364      	movs	r3, #100	; 0x64
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	214e      	movs	r1, #78	; 0x4e
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <lcd_send_data+0x5c>)
 8001a52:	f001 fe29 	bl	80036a8 <HAL_I2C_Master_Transmit>
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000204 	.word	0x20000204

08001a64 <lcd_clear>:

void lcd_clear (void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001a6a:	2080      	movs	r0, #128	; 0x80
 8001a6c:	f7ff ff9a 	bl	80019a4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	e005      	b.n	8001a82 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001a76:	2020      	movs	r0, #32
 8001a78:	f7ff ffc4 	bl	8001a04 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b45      	cmp	r3, #69	; 0x45
 8001a86:	ddf6      	ble.n	8001a76 <lcd_clear+0x12>
	}
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
    switch (row)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <lcd_put_cur+0x18>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d005      	beq.n	8001ab4 <lcd_put_cur+0x22>
 8001aa8:	e009      	b.n	8001abe <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	603b      	str	r3, [r7, #0]
            break;
 8001ab2:	e004      	b.n	8001abe <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001aba:	603b      	str	r3, [r7, #0]
            break;
 8001abc:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff6e 	bl	80019a4 <lcd_send_cmd>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <lcd_init>:


void lcd_init (void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001ad4:	2032      	movs	r0, #50	; 0x32
 8001ad6:	f001 f925 	bl	8002d24 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001ada:	2030      	movs	r0, #48	; 0x30
 8001adc:	f7ff ff62 	bl	80019a4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001ae0:	2005      	movs	r0, #5
 8001ae2:	f001 f91f 	bl	8002d24 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001ae6:	2030      	movs	r0, #48	; 0x30
 8001ae8:	f7ff ff5c 	bl	80019a4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001aec:	2001      	movs	r0, #1
 8001aee:	f001 f919 	bl	8002d24 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001af2:	2030      	movs	r0, #48	; 0x30
 8001af4:	f7ff ff56 	bl	80019a4 <lcd_send_cmd>
	HAL_Delay(10);
 8001af8:	200a      	movs	r0, #10
 8001afa:	f001 f913 	bl	8002d24 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001afe:	2020      	movs	r0, #32
 8001b00:	f7ff ff50 	bl	80019a4 <lcd_send_cmd>
	HAL_Delay(10);
 8001b04:	200a      	movs	r0, #10
 8001b06:	f001 f90d 	bl	8002d24 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001b0a:	2028      	movs	r0, #40	; 0x28
 8001b0c:	f7ff ff4a 	bl	80019a4 <lcd_send_cmd>
	HAL_Delay(1);
 8001b10:	2001      	movs	r0, #1
 8001b12:	f001 f907 	bl	8002d24 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001b16:	2008      	movs	r0, #8
 8001b18:	f7ff ff44 	bl	80019a4 <lcd_send_cmd>
	HAL_Delay(1);
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f001 f901 	bl	8002d24 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff ff3e 	bl	80019a4 <lcd_send_cmd>
	HAL_Delay(1);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f001 f8fb 	bl	8002d24 <HAL_Delay>
	HAL_Delay(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f001 f8f8 	bl	8002d24 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001b34:	2006      	movs	r0, #6
 8001b36:	f7ff ff35 	bl	80019a4 <lcd_send_cmd>
	HAL_Delay(1);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f001 f8f2 	bl	8002d24 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001b40:	200c      	movs	r0, #12
 8001b42:	f7ff ff2f 	bl	80019a4 <lcd_send_cmd>
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001b52:	e006      	b.n	8001b62 <lcd_send_string+0x18>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff51 	bl	8001a04 <lcd_send_data>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f4      	bne.n	8001b54 <lcd_send_string+0xa>
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b78:	f001 f862 	bl	8002c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b7c:	f000 f866 	bl	8001c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b80:	f000 f9ea 	bl	8001f58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b84:	f000 f8cc 	bl	8001d20 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001b88:	f000 f8f8 	bl	8001d7c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b8c:	f000 f944 	bl	8001e18 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001b90:	f000 f9b8 	bl	8001f04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001b94:	f7ff ff9c 	bl	8001ad0 <lcd_init>
  comInit(&driver.com);
 8001b98:	4820      	ldr	r0, [pc, #128]	; (8001c1c <main+0xa8>)
 8001b9a:	f7ff fe8a 	bl	80018b2 <comInit>
  pidInit(&driver.pid, KP, KI, KD, TS, 100, 0, 100, 0, 100, 0, 100, 0,15);
 8001b9e:	eeb2 6a0e 	vmov.f32	s12, #46	; 0x41700000  15.0
 8001ba2:	eddf 5a1f 	vldr	s11, [pc, #124]	; 8001c20 <main+0xac>
 8001ba6:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8001c24 <main+0xb0>
 8001baa:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8001c20 <main+0xac>
 8001bae:	ed9f 4a1d 	vldr	s8, [pc, #116]	; 8001c24 <main+0xb0>
 8001bb2:	eddf 3a1b 	vldr	s7, [pc, #108]	; 8001c20 <main+0xac>
 8001bb6:	ed9f 3a1b 	vldr	s6, [pc, #108]	; 8001c24 <main+0xb0>
 8001bba:	eddf 2a19 	vldr	s5, [pc, #100]	; 8001c20 <main+0xac>
 8001bbe:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8001c24 <main+0xb0>
 8001bc2:	eddf 1a19 	vldr	s3, [pc, #100]	; 8001c28 <main+0xb4>
 8001bc6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001bca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001bce:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001bd2:	4816      	ldr	r0, [pc, #88]	; (8001c2c <main+0xb8>)
 8001bd4:	f000 fc6c 	bl	80024b0 <pidInit>
  HAL_UART_Receive_IT(&huart2, &u2rx, 1);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4915      	ldr	r1, [pc, #84]	; (8001c30 <main+0xbc>)
 8001bdc:	4815      	ldr	r0, [pc, #84]	; (8001c34 <main+0xc0>)
 8001bde:	f004 fac5 	bl	800616c <HAL_UART_Receive_IT>

  BMP180_Start(&driver.bmp_180_cal);
 8001be2:	4815      	ldr	r0, [pc, #84]	; (8001c38 <main+0xc4>)
 8001be4:	f7ff fade 	bl	80011a4 <BMP180_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bee:	4813      	ldr	r0, [pc, #76]	; (8001c3c <main+0xc8>)
 8001bf0:	f001 fbfc 	bl	80033ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfa:	4810      	ldr	r0, [pc, #64]	; (8001c3c <main+0xc8>)
 8001bfc:	f001 fbf6 	bl	80033ec <HAL_GPIO_WritePin>


  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001c00:	2100      	movs	r1, #0
 8001c02:	480f      	ldr	r0, [pc, #60]	; (8001c40 <main+0xcc>)
 8001c04:	f003 fafe 	bl	8005204 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c08:	480e      	ldr	r0, [pc, #56]	; (8001c44 <main+0xd0>)
 8001c0a:	f003 fa31 	bl	8005070 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  read_BMP180(&driver.bmp_180_cal, &driver.bmp_180, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	490d      	ldr	r1, [pc, #52]	; (8001c48 <main+0xd4>)
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <main+0xc4>)
 8001c14:	f7ff fe30 	bl	8001878 <read_BMP180>
 8001c18:	e7f9      	b.n	8001c0e <main+0x9a>
 8001c1a:	bf00      	nop
 8001c1c:	2000037c 	.word	0x2000037c
 8001c20:	00000000 	.word	0x00000000
 8001c24:	42c80000 	.word	0x42c80000
 8001c28:	3c23d70a 	.word	0x3c23d70a
 8001c2c:	2000032c 	.word	0x2000032c
 8001c30:	20000438 	.word	0x20000438
 8001c34:	200002e8 	.word	0x200002e8
 8001c38:	200003c8 	.word	0x200003c8
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	200002a0 	.word	0x200002a0
 8001c44:	20000258 	.word	0x20000258
 8001c48:	200003c0 	.word	0x200003c0

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b094      	sub	sp, #80	; 0x50
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0320 	add.w	r3, r7, #32
 8001c56:	2230      	movs	r2, #48	; 0x30
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f006 fd57 	bl	800870e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <SystemClock_Config+0xcc>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	4a27      	ldr	r2, [pc, #156]	; (8001d18 <SystemClock_Config+0xcc>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <SystemClock_Config+0xcc>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <SystemClock_Config+0xd0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a21      	ldr	r2, [pc, #132]	; (8001d1c <SystemClock_Config+0xd0>)
 8001c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <SystemClock_Config+0xd0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001cc0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cca:	2307      	movs	r3, #7
 8001ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cce:	f107 0320 	add.w	r3, r7, #32
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f002 fce4 	bl	80046a0 <HAL_RCC_OscConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001cde:	f000 fa29 	bl	8002134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce2:	230f      	movs	r3, #15
 8001ce4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cf2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	2105      	movs	r1, #5
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 ff45 	bl	8004b90 <HAL_RCC_ClockConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d0c:	f000 fa12 	bl	8002134 <Error_Handler>
  }
}
 8001d10:	bf00      	nop
 8001d12:	3750      	adds	r7, #80	; 0x50
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40007000 	.word	0x40007000

08001d20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <MX_I2C1_Init+0x54>)
 8001d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d2c:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <MX_I2C1_Init+0x58>)
 8001d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d5e:	f001 fb5f 	bl	8003420 <HAL_I2C_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d68:	f000 f9e4 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000204 	.word	0x20000204
 8001d74:	40005400 	.word	0x40005400
 8001d78:	000186a0 	.word	0x000186a0

08001d7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	463b      	mov	r3, r7
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <MX_TIM2_Init+0x98>)
 8001d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <MX_TIM2_Init+0x98>)
 8001da2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001da6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <MX_TIM2_Init+0x98>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <MX_TIM2_Init+0x98>)
 8001db0:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001db4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <MX_TIM2_Init+0x98>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <MX_TIM2_Init+0x98>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dc2:	4814      	ldr	r0, [pc, #80]	; (8001e14 <MX_TIM2_Init+0x98>)
 8001dc4:	f003 f904 	bl	8004fd0 <HAL_TIM_Base_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001dce:	f000 f9b1 	bl	8002134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480d      	ldr	r0, [pc, #52]	; (8001e14 <MX_TIM2_Init+0x98>)
 8001de0:	f003 fca2 	bl	8005728 <HAL_TIM_ConfigClockSource>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dea:	f000 f9a3 	bl	8002134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df6:	463b      	mov	r3, r7
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4806      	ldr	r0, [pc, #24]	; (8001e14 <MX_TIM2_Init+0x98>)
 8001dfc:	f004 f894 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e06:	f000 f995 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000258 	.word	0x20000258

08001e18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08e      	sub	sp, #56	; 0x38
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	f107 0320 	add.w	r3, r7, #32
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	615a      	str	r2, [r3, #20]
 8001e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e48:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001e4a:	4a2d      	ldr	r2, [pc, #180]	; (8001f00 <MX_TIM4_Init+0xe8>)
 8001e4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001e50:	2253      	movs	r2, #83	; 0x53
 8001e52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001e5a:	4b28      	ldr	r3, [pc, #160]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001e5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e6e:	4823      	ldr	r0, [pc, #140]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001e70:	f003 f8ae 	bl	8004fd0 <HAL_TIM_Base_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e7a:	f000 f95b 	bl	8002134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	481c      	ldr	r0, [pc, #112]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001e8c:	f003 fc4c 	bl	8005728 <HAL_TIM_ConfigClockSource>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e96:	f000 f94d 	bl	8002134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e9a:	4818      	ldr	r0, [pc, #96]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001e9c:	f003 f958 	bl	8005150 <HAL_TIM_PWM_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ea6:	f000 f945 	bl	8002134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eb2:	f107 0320 	add.w	r3, r7, #32
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4810      	ldr	r0, [pc, #64]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001eba:	f004 f835 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ec4:	f000 f936 	bl	8002134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec8:	2360      	movs	r3, #96	; 0x60
 8001eca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	4619      	mov	r1, r3
 8001ede:	4807      	ldr	r0, [pc, #28]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001ee0:	f003 fb60 	bl	80055a4 <HAL_TIM_PWM_ConfigChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001eea:	f000 f923 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001eee:	4803      	ldr	r0, [pc, #12]	; (8001efc <MX_TIM4_Init+0xe4>)
 8001ef0:	f000 fcdc 	bl	80028ac <HAL_TIM_MspPostInit>

}
 8001ef4:	bf00      	nop
 8001ef6:	3738      	adds	r7, #56	; 0x38
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200002a0 	.word	0x200002a0
 8001f00:	40000800 	.word	0x40000800

08001f04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <MX_USART2_UART_Init+0x50>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_USART2_UART_Init+0x4c>)
 8001f3c:	f004 f884 	bl	8006048 <HAL_UART_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f46:	f000 f8f5 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200002e8 	.word	0x200002e8
 8001f54:	40004400 	.word	0x40004400

08001f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b32      	ldr	r3, [pc, #200]	; (800203c <MX_GPIO_Init+0xe4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4a31      	ldr	r2, [pc, #196]	; (800203c <MX_GPIO_Init+0xe4>)
 8001f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <MX_GPIO_Init+0xe4>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <MX_GPIO_Init+0xe4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a2a      	ldr	r2, [pc, #168]	; (800203c <MX_GPIO_Init+0xe4>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <MX_GPIO_Init+0xe4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <MX_GPIO_Init+0xe4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a23      	ldr	r2, [pc, #140]	; (800203c <MX_GPIO_Init+0xe4>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <MX_GPIO_Init+0xe4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <MX_GPIO_Init+0xe4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a1c      	ldr	r2, [pc, #112]	; (800203c <MX_GPIO_Init+0xe4>)
 8001fcc:	f043 0302 	orr.w	r3, r3, #2
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_GPIO_Init+0xe4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe4:	4816      	ldr	r0, [pc, #88]	; (8002040 <MX_GPIO_Init+0xe8>)
 8001fe6:	f001 fa01 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001ff0:	4814      	ldr	r0, [pc, #80]	; (8002044 <MX_GPIO_Init+0xec>)
 8001ff2:	f001 f9fb 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	480c      	ldr	r0, [pc, #48]	; (8002040 <MX_GPIO_Init+0xe8>)
 8002010:	f001 f850 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002014:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201a:	2301      	movs	r3, #1
 800201c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_GPIO_Init+0xec>)
 800202e:	f001 f841 	bl	80030b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40020c00 	.word	0x40020c00
 8002044:	40020000 	.word	0x40020000

08002048 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]


	lcd_clear();
 8002050:	f7ff fd08 	bl	8001a64 <lcd_clear>
	pidControl(&driver.pid, ( driver.bmp_180.temperature -  driver.pid.temperature));
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002056:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800205c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002064:	eeb0 0a67 	vmov.f32	s0, s15
 8002068:	4818      	ldr	r0, [pc, #96]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800206a:	f000 fa91 	bl	8002590 <pidControl>
	powerDriver(&driver , pidGetOutput(&driver.pid));
 800206e:	4817      	ldr	r0, [pc, #92]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002070:	f000 fb60 	bl	8002734 <pidGetOutput>
 8002074:	eef0 7a40 	vmov.f32	s15, s0
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	4813      	ldr	r0, [pc, #76]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800207e:	f000 f98b 	bl	8002398 <powerDriver>
	sprintf(dizi,"          Temp: %f ",driver.bmp_180.temperature);
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa5d 	bl	8000548 <__aeabi_f2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	490f      	ldr	r1, [pc, #60]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002094:	480f      	ldr	r0, [pc, #60]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002096:	f006 fad7 	bl	8008648 <siprintf>
	lcd_send_string(dizi);
 800209a:	480e      	ldr	r0, [pc, #56]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800209c:	f7ff fd55 	bl	8001b4a <lcd_send_string>
	lcd_put_cur(1, 0);
 80020a0:	2100      	movs	r1, #0
 80020a2:	2001      	movs	r0, #1
 80020a4:	f7ff fcf5 	bl	8001a92 <lcd_put_cur>
	sprintf(dizi , "Motor hizi: %.2f",driver.pid.output);
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa4b 	bl	8000548 <__aeabi_f2d>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80020b8:	4806      	ldr	r0, [pc, #24]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80020ba:	f006 fac5 	bl	8008648 <siprintf>
	lcd_send_string(dizi);
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80020c0:	f7ff fd43 	bl	8001b4a <lcd_send_string>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000032c 	.word	0x2000032c
 80020d0:	0800c11c 	.word	0x0800c11c
 80020d4:	20000418 	.word	0x20000418
 80020d8:	0800c130 	.word	0x0800c130

080020dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <HAL_UART_RxCpltCallback+0x44>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d114      	bne.n	8002118 <HAL_UART_RxCpltCallback+0x3c>
	{
		if(!comIsRxBufferReady(&driver.com))
 80020ee:	480d      	ldr	r0, [pc, #52]	; (8002124 <HAL_UART_RxCpltCallback+0x48>)
 80020f0:	f7ff fc3b 	bl	800196a <comIsRxBufferReady>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10b      	bne.n	8002112 <HAL_UART_RxCpltCallback+0x36>
		{
			comGetData(&driver.com, u2rx);
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_UART_RxCpltCallback+0x4c>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4619      	mov	r1, r3
 8002100:	4808      	ldr	r0, [pc, #32]	; (8002124 <HAL_UART_RxCpltCallback+0x48>)
 8002102:	f7ff fc00 	bl	8001906 <comGetData>
			HAL_UART_Receive_IT(&huart2, &u2rx, 1);
 8002106:	2201      	movs	r2, #1
 8002108:	4907      	ldr	r1, [pc, #28]	; (8002128 <HAL_UART_RxCpltCallback+0x4c>)
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <HAL_UART_RxCpltCallback+0x50>)
 800210c:	f004 f82e 	bl	800616c <HAL_UART_Receive_IT>
		{
			appLevelComProcessor(&driver);
		}
	}

}
 8002110:	e002      	b.n	8002118 <HAL_UART_RxCpltCallback+0x3c>
			appLevelComProcessor(&driver);
 8002112:	4807      	ldr	r0, [pc, #28]	; (8002130 <HAL_UART_RxCpltCallback+0x54>)
 8002114:	f000 f814 	bl	8002140 <appLevelComProcessor>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40004400 	.word	0x40004400
 8002124:	2000037c 	.word	0x2000037c
 8002128:	20000438 	.word	0x20000438
 800212c:	200002e8 	.word	0x200002e8
 8002130:	2000032c 	.word	0x2000032c

08002134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002138:	b672      	cpsid	i
}
 800213a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800213c:	e7fe      	b.n	800213c <Error_Handler+0x8>
	...

08002140 <appLevelComProcessor>:
#include "motor_driver.h"



void appLevelComProcessor(motor_driver_t *driver)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

	if(strstr((char *)driver->com.rxBuffer,"AT+SETPOINT=") != 0){
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3353      	adds	r3, #83	; 0x53
 800214c:	498a      	ldr	r1, [pc, #552]	; (8002378 <appLevelComProcessor+0x238>)
 800214e:	4618      	mov	r0, r3
 8002150:	f006 fb04 	bl	800875c <strstr>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d02d      	beq.n	80021b6 <appLevelComProcessor+0x76>
		driver->pid.temperature = atof((char *)driver->com.rxBuffer+12);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3353      	adds	r3, #83	; 0x53
 800215e:	330c      	adds	r3, #12
 8002160:	4618      	mov	r0, r3
 8002162:	f004 ff2d 	bl	8006fc0 <atof>
 8002166:	ec53 2b10 	vmov	r2, r3, d0
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f7fe fd3b 	bl	8000be8 <__aeabi_d2f>
 8002172:	4602      	mov	r2, r0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	649a      	str	r2, [r3, #72]	; 0x48

		strcpy((char*)driver->com.txBuffer,"\r\nOK\r\n");
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3373      	adds	r3, #115	; 0x73
 800217c:	4a7f      	ldr	r2, [pc, #508]	; (800237c <appLevelComProcessor+0x23c>)
 800217e:	6810      	ldr	r0, [r2, #0]
 8002180:	6018      	str	r0, [r3, #0]
 8002182:	8891      	ldrh	r1, [r2, #4]
 8002184:	7992      	ldrb	r2, [r2, #6]
 8002186:	8099      	strh	r1, [r3, #4]
 8002188:	719a      	strb	r2, [r3, #6]
		driver->com.txIndex = strlen((char *)driver->com.txBuffer);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3373      	adds	r3, #115	; 0x73
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f86e 	bl	8000270 <strlen>
 8002194:	4603      	mov	r3, r0
 8002196:	b2da      	uxtb	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		HAL_UART_Transmit_IT(&huart2, driver->com.txBuffer, driver->com.txIndex);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0173 	add.w	r1, r3, #115	; 0x73
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	4874      	ldr	r0, [pc, #464]	; (8002380 <appLevelComProcessor+0x240>)
 80021b0:	f003 ff97 	bl	80060e2 <HAL_UART_Transmit_IT>
 80021b4:	e0d6      	b.n	8002364 <appLevelComProcessor+0x224>

	}
	else if(strstr((char * )driver->com.rxBuffer,"AT+PIPDRM")!= 0)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3353      	adds	r3, #83	; 0x53
 80021ba:	4972      	ldr	r1, [pc, #456]	; (8002384 <appLevelComProcessor+0x244>)
 80021bc:	4618      	mov	r0, r3
 80021be:	f006 facd 	bl	800875c <strstr>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d07d      	beq.n	80022c4 <appLevelComProcessor+0x184>
	{
		char *ptr = (char *)driver->com.rxBuffer ;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3353      	adds	r3, #83	; 0x53
 80021cc:	61fb      	str	r3, [r7, #28]
		float tempKp = 0 ;
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
		float tempKi = 0 ;
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
		float tempKd = 0 ;
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
		float tempTs = 0 ;
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]

		ptr+=(strlen("AT+PIPDRM"));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3309      	adds	r3, #9
 80021ea:	61fb      	str	r3, [r7, #28]
		tempKp = atof(ptr);
 80021ec:	69f8      	ldr	r0, [r7, #28]
 80021ee:	f004 fee7 	bl	8006fc0 <atof>
 80021f2:	ec53 2b10 	vmov	r2, r3, d0
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7fe fcf5 	bl	8000be8 <__aeabi_d2f>
 80021fe:	4603      	mov	r3, r0
 8002200:	61bb      	str	r3, [r7, #24]

		ptr = strstr(ptr,",")+1;
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	69f8      	ldr	r0, [r7, #28]
 8002206:	f006 fa8a 	bl	800871e <strchr>
 800220a:	4603      	mov	r3, r0
 800220c:	3301      	adds	r3, #1
 800220e:	61fb      	str	r3, [r7, #28]
		tempKi = atof(ptr);
 8002210:	69f8      	ldr	r0, [r7, #28]
 8002212:	f004 fed5 	bl	8006fc0 <atof>
 8002216:	ec53 2b10 	vmov	r2, r3, d0
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fce3 	bl	8000be8 <__aeabi_d2f>
 8002222:	4603      	mov	r3, r0
 8002224:	617b      	str	r3, [r7, #20]

		ptr = strstr(ptr,",")+1;
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	69f8      	ldr	r0, [r7, #28]
 800222a:	f006 fa78 	bl	800871e <strchr>
 800222e:	4603      	mov	r3, r0
 8002230:	3301      	adds	r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
		tempKd = atof(ptr);
 8002234:	69f8      	ldr	r0, [r7, #28]
 8002236:	f004 fec3 	bl	8006fc0 <atof>
 800223a:	ec53 2b10 	vmov	r2, r3, d0
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f7fe fcd1 	bl	8000be8 <__aeabi_d2f>
 8002246:	4603      	mov	r3, r0
 8002248:	613b      	str	r3, [r7, #16]

		ptr = strstr(ptr,",")+1;
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	69f8      	ldr	r0, [r7, #28]
 800224e:	f006 fa66 	bl	800871e <strchr>
 8002252:	4603      	mov	r3, r0
 8002254:	3301      	adds	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
		tempTs = atof(ptr);
 8002258:	69f8      	ldr	r0, [r7, #28]
 800225a:	f004 feb1 	bl	8006fc0 <atof>
 800225e:	ec53 2b10 	vmov	r2, r3, d0
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	f7fe fcbf 	bl	8000be8 <__aeabi_d2f>
 800226a:	4603      	mov	r3, r0
 800226c:	60fb      	str	r3, [r7, #12]

		pidChangeCoefficients(&driver->pid, tempKp, tempKi, tempKd, tempTs);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	edd7 1a03 	vldr	s3, [r7, #12]
 8002274:	ed97 1a04 	vldr	s2, [r7, #16]
 8002278:	edd7 0a05 	vldr	s1, [r7, #20]
 800227c:	ed97 0a06 	vldr	s0, [r7, #24]
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f967 	bl	8002554 <pidChangeCoefficients>

		strcpy((char*)driver->com.txBuffer,"\r\nOK\r\n");
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3373      	adds	r3, #115	; 0x73
 800228a:	4a3c      	ldr	r2, [pc, #240]	; (800237c <appLevelComProcessor+0x23c>)
 800228c:	6810      	ldr	r0, [r2, #0]
 800228e:	6018      	str	r0, [r3, #0]
 8002290:	8891      	ldrh	r1, [r2, #4]
 8002292:	7992      	ldrb	r2, [r2, #6]
 8002294:	8099      	strh	r1, [r3, #4]
 8002296:	719a      	strb	r2, [r3, #6]
		driver->com.txIndex = strlen((char *)driver->com.txBuffer);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3373      	adds	r3, #115	; 0x73
 800229c:	4618      	mov	r0, r3
 800229e:	f7fd ffe7 	bl	8000270 <strlen>
 80022a2:	4603      	mov	r3, r0
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		HAL_UART_Transmit_IT(&huart2, driver->com.txBuffer, driver->com.txIndex);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f103 0173 	add.w	r1, r3, #115	; 0x73
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	4830      	ldr	r0, [pc, #192]	; (8002380 <appLevelComProcessor+0x240>)
 80022be:	f003 ff10 	bl	80060e2 <HAL_UART_Transmit_IT>
 80022c2:	e04f      	b.n	8002364 <appLevelComProcessor+0x224>

	}
	else if(strstr((char *)driver->com.rxBuffer,"AT+TEMPERATURE?") != 0 ){
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3353      	adds	r3, #83	; 0x53
 80022c8:	492f      	ldr	r1, [pc, #188]	; (8002388 <appLevelComProcessor+0x248>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f006 fa46 	bl	800875c <strstr>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d019      	beq.n	800230a <appLevelComProcessor+0x1ca>
		sprintf((char *)driver->com.txBuffer , "+TEMPERATURE = %2.f\r\n" , driver->bmp_180.temperature);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f103 0473 	add.w	r4, r3, #115	; 0x73
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f930 	bl	8000548 <__aeabi_f2d>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4927      	ldr	r1, [pc, #156]	; (800238c <appLevelComProcessor+0x24c>)
 80022ee:	4620      	mov	r0, r4
 80022f0:	f006 f9aa 	bl	8008648 <siprintf>
		driver->com.txIndex =  strlen((char *)driver->com.txBuffer);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3373      	adds	r3, #115	; 0x73
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fd ffb9 	bl	8000270 <strlen>
 80022fe:	4603      	mov	r3, r0
 8002300:	b2da      	uxtb	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8002308:	e02c      	b.n	8002364 <appLevelComProcessor+0x224>

	}
	else if(strstr((char *)driver->com.rxBuffer,"AT+ALTITUDE") != 0)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3353      	adds	r3, #83	; 0x53
 800230e:	4920      	ldr	r1, [pc, #128]	; (8002390 <appLevelComProcessor+0x250>)
 8002310:	4618      	mov	r0, r3
 8002312:	f006 fa23 	bl	800875c <strstr>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d023      	beq.n	8002364 <appLevelComProcessor+0x224>
	{
		sprintf((char *)driver->com.txBuffer,"Yukseklik : %2.f ' dir \r\n",driver->bmp_180.altitude);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f103 0473 	add.w	r4, r3, #115	; 0x73
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f90d 	bl	8000548 <__aeabi_f2d>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4918      	ldr	r1, [pc, #96]	; (8002394 <appLevelComProcessor+0x254>)
 8002334:	4620      	mov	r0, r4
 8002336:	f006 f987 	bl	8008648 <siprintf>
		driver->com.txIndex = strlen((char *)driver->com.txBuffer);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3373      	adds	r3, #115	; 0x73
 800233e:	4618      	mov	r0, r3
 8002340:	f7fd ff96 	bl	8000270 <strlen>
 8002344:	4603      	mov	r3, r0
 8002346:	b2da      	uxtb	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		HAL_UART_Transmit_IT(&huart2, driver->com.txBuffer, driver->com.txIndex);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f103 0173 	add.w	r1, r3, #115	; 0x73
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800235a:	b29b      	uxth	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	4808      	ldr	r0, [pc, #32]	; (8002380 <appLevelComProcessor+0x240>)
 8002360:	f003 febf 	bl	80060e2 <HAL_UART_Transmit_IT>
	}

	comRxBufferProcessed(&driver->com);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3350      	adds	r3, #80	; 0x50
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fb0a 	bl	8001982 <comRxBufferProcessed>



}
 800236e:	bf00      	nop
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd90      	pop	{r4, r7, pc}
 8002376:	bf00      	nop
 8002378:	0800c144 	.word	0x0800c144
 800237c:	0800c154 	.word	0x0800c154
 8002380:	200002e8 	.word	0x200002e8
 8002384:	0800c15c 	.word	0x0800c15c
 8002388:	0800c168 	.word	0x0800c168
 800238c:	0800c178 	.word	0x0800c178
 8002390:	0800c190 	.word	0x0800c190
 8002394:	0800c19c 	.word	0x0800c19c

08002398 <powerDriver>:

void powerDriver (motor_driver_t *driver,float input)
{
 8002398:	b5b0      	push	{r4, r5, r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	ed87 0a00 	vstr	s0, [r7]
	if(!driver->pid.targetState){
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80023aa:	f083 0301 	eor.w	r3, r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d035      	beq.n	8002420 <powerDriver+0x88>
		if(input>=100)
 80023b4:	edd7 7a00 	vldr	s15, [r7]
 80023b8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80024a0 <powerDriver+0x108>
 80023bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	db02      	blt.n	80023cc <powerDriver+0x34>
			input = 99;
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <powerDriver+0x10c>)
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	e020      	b.n	800240e <powerDriver+0x76>
		else if(input <= 1)
 80023cc:	edd7 7a00 	vldr	s15, [r7]
 80023d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	d803      	bhi.n	80023e6 <powerDriver+0x4e>
			input = 0 ;
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	e013      	b.n	800240e <powerDriver+0x76>
		else if(input <= 25 && input > 1)
 80023e6:	edd7 7a00 	vldr	s15, [r7]
 80023ea:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80023ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	d80a      	bhi.n	800240e <powerDriver+0x76>
 80023f8:	edd7 7a00 	vldr	s15, [r7]
 80023fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002408:	dd01      	ble.n	800240e <powerDriver+0x76>
			input = 25;
 800240a:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <powerDriver+0x110>)
 800240c:	603b      	str	r3, [r7, #0]
		__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,(uint32_t )input);
 800240e:	4b27      	ldr	r3, [pc, #156]	; (80024ac <powerDriver+0x114>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	edd7 7a00 	vldr	s15, [r7]
 8002416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800241a:	ee17 2a90 	vmov	r2, s15
 800241e:	635a      	str	r2, [r3, #52]	; 0x34

	}
	if((driver->bmp_180.temperature >= driver->pid.temperature*(1.025)) && driver->pid.targetState)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe f88e 	bl	8000548 <__aeabi_f2d>
 800242c:	4604      	mov	r4, r0
 800242e:	460d      	mov	r5, r1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f887 	bl	8000548 <__aeabi_f2d>
 800243a:	a317      	add	r3, pc, #92	; (adr r3, 8002498 <powerDriver+0x100>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f7fe f8da 	bl	80005f8 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fe fb5a 	bl	8000b04 <__aeabi_dcmpge>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <powerDriver+0xd0>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <powerDriver+0xd0>
	{
		driver->pid.targetState = FALSE ;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	}
	if(driver->bmp_180.temperature <= driver->pid.temperature)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247c:	d900      	bls.n	8002480 <powerDriver+0xe8>
	{
		driver->pid.targetState = TRUE ;
		driver->pid.output = 0 ;

	}
}
 800247e:	e007      	b.n	8002490 <powerDriver+0xf8>
		driver->pid.targetState = TRUE ;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		driver->pid.output = 0 ;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bdb0      	pop	{r4, r5, r7, pc}
 8002498:	66666666 	.word	0x66666666
 800249c:	3ff06666 	.word	0x3ff06666
 80024a0:	42c80000 	.word	0x42c80000
 80024a4:	42c60000 	.word	0x42c60000
 80024a8:	41c80000 	.word	0x41c80000
 80024ac:	200002a0 	.word	0x200002a0

080024b0 <pidInit>:
#include "pid.h"


void pidInit ( pidc_t* driver, float kp, float ki, float kd, float time, float pPartMaxLimit, float pPartMinLimit, float iPartMaxLimit, float iPartMinLimit,
                float dPartMaxLimit, float dPartMinLimit, float pidOutputMaxLimit, float pidOutputMinLimit ,float temperature)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b08f      	sub	sp, #60	; 0x3c
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6378      	str	r0, [r7, #52]	; 0x34
 80024b8:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 80024bc:	edc7 0a0b 	vstr	s1, [r7, #44]	; 0x2c
 80024c0:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 80024c4:	edc7 1a09 	vstr	s3, [r7, #36]	; 0x24
 80024c8:	ed87 2a08 	vstr	s4, [r7, #32]
 80024cc:	edc7 2a07 	vstr	s5, [r7, #28]
 80024d0:	ed87 3a06 	vstr	s6, [r7, #24]
 80024d4:	edc7 3a05 	vstr	s7, [r7, #20]
 80024d8:	ed87 4a04 	vstr	s8, [r7, #16]
 80024dc:	edc7 4a03 	vstr	s9, [r7, #12]
 80024e0:	ed87 5a02 	vstr	s10, [r7, #8]
 80024e4:	edc7 5a01 	vstr	s11, [r7, #4]
 80024e8:	ed87 6a00 	vstr	s12, [r7]
    driver->output = pidOutputMinLimit;
 80024ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	609a      	str	r2, [r3, #8]


    driver->kp = kp;
 80024f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	60da      	str	r2, [r3, #12]
    driver->ki = ki;
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024fc:	611a      	str	r2, [r3, #16]
    driver->kd = kd;
 80024fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002502:	615a      	str	r2, [r3, #20]

    driver->time = time;
 8002504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	619a      	str	r2, [r3, #24]


    driver->pMax = pPartMaxLimit;
 800250a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800250c:	6a3a      	ldr	r2, [r7, #32]
 800250e:	61da      	str	r2, [r3, #28]
    driver->pMin = pPartMinLimit;
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	621a      	str	r2, [r3, #32]


    driver->iMax = iPartMaxLimit;
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
    driver->iMin = iPartMinLimit;
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	629a      	str	r2, [r3, #40]	; 0x28


    driver->dMax = dPartMaxLimit;
 8002522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
    driver->dMin = dPartMinLimit;
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	631a      	str	r2, [r3, #48]	; 0x30


    driver->pidMax = pidOutputMaxLimit;
 800252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
    driver->pidMin = pidOutputMinLimit;
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	645a      	str	r2, [r3, #68]	; 0x44



    driver->temperature  = temperature ;
 800253a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	649a      	str	r2, [r3, #72]	; 0x48

    driver->targetState =  false;
 8002540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002542:	2200      	movs	r2, #0
 8002544:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002548:	bf00      	nop
 800254a:	373c      	adds	r7, #60	; 0x3c
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <pidChangeCoefficients>:


void pidChangeCoefficients ( pidc_t* driver, float kp, float ki, float kd, float ts )
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6178      	str	r0, [r7, #20]
 800255c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002560:	edc7 0a03 	vstr	s1, [r7, #12]
 8002564:	ed87 1a02 	vstr	s2, [r7, #8]
 8002568:	edc7 1a01 	vstr	s3, [r7, #4]

    driver->kp = kp;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	60da      	str	r2, [r3, #12]
    driver->ki = ki;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	611a      	str	r2, [r3, #16]
    driver->kd = kd;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	615a      	str	r2, [r3, #20]

    driver->time = ts;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	619a      	str	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <pidControl>:
    driver->pidMin = pidOutputMinLimit;
}


void pidControl ( pidc_t* driver, float error )
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	ed87 0a00 	vstr	s0, [r7]
    driver->error = error;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	601a      	str	r2, [r3, #0]


    driver->partP = driver->error;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	635a      	str	r2, [r3, #52]	; 0x34


    if ( driver->partP > driver->pMax )
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80025b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	dd04      	ble.n	80025ca <pidControl+0x3a>
    {
        driver->partP = driver->pMax;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69da      	ldr	r2, [r3, #28]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34
 80025c8:	e00e      	b.n	80025e8 <pidControl+0x58>
    }
    else if ( driver->partP < driver->pMin )
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80025d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025de:	d503      	bpl.n	80025e8 <pidControl+0x58>
    {
        driver->partP = driver->pMin;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1a      	ldr	r2, [r3, #32]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34
    else
    {

    }

    driver->partI += ( driver->error * driver->time   );
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	edd3 6a00 	vldr	s13, [r3]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80025fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38


    if ( driver->partI > driver->iMax )
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	dd04      	ble.n	8002628 <pidControl+0x98>
    {
        driver->partI = driver->iMax;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
 8002626:	e00e      	b.n	8002646 <pidControl+0xb6>
    }
    else if ( driver->partI < driver->iMin )
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263c:	d503      	bpl.n	8002646 <pidControl+0xb6>
    {
        driver->partI = driver->iMin;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
    else
    {

    }

    driver->partD = ( ( driver->error - driver->lastError ) / driver->time );
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	ed93 7a00 	vldr	s14, [r3]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002652:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	ed93 7a06 	vldr	s14, [r3, #24]
 800265c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c


    if ( driver->partD > driver->dMax )
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	dd04      	ble.n	8002686 <pidControl+0xf6>
    {
        driver->partD = driver->dMax;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c
 8002684:	e00e      	b.n	80026a4 <pidControl+0x114>
    }
    else if ( driver->partD < driver->dMin )
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269a:	d503      	bpl.n	80026a4 <pidControl+0x114>
    {
        driver->partD = driver->dMin;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    else
    {

    }
    driver->output = ( driver->kp * driver->partP ) +
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80026b0:	ee27 7a27 	vmul.f32	s14, s14, s15
                        ( driver->ki * driver->partI ) +
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	edd3 6a04 	vldr	s13, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80026c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    driver->output = ( driver->kp * driver->partP ) +
 80026c4:	ee37 7a27 	vadd.f32	s14, s14, s15
                        ( driver->kd * driver->partD );
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	edd3 6a05 	vldr	s13, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80026d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
                        ( driver->ki * driver->partI ) +
 80026d8:	ee77 7a27 	vadd.f32	s15, s14, s15
    driver->output = ( driver->kp * driver->partP ) +
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	edc3 7a02 	vstr	s15, [r3, #8]


    if ( driver->output > driver->pidMax )
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80026ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f6:	dd04      	ble.n	8002702 <pidControl+0x172>
    {
        driver->output = driver->pidMax;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	e00e      	b.n	8002720 <pidControl+0x190>
    }
    else if ( driver->output < driver->pidMin )
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	ed93 7a02 	vldr	s14, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800270e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002716:	d503      	bpl.n	8002720 <pidControl+0x190>
    {
        driver->output = driver->pidMin;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	609a      	str	r2, [r3, #8]
    else
    {

    }

    driver->lastError = driver->error;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	605a      	str	r2, [r3, #4]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <pidGetOutput>:


float pidGetOutput ( pidc_t* driver )
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
    return ( driver->output );
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	ee07 3a90 	vmov	s15, r3
}
 8002744:	eeb0 0a67 	vmov.f32	s0, s15
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <HAL_MspInit+0x4c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <HAL_MspInit+0x4c>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_MspInit+0x4c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_MspInit+0x4c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <HAL_MspInit+0x4c>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_MspInit+0x4c>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002792:	2007      	movs	r0, #7
 8002794:	f000 fbba 	bl	8002f0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_I2C_MspInit+0x84>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d12b      	bne.n	800281e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_I2C_MspInit+0x88>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_I2C_MspInit+0x88>)
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_I2C_MspInit+0x88>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027e2:	23c0      	movs	r3, #192	; 0xc0
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e6:	2312      	movs	r3, #18
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027f2:	2304      	movs	r3, #4
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	480c      	ldr	r0, [pc, #48]	; (8002830 <HAL_I2C_MspInit+0x8c>)
 80027fe:	f000 fc59 	bl	80030b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_I2C_MspInit+0x88>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a08      	ldr	r2, [pc, #32]	; (800282c <HAL_I2C_MspInit+0x88>)
 800280c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_I2C_MspInit+0x88>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800281e:	bf00      	nop
 8002820:	3728      	adds	r7, #40	; 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40005400 	.word	0x40005400
 800282c:	40023800 	.word	0x40023800
 8002830:	40020400 	.word	0x40020400

08002834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d116      	bne.n	8002874 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <HAL_TIM_Base_MspInit+0x70>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <HAL_TIM_Base_MspInit+0x70>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <HAL_TIM_Base_MspInit+0x70>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	201c      	movs	r0, #28
 8002868:	f000 fb5b 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800286c:	201c      	movs	r0, #28
 800286e:	f000 fb74 	bl	8002f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002872:	e012      	b.n	800289a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0b      	ldr	r2, [pc, #44]	; (80028a8 <HAL_TIM_Base_MspInit+0x74>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10d      	bne.n	800289a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_TIM_Base_MspInit+0x70>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <HAL_TIM_Base_MspInit+0x70>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_TIM_Base_MspInit+0x70>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40000800 	.word	0x40000800

080028ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 030c 	add.w	r3, r7, #12
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a12      	ldr	r2, [pc, #72]	; (8002914 <HAL_TIM_MspPostInit+0x68>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d11e      	bne.n	800290c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_TIM_MspPostInit+0x6c>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <HAL_TIM_MspPostInit+0x6c>)
 80028d8:	f043 0308 	orr.w	r3, r3, #8
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <HAL_TIM_MspPostInit+0x6c>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028fc:	2302      	movs	r3, #2
 80028fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	4619      	mov	r1, r3
 8002906:	4805      	ldr	r0, [pc, #20]	; (800291c <HAL_TIM_MspPostInit+0x70>)
 8002908:	f000 fbd4 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40000800 	.word	0x40000800
 8002918:	40023800 	.word	0x40023800
 800291c:	40020c00 	.word	0x40020c00

08002920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <HAL_UART_MspInit+0x94>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d133      	bne.n	80029aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_UART_MspInit+0x98>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_UART_MspInit+0x98>)
 800294c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_UART_MspInit+0x98>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <HAL_UART_MspInit+0x98>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <HAL_UART_MspInit+0x98>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_UART_MspInit+0x98>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800297a:	230c      	movs	r3, #12
 800297c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002986:	2303      	movs	r3, #3
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800298a:	2307      	movs	r3, #7
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	4809      	ldr	r0, [pc, #36]	; (80029bc <HAL_UART_MspInit+0x9c>)
 8002996:	f000 fb8d 	bl	80030b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2100      	movs	r1, #0
 800299e:	2026      	movs	r0, #38	; 0x26
 80029a0:	f000 fabf 	bl	8002f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029a4:	2026      	movs	r0, #38	; 0x26
 80029a6:	f000 fad8 	bl	8002f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	; 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40004400 	.word	0x40004400
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020000 	.word	0x40020000

080029c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <NMI_Handler+0x4>

080029c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ca:	e7fe      	b.n	80029ca <HardFault_Handler+0x4>

080029cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <MemManage_Handler+0x4>

080029d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <BusFault_Handler+0x4>

080029d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <UsageFault_Handler+0x4>

080029de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a0c:	f000 f96a 	bl	8002ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <TIM2_IRQHandler+0x10>)
 8002a1a:	f002 fcbb 	bl	8005394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000258 	.word	0x20000258

08002a28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a2c:	4802      	ldr	r0, [pc, #8]	; (8002a38 <USART2_IRQHandler+0x10>)
 8002a2e:	f003 fbcd 	bl	80061cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200002e8 	.word	0x200002e8

08002a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return 1;
 8002a40:	2301      	movs	r3, #1
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_kill>:

int _kill(int pid, int sig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a56:	f005 fee1 	bl	800881c <__errno>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2216      	movs	r2, #22
 8002a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_exit>:

void _exit (int status)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ffe7 	bl	8002a4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a7e:	e7fe      	b.n	8002a7e <_exit+0x12>

08002a80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e00a      	b.n	8002aa8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a92:	f3af 8000 	nop.w
 8002a96:	4601      	mov	r1, r0
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	60ba      	str	r2, [r7, #8]
 8002a9e:	b2ca      	uxtb	r2, r1
 8002aa0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dbf0      	blt.n	8002a92 <_read+0x12>
  }

  return len;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e009      	b.n	8002ae0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	60ba      	str	r2, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3301      	adds	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	dbf1      	blt.n	8002acc <_write+0x12>
  }
  return len;
 8002ae8:	687b      	ldr	r3, [r7, #4]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_close>:

int _close(int file)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b1a:	605a      	str	r2, [r3, #4]
  return 0;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <_isatty>:

int _isatty(int file)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b64:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <_sbrk+0x5c>)
 8002b66:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <_sbrk+0x60>)
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <_sbrk+0x64>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <_sbrk+0x64>)
 8002b7a:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <_sbrk+0x68>)
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <_sbrk+0x64>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d207      	bcs.n	8002b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b8c:	f005 fe46 	bl	800881c <__errno>
 8002b90:	4603      	mov	r3, r0
 8002b92:	220c      	movs	r2, #12
 8002b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9a:	e009      	b.n	8002bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <_sbrk+0x64>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <_sbrk+0x64>)
 8002bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20020000 	.word	0x20020000
 8002bbc:	00000400 	.word	0x00000400
 8002bc0:	2000043c 	.word	0x2000043c
 8002bc4:	20000590 	.word	0x20000590

08002bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <SystemInit+0x20>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <SystemInit+0x20>)
 8002bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bf0:	480d      	ldr	r0, [pc, #52]	; (8002c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bf2:	490e      	ldr	r1, [pc, #56]	; (8002c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bf4:	4a0e      	ldr	r2, [pc, #56]	; (8002c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf8:	e002      	b.n	8002c00 <LoopCopyDataInit>

08002bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfe:	3304      	adds	r3, #4

08002c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c04:	d3f9      	bcc.n	8002bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c06:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c08:	4c0b      	ldr	r4, [pc, #44]	; (8002c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c0c:	e001      	b.n	8002c12 <LoopFillZerobss>

08002c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c10:	3204      	adds	r2, #4

08002c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c14:	d3fb      	bcc.n	8002c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c16:	f7ff ffd7 	bl	8002bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c1a:	f005 fe05 	bl	8008828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c1e:	f7fe ffa9 	bl	8001b74 <main>
  bx  lr    
 8002c22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c2c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002c30:	0800c640 	.word	0x0800c640
  ldr r2, =_sbss
 8002c34:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c38:	20000590 	.word	0x20000590

08002c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c3c:	e7fe      	b.n	8002c3c <ADC_IRQHandler>
	...

08002c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_Init+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <HAL_Init+0x40>)
 8002c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_Init+0x40>)
 8002c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_Init+0x40>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c68:	2003      	movs	r0, #3
 8002c6a:	f000 f94f 	bl	8002f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f000 f808 	bl	8002c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c74:	f7ff fd6e 	bl	8002754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023c00 	.word	0x40023c00

08002c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_InitTick+0x54>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_InitTick+0x58>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	4619      	mov	r1, r3
 8002c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f967 	bl	8002f76 <HAL_SYSTICK_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e00e      	b.n	8002cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b0f      	cmp	r3, #15
 8002cb6:	d80a      	bhi.n	8002cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	f000 f92f 	bl	8002f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc4:	4a06      	ldr	r2, [pc, #24]	; (8002ce0 <HAL_InitTick+0x5c>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	e000      	b.n	8002cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	20000008 	.word	0x20000008
 8002ce0:	20000004 	.word	0x20000004

08002ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_IncTick+0x20>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_IncTick+0x24>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_IncTick+0x24>)
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000008 	.word	0x20000008
 8002d08:	20000440 	.word	0x20000440

08002d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <HAL_GetTick+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20000440 	.word	0x20000440

08002d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d2c:	f7ff ffee 	bl	8002d0c <HAL_GetTick>
 8002d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d005      	beq.n	8002d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <HAL_Delay+0x44>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d4a:	bf00      	nop
 8002d4c:	f7ff ffde 	bl	8002d0c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d8f7      	bhi.n	8002d4c <HAL_Delay+0x28>
  {
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000008 	.word	0x20000008

08002d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9e:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	60d3      	str	r3, [r2, #12]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <__NVIC_GetPriorityGrouping+0x18>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 0307 	and.w	r3, r3, #7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	db0b      	blt.n	8002dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	4907      	ldr	r1, [pc, #28]	; (8002e08 <__NVIC_EnableIRQ+0x38>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2001      	movs	r0, #1
 8002df2:	fa00 f202 	lsl.w	r2, r0, r2
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000e100 	.word	0xe000e100

08002e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	db0a      	blt.n	8002e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	490c      	ldr	r1, [pc, #48]	; (8002e58 <__NVIC_SetPriority+0x4c>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e34:	e00a      	b.n	8002e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4908      	ldr	r1, [pc, #32]	; (8002e5c <__NVIC_SetPriority+0x50>)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	3b04      	subs	r3, #4
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	440b      	add	r3, r1
 8002e4a:	761a      	strb	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f1c3 0307 	rsb	r3, r3, #7
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	bf28      	it	cs
 8002e7e:	2304      	movcs	r3, #4
 8002e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d902      	bls.n	8002e90 <NVIC_EncodePriority+0x30>
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3b03      	subs	r3, #3
 8002e8e:	e000      	b.n	8002e92 <NVIC_EncodePriority+0x32>
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	4313      	orrs	r3, r2
         );
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed8:	d301      	bcc.n	8002ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00f      	b.n	8002efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <SysTick_Config+0x40>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee6:	210f      	movs	r1, #15
 8002ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eec:	f7ff ff8e 	bl	8002e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <SysTick_Config+0x40>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <SysTick_Config+0x40>)
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000e010 	.word	0xe000e010

08002f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff29 	bl	8002d6c <__NVIC_SetPriorityGrouping>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f34:	f7ff ff3e 	bl	8002db4 <__NVIC_GetPriorityGrouping>
 8002f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff8e 	bl	8002e60 <NVIC_EncodePriority>
 8002f44:	4602      	mov	r2, r0
 8002f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff ff5d 	bl	8002e0c <__NVIC_SetPriority>
}
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff31 	bl	8002dd0 <__NVIC_EnableIRQ>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff ffa2 	bl	8002ec8 <SysTick_Config>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff feb6 	bl	8002d0c <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d008      	beq.n	8002fc0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e052      	b.n	8003066 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0216 	bic.w	r2, r2, #22
 8002fce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fde:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <HAL_DMA_Abort+0x62>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0208 	bic.w	r2, r2, #8
 8002ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003010:	e013      	b.n	800303a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003012:	f7ff fe7b 	bl	8002d0c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b05      	cmp	r3, #5
 800301e:	d90c      	bls.n	800303a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2203      	movs	r2, #3
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e015      	b.n	8003066 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e4      	bne.n	8003012 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	223f      	movs	r2, #63	; 0x3f
 800304e:	409a      	lsls	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d004      	beq.n	800308c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e00c      	b.n	80030a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2205      	movs	r2, #5
 8003090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e16b      	b.n	80033a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	f040 815a 	bne.w	80033a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d005      	beq.n	8003106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003102:	2b02      	cmp	r3, #2
 8003104:	d130      	bne.n	8003168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800313c:	2201      	movs	r2, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 0201 	and.w	r2, r3, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b03      	cmp	r3, #3
 8003172:	d017      	beq.n	80031a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d123      	bne.n	80031f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	08da      	lsrs	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3208      	adds	r2, #8
 80031b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	220f      	movs	r2, #15
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	08da      	lsrs	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3208      	adds	r2, #8
 80031f2:	69b9      	ldr	r1, [r7, #24]
 80031f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80b4 	beq.w	80033a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b60      	ldr	r3, [pc, #384]	; (80033c0 <HAL_GPIO_Init+0x30c>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4a5f      	ldr	r2, [pc, #380]	; (80033c0 <HAL_GPIO_Init+0x30c>)
 8003244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003248:	6453      	str	r3, [r2, #68]	; 0x44
 800324a:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <HAL_GPIO_Init+0x30c>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003256:	4a5b      	ldr	r2, [pc, #364]	; (80033c4 <HAL_GPIO_Init+0x310>)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3302      	adds	r3, #2
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_GPIO_Init+0x314>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02b      	beq.n	80032da <HAL_GPIO_Init+0x226>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a51      	ldr	r2, [pc, #324]	; (80033cc <HAL_GPIO_Init+0x318>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d025      	beq.n	80032d6 <HAL_GPIO_Init+0x222>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a50      	ldr	r2, [pc, #320]	; (80033d0 <HAL_GPIO_Init+0x31c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01f      	beq.n	80032d2 <HAL_GPIO_Init+0x21e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4f      	ldr	r2, [pc, #316]	; (80033d4 <HAL_GPIO_Init+0x320>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d019      	beq.n	80032ce <HAL_GPIO_Init+0x21a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4e      	ldr	r2, [pc, #312]	; (80033d8 <HAL_GPIO_Init+0x324>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_GPIO_Init+0x216>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4d      	ldr	r2, [pc, #308]	; (80033dc <HAL_GPIO_Init+0x328>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00d      	beq.n	80032c6 <HAL_GPIO_Init+0x212>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4c      	ldr	r2, [pc, #304]	; (80033e0 <HAL_GPIO_Init+0x32c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <HAL_GPIO_Init+0x20e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4b      	ldr	r2, [pc, #300]	; (80033e4 <HAL_GPIO_Init+0x330>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_GPIO_Init+0x20a>
 80032ba:	2307      	movs	r3, #7
 80032bc:	e00e      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032be:	2308      	movs	r3, #8
 80032c0:	e00c      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032c2:	2306      	movs	r3, #6
 80032c4:	e00a      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032c6:	2305      	movs	r3, #5
 80032c8:	e008      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e004      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032da:	2300      	movs	r3, #0
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	f002 0203 	and.w	r2, r2, #3
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	4093      	lsls	r3, r2
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032ec:	4935      	ldr	r1, [pc, #212]	; (80033c4 <HAL_GPIO_Init+0x310>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_GPIO_Init+0x334>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331e:	4a32      	ldr	r2, [pc, #200]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003324:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <HAL_GPIO_Init+0x334>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_GPIO_Init+0x334>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800339c:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <HAL_GPIO_Init+0x334>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	f67f ae90 	bls.w	80030d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40021400 	.word	0x40021400
 80033e0:	40021800 	.word	0x40021800
 80033e4:	40021c00 	.word	0x40021c00
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033fc:	787b      	ldrb	r3, [r7, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003408:	e003      	b.n	8003412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	041a      	lsls	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	619a      	str	r2, [r3, #24]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e12b      	b.n	800368a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff f9ac 	bl	80027a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003482:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003484:	f001 fd7c 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8003488:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4a81      	ldr	r2, [pc, #516]	; (8003694 <HAL_I2C_Init+0x274>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d807      	bhi.n	80034a4 <HAL_I2C_Init+0x84>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a80      	ldr	r2, [pc, #512]	; (8003698 <HAL_I2C_Init+0x278>)
 8003498:	4293      	cmp	r3, r2
 800349a:	bf94      	ite	ls
 800349c:	2301      	movls	r3, #1
 800349e:	2300      	movhi	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e006      	b.n	80034b2 <HAL_I2C_Init+0x92>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a7d      	ldr	r2, [pc, #500]	; (800369c <HAL_I2C_Init+0x27c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	bf94      	ite	ls
 80034ac:	2301      	movls	r3, #1
 80034ae:	2300      	movhi	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0e7      	b.n	800368a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a78      	ldr	r2, [pc, #480]	; (80036a0 <HAL_I2C_Init+0x280>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0c9b      	lsrs	r3, r3, #18
 80034c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4a6a      	ldr	r2, [pc, #424]	; (8003694 <HAL_I2C_Init+0x274>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d802      	bhi.n	80034f4 <HAL_I2C_Init+0xd4>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3301      	adds	r3, #1
 80034f2:	e009      	b.n	8003508 <HAL_I2C_Init+0xe8>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
 80034fe:	4a69      	ldr	r2, [pc, #420]	; (80036a4 <HAL_I2C_Init+0x284>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	099b      	lsrs	r3, r3, #6
 8003506:	3301      	adds	r3, #1
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	430b      	orrs	r3, r1
 800350e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800351a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	495c      	ldr	r1, [pc, #368]	; (8003694 <HAL_I2C_Init+0x274>)
 8003524:	428b      	cmp	r3, r1
 8003526:	d819      	bhi.n	800355c <HAL_I2C_Init+0x13c>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1e59      	subs	r1, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fbb1 f3f3 	udiv	r3, r1, r3
 8003536:	1c59      	adds	r1, r3, #1
 8003538:	f640 73fc 	movw	r3, #4092	; 0xffc
 800353c:	400b      	ands	r3, r1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_I2C_Init+0x138>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1e59      	subs	r1, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003550:	3301      	adds	r3, #1
 8003552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003556:	e051      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 8003558:	2304      	movs	r3, #4
 800355a:	e04f      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d111      	bne.n	8003588 <HAL_I2C_Init+0x168>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	440b      	add	r3, r1
 8003572:	fbb0 f3f3 	udiv	r3, r0, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e012      	b.n	80035ae <HAL_I2C_Init+0x18e>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1e58      	subs	r0, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	0099      	lsls	r1, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	fbb0 f3f3 	udiv	r3, r0, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Init+0x196>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e022      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10e      	bne.n	80035dc <HAL_I2C_Init+0x1bc>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1e58      	subs	r0, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	440b      	add	r3, r1
 80035cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035da:	e00f      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e58      	subs	r0, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	0099      	lsls	r1, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	6809      	ldr	r1, [r1, #0]
 8003600:	4313      	orrs	r3, r2
 8003602:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800362a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6911      	ldr	r1, [r2, #16]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68d2      	ldr	r2, [r2, #12]
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	430b      	orrs	r3, r1
 800363e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	000186a0 	.word	0x000186a0
 8003698:	001e847f 	.word	0x001e847f
 800369c:	003d08ff 	.word	0x003d08ff
 80036a0:	431bde83 	.word	0x431bde83
 80036a4:	10624dd3 	.word	0x10624dd3

080036a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	461a      	mov	r2, r3
 80036b4:	460b      	mov	r3, r1
 80036b6:	817b      	strh	r3, [r7, #10]
 80036b8:	4613      	mov	r3, r2
 80036ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036bc:	f7ff fb26 	bl	8002d0c <HAL_GetTick>
 80036c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	f040 80e0 	bne.w	8003890 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2319      	movs	r3, #25
 80036d6:	2201      	movs	r2, #1
 80036d8:	4970      	ldr	r1, [pc, #448]	; (800389c <HAL_I2C_Master_Transmit+0x1f4>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fe02 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
 80036e8:	e0d3      	b.n	8003892 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_I2C_Master_Transmit+0x50>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0cc      	b.n	8003892 <HAL_I2C_Master_Transmit+0x1ea>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d007      	beq.n	800371e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800372c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2221      	movs	r2, #33	; 0x21
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2210      	movs	r2, #16
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	893a      	ldrh	r2, [r7, #8]
 800374e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a50      	ldr	r2, [pc, #320]	; (80038a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003760:	8979      	ldrh	r1, [r7, #10]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	6a3a      	ldr	r2, [r7, #32]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fbbc 	bl	8003ee4 <I2C_MasterRequestWrite>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e08d      	b.n	8003892 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800378c:	e066      	b.n	800385c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	6a39      	ldr	r1, [r7, #32]
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fe7c 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d107      	bne.n	80037b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06b      	b.n	8003892 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d11b      	bne.n	8003830 <HAL_I2C_Master_Transmit+0x188>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d017      	beq.n	8003830 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	6a39      	ldr	r1, [r7, #32]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fe6c 	bl	8004512 <I2C_WaitOnBTFFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	2b04      	cmp	r3, #4
 8003846:	d107      	bne.n	8003858 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003856:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e01a      	b.n	8003892 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003860:	2b00      	cmp	r3, #0
 8003862:	d194      	bne.n	800378e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	00100002 	.word	0x00100002
 80038a0:	ffff0000 	.word	0xffff0000

080038a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	4608      	mov	r0, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	461a      	mov	r2, r3
 80038b2:	4603      	mov	r3, r0
 80038b4:	817b      	strh	r3, [r7, #10]
 80038b6:	460b      	mov	r3, r1
 80038b8:	813b      	strh	r3, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038be:	f7ff fa25 	bl	8002d0c <HAL_GetTick>
 80038c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	f040 80d9 	bne.w	8003a84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	2319      	movs	r3, #25
 80038d8:	2201      	movs	r2, #1
 80038da:	496d      	ldr	r1, [pc, #436]	; (8003a90 <HAL_I2C_Mem_Write+0x1ec>)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fd01 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
 80038ea:	e0cc      	b.n	8003a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Mem_Write+0x56>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e0c5      	b.n	8003a86 <HAL_I2C_Mem_Write+0x1e2>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d007      	beq.n	8003920 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800392e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2221      	movs	r2, #33	; 0x21
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a3a      	ldr	r2, [r7, #32]
 800394a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a4d      	ldr	r2, [pc, #308]	; (8003a94 <HAL_I2C_Mem_Write+0x1f0>)
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003962:	88f8      	ldrh	r0, [r7, #6]
 8003964:	893a      	ldrh	r2, [r7, #8]
 8003966:	8979      	ldrh	r1, [r7, #10]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	4603      	mov	r3, r0
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 fb38 	bl	8003fe8 <I2C_RequestMemoryWrite>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d052      	beq.n	8003a24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e081      	b.n	8003a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fd82 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b04      	cmp	r3, #4
 8003998:	d107      	bne.n	80039aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e06b      	b.n	8003a86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d11b      	bne.n	8003a24 <HAL_I2C_Mem_Write+0x180>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d017      	beq.n	8003a24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1aa      	bne.n	8003982 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fd6e 	bl	8004512 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d107      	bne.n	8003a54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e016      	b.n	8003a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e000      	b.n	8003a86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	00100002 	.word	0x00100002
 8003a94:	ffff0000 	.word	0xffff0000

08003a98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08c      	sub	sp, #48	; 0x30
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	813b      	strh	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab2:	f7ff f92b 	bl	8002d0c <HAL_GetTick>
 8003ab6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	f040 8208 	bne.w	8003ed6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	2319      	movs	r3, #25
 8003acc:	2201      	movs	r2, #1
 8003ace:	497b      	ldr	r1, [pc, #492]	; (8003cbc <HAL_I2C_Mem_Read+0x224>)
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fc07 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
 8003ade:	e1fb      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_I2C_Mem_Read+0x56>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e1f4      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x440>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d007      	beq.n	8003b14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2222      	movs	r2, #34	; 0x22
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a5b      	ldr	r2, [pc, #364]	; (8003cc0 <HAL_I2C_Mem_Read+0x228>)
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b56:	88f8      	ldrh	r0, [r7, #6]
 8003b58:	893a      	ldrh	r2, [r7, #8]
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	4603      	mov	r3, r0
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fad4 	bl	8004114 <I2C_RequestMemoryRead>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e1b0      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d113      	bne.n	8003ba6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	623b      	str	r3, [r7, #32]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	623b      	str	r3, [r7, #32]
 8003b92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	e184      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d11b      	bne.n	8003be6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e164      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d11b      	bne.n	8003c26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	e144      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c3c:	e138      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	f200 80f1 	bhi.w	8003e2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d123      	bne.n	8003c98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fc9d 	bl	8004594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e139      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c96:	e10b      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d14e      	bne.n	8003d3e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <HAL_I2C_Mem_Read+0x22c>)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fb1a 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e10e      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x440>
 8003cba:	bf00      	nop
 8003cbc:	00100002 	.word	0x00100002
 8003cc0:	ffff0000 	.word	0xffff0000
 8003cc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d3c:	e0b8      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	2200      	movs	r2, #0
 8003d46:	4966      	ldr	r1, [pc, #408]	; (8003ee0 <HAL_I2C_Mem_Read+0x448>)
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 facb 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0bf      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	2200      	movs	r2, #0
 8003da2:	494f      	ldr	r1, [pc, #316]	; (8003ee0 <HAL_I2C_Mem_Read+0x448>)
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fa9d 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e091      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e28:	e042      	b.n	8003eb0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fbb0 	bl	8004594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e04c      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d118      	bne.n	8003eb0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f aec2 	bne.w	8003c3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3728      	adds	r7, #40	; 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	00010004 	.word	0x00010004

08003ee4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d006      	beq.n	8003f0e <I2C_MasterRequestWrite+0x2a>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d003      	beq.n	8003f0e <I2C_MasterRequestWrite+0x2a>
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f0c:	d108      	bne.n	8003f20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	e00b      	b.n	8003f38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	2b12      	cmp	r3, #18
 8003f26:	d107      	bne.n	8003f38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f9cd 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00d      	beq.n	8003f6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f5e:	d103      	bne.n	8003f68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e035      	b.n	8003fd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f74:	d108      	bne.n	8003f88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f76:	897b      	ldrh	r3, [r7, #10]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f84:	611a      	str	r2, [r3, #16]
 8003f86:	e01b      	b.n	8003fc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f88:	897b      	ldrh	r3, [r7, #10]
 8003f8a:	11db      	asrs	r3, r3, #7
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	f003 0306 	and.w	r3, r3, #6
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f063 030f 	orn	r3, r3, #15
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	490e      	ldr	r1, [pc, #56]	; (8003fe0 <I2C_MasterRequestWrite+0xfc>)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f9f3 	bl	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e010      	b.n	8003fd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fb6:	897b      	ldrh	r3, [r7, #10]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4907      	ldr	r1, [pc, #28]	; (8003fe4 <I2C_MasterRequestWrite+0x100>)
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f9e3 	bl	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	00010008 	.word	0x00010008
 8003fe4:	00010002 	.word	0x00010002

08003fe8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	817b      	strh	r3, [r7, #10]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	813b      	strh	r3, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	2200      	movs	r2, #0
 800401a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f960 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004038:	d103      	bne.n	8004042 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e05f      	b.n	8004106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004046:	897b      	ldrh	r3, [r7, #10]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	6a3a      	ldr	r2, [r7, #32]
 800405a:	492d      	ldr	r1, [pc, #180]	; (8004110 <I2C_RequestMemoryWrite+0x128>)
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f998 	bl	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e04c      	b.n	8004106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004084:	6a39      	ldr	r1, [r7, #32]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fa02 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2b04      	cmp	r3, #4
 8004098:	d107      	bne.n	80040aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e02b      	b.n	8004106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d105      	bne.n	80040c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]
 80040be:	e021      	b.n	8004104 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d0:	6a39      	ldr	r1, [r7, #32]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f9dc 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d107      	bne.n	80040f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e005      	b.n	8004106 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040fa:	893b      	ldrh	r3, [r7, #8]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	00010002 	.word	0x00010002

08004114 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	4608      	mov	r0, r1
 800411e:	4611      	mov	r1, r2
 8004120:	461a      	mov	r2, r3
 8004122:	4603      	mov	r3, r0
 8004124:	817b      	strh	r3, [r7, #10]
 8004126:	460b      	mov	r3, r1
 8004128:	813b      	strh	r3, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800413c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800414c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	2200      	movs	r2, #0
 8004156:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f8c2 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004174:	d103      	bne.n	800417e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e0aa      	b.n	80042d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004182:	897b      	ldrh	r3, [r7, #10]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	6a3a      	ldr	r2, [r7, #32]
 8004196:	4952      	ldr	r1, [pc, #328]	; (80042e0 <I2C_RequestMemoryRead+0x1cc>)
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f8fa 	bl	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e097      	b.n	80042d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	6a39      	ldr	r1, [r7, #32]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f964 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d107      	bne.n	80041e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e076      	b.n	80042d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ea:	88fb      	ldrh	r3, [r7, #6]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d105      	bne.n	80041fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041f0:	893b      	ldrh	r3, [r7, #8]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	611a      	str	r2, [r3, #16]
 80041fa:	e021      	b.n	8004240 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041fc:	893b      	ldrh	r3, [r7, #8]
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	b29b      	uxth	r3, r3
 8004202:	b2da      	uxtb	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800420a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420c:	6a39      	ldr	r1, [r7, #32]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f93e 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	2b04      	cmp	r3, #4
 8004220:	d107      	bne.n	8004232 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e050      	b.n	80042d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004236:	893b      	ldrh	r3, [r7, #8]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004242:	6a39      	ldr	r1, [r7, #32]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 f923 	bl	8004490 <I2C_WaitOnTXEFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	2b04      	cmp	r3, #4
 8004256:	d107      	bne.n	8004268 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e035      	b.n	80042d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2200      	movs	r2, #0
 8004284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f82b 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00d      	beq.n	80042b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a2:	d103      	bne.n	80042ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e013      	b.n	80042d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042b0:	897b      	ldrh	r3, [r7, #10]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	6a3a      	ldr	r2, [r7, #32]
 80042c4:	4906      	ldr	r1, [pc, #24]	; (80042e0 <I2C_RequestMemoryRead+0x1cc>)
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f863 	bl	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	00010002 	.word	0x00010002

080042e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f4:	e025      	b.n	8004342 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d021      	beq.n	8004342 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fe fd05 	bl	8002d0c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d116      	bne.n	8004342 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f043 0220 	orr.w	r2, r3, #32
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e023      	b.n	800438a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d10d      	bne.n	8004368 <I2C_WaitOnFlagUntilTimeout+0x84>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	43da      	mvns	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4013      	ands	r3, r2
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	e00c      	b.n	8004382 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	43da      	mvns	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4013      	ands	r3, r2
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	429a      	cmp	r2, r3
 8004386:	d0b6      	beq.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043a0:	e051      	b.n	8004446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b0:	d123      	bne.n	80043fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f043 0204 	orr.w	r2, r3, #4
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e046      	b.n	8004488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d021      	beq.n	8004446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004402:	f7fe fc83 	bl	8002d0c <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	429a      	cmp	r2, r3
 8004410:	d302      	bcc.n	8004418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d116      	bne.n	8004446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f043 0220 	orr.w	r2, r3, #32
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e020      	b.n	8004488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	0c1b      	lsrs	r3, r3, #16
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	d10c      	bne.n	800446a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	43da      	mvns	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	4013      	ands	r3, r2
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	bf14      	ite	ne
 8004462:	2301      	movne	r3, #1
 8004464:	2300      	moveq	r3, #0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	e00b      	b.n	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	43da      	mvns	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4013      	ands	r3, r2
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	bf14      	ite	ne
 800447c:	2301      	movne	r3, #1
 800447e:	2300      	moveq	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d18d      	bne.n	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800449c:	e02d      	b.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f8ce 	bl	8004640 <I2C_IsAcknowledgeFailed>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e02d      	b.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d021      	beq.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b6:	f7fe fc29 	bl	8002d0c <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d116      	bne.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f043 0220 	orr.w	r2, r3, #32
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e007      	b.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004504:	2b80      	cmp	r3, #128	; 0x80
 8004506:	d1ca      	bne.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800451e:	e02d      	b.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f88d 	bl	8004640 <I2C_IsAcknowledgeFailed>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e02d      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d021      	beq.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004538:	f7fe fbe8 	bl	8002d0c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	429a      	cmp	r2, r3
 8004546:	d302      	bcc.n	800454e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d116      	bne.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e007      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b04      	cmp	r3, #4
 8004588:	d1ca      	bne.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045a0:	e042      	b.n	8004628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d119      	bne.n	80045e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0210 	mvn.w	r2, #16
 80045b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e029      	b.n	8004638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e4:	f7fe fb92 	bl	8002d0c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d116      	bne.n	8004628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	f043 0220 	orr.w	r2, r3, #32
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e007      	b.n	8004638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	d1b5      	bne.n	80045a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004656:	d11b      	bne.n	8004690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	f043 0204 	orr.w	r2, r3, #4
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e267      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d075      	beq.n	80047aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046be:	4b88      	ldr	r3, [pc, #544]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d00c      	beq.n	80046e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ca:	4b85      	ldr	r3, [pc, #532]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d112      	bne.n	80046fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d6:	4b82      	ldr	r3, [pc, #520]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e2:	d10b      	bne.n	80046fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e4:	4b7e      	ldr	r3, [pc, #504]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d05b      	beq.n	80047a8 <HAL_RCC_OscConfig+0x108>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d157      	bne.n	80047a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e242      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004704:	d106      	bne.n	8004714 <HAL_RCC_OscConfig+0x74>
 8004706:	4b76      	ldr	r3, [pc, #472]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a75      	ldr	r2, [pc, #468]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800470c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e01d      	b.n	8004750 <HAL_RCC_OscConfig+0xb0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x98>
 800471e:	4b70      	ldr	r3, [pc, #448]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6f      	ldr	r2, [pc, #444]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b6d      	ldr	r3, [pc, #436]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a6c      	ldr	r2, [pc, #432]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0xb0>
 8004738:	4b69      	ldr	r3, [pc, #420]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a68      	ldr	r2, [pc, #416]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800473e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a65      	ldr	r2, [pc, #404]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800474a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800474e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d013      	beq.n	8004780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fe fad8 	bl	8002d0c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004760:	f7fe fad4 	bl	8002d0c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	; 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e207      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	4b5b      	ldr	r3, [pc, #364]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0xc0>
 800477e:	e014      	b.n	80047aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fe fac4 	bl	8002d0c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004788:	f7fe fac0 	bl	8002d0c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	; 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e1f3      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479a:	4b51      	ldr	r3, [pc, #324]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0xe8>
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d063      	beq.n	800487e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047b6:	4b4a      	ldr	r3, [pc, #296]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c2:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d11c      	bne.n	8004808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ce:	4b44      	ldr	r3, [pc, #272]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d116      	bne.n	8004808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047da:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_RCC_OscConfig+0x152>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e1c7      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f2:	4b3b      	ldr	r3, [pc, #236]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4937      	ldr	r1, [pc, #220]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004802:	4313      	orrs	r3, r2
 8004804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	e03a      	b.n	800487e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004810:	4b34      	ldr	r3, [pc, #208]	; (80048e4 <HAL_RCC_OscConfig+0x244>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fe fa79 	bl	8002d0c <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481e:	f7fe fa75 	bl	8002d0c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1a8      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004830:	4b2b      	ldr	r3, [pc, #172]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4925      	ldr	r1, [pc, #148]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	e015      	b.n	800487e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004852:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <HAL_RCC_OscConfig+0x244>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fe fa58 	bl	8002d0c <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004860:	f7fe fa54 	bl	8002d0c <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e187      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d036      	beq.n	80048f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d016      	beq.n	80048c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <HAL_RCC_OscConfig+0x248>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fe fa38 	bl	8002d0c <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a0:	f7fe fa34 	bl	8002d0c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e167      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_OscConfig+0x240>)
 80048b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x200>
 80048be:	e01b      	b.n	80048f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_OscConfig+0x248>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fe fa21 	bl	8002d0c <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048cc:	e00e      	b.n	80048ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ce:	f7fe fa1d 	bl	8002d0c <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d907      	bls.n	80048ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e150      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
 80048e0:	40023800 	.word	0x40023800
 80048e4:	42470000 	.word	0x42470000
 80048e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	4b88      	ldr	r3, [pc, #544]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ea      	bne.n	80048ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8097 	beq.w	8004a34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004906:	2300      	movs	r3, #0
 8004908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490a:	4b81      	ldr	r3, [pc, #516]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	4b7d      	ldr	r3, [pc, #500]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	4a7c      	ldr	r2, [pc, #496]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004924:	6413      	str	r3, [r2, #64]	; 0x40
 8004926:	4b7a      	ldr	r3, [pc, #488]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004936:	4b77      	ldr	r3, [pc, #476]	; (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d118      	bne.n	8004974 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004942:	4b74      	ldr	r3, [pc, #464]	; (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a73      	ldr	r2, [pc, #460]	; (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494e:	f7fe f9dd 	bl	8002d0c <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004956:	f7fe f9d9 	bl	8002d0c <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e10c      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004968:	4b6a      	ldr	r3, [pc, #424]	; (8004b14 <HAL_RCC_OscConfig+0x474>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d106      	bne.n	800498a <HAL_RCC_OscConfig+0x2ea>
 800497c:	4b64      	ldr	r3, [pc, #400]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004980:	4a63      	ldr	r2, [pc, #396]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6713      	str	r3, [r2, #112]	; 0x70
 8004988:	e01c      	b.n	80049c4 <HAL_RCC_OscConfig+0x324>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b05      	cmp	r3, #5
 8004990:	d10c      	bne.n	80049ac <HAL_RCC_OscConfig+0x30c>
 8004992:	4b5f      	ldr	r3, [pc, #380]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	4a5e      	ldr	r2, [pc, #376]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
 800499e:	4b5c      	ldr	r3, [pc, #368]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	4a5b      	ldr	r2, [pc, #364]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70
 80049aa:	e00b      	b.n	80049c4 <HAL_RCC_OscConfig+0x324>
 80049ac:	4b58      	ldr	r3, [pc, #352]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b0:	4a57      	ldr	r2, [pc, #348]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	6713      	str	r3, [r2, #112]	; 0x70
 80049b8:	4b55      	ldr	r3, [pc, #340]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	4a54      	ldr	r2, [pc, #336]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049be:	f023 0304 	bic.w	r3, r3, #4
 80049c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d015      	beq.n	80049f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fe f99e 	bl	8002d0c <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d4:	f7fe f99a 	bl	8002d0c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e0cb      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0ee      	beq.n	80049d4 <HAL_RCC_OscConfig+0x334>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f8:	f7fe f988 	bl	8002d0c <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fe f984 	bl	8002d0c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e0b5      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a16:	4b3e      	ldr	r3, [pc, #248]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1ee      	bne.n	8004a00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a28:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	4a38      	ldr	r2, [pc, #224]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a1 	beq.w	8004b80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a3e:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d05c      	beq.n	8004b04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d141      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a52:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fe f958 	bl	8002d0c <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fe f954 	bl	8002d0c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e087      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69da      	ldr	r2, [r3, #28]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	3b01      	subs	r3, #1
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	491b      	ldr	r1, [pc, #108]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aae:	f7fe f92d 	bl	8002d0c <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab6:	f7fe f929 	bl	8002d0c <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e05c      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac8:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x416>
 8004ad4:	e054      	b.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fe f916 	bl	8002d0c <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fe f912 	bl	8002d0c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e045      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x444>
 8004b02:	e03d      	b.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e038      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40007000 	.word	0x40007000
 8004b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <HAL_RCC_OscConfig+0x4ec>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d028      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d121      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d11a      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d111      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	3b01      	subs	r3, #1
 8004b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800

08004b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0cc      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b68      	ldr	r3, [pc, #416]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d90c      	bls.n	8004bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b65      	ldr	r3, [pc, #404]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bba:	4b63      	ldr	r3, [pc, #396]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0b8      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be4:	4b59      	ldr	r3, [pc, #356]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a58      	ldr	r2, [pc, #352]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bfc:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a52      	ldr	r2, [pc, #328]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c08:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	494d      	ldr	r1, [pc, #308]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d044      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d119      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e07f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d003      	beq.n	8004c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4e:	4b3f      	ldr	r3, [pc, #252]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e06f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e067      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6e:	4b37      	ldr	r3, [pc, #220]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 0203 	bic.w	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4934      	ldr	r1, [pc, #208]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c80:	f7fe f844 	bl	8002d0c <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c88:	f7fe f840 	bl	8002d0c <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e04f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 020c 	and.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d1eb      	bne.n	8004c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d20c      	bcs.n	8004cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b22      	ldr	r3, [pc, #136]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e032      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4916      	ldr	r1, [pc, #88]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	490e      	ldr	r1, [pc, #56]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d16:	f000 f821 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	490a      	ldr	r1, [pc, #40]	; (8004d50 <HAL_RCC_ClockConfig+0x1c0>)
 8004d28:	5ccb      	ldrb	r3, [r1, r3]
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_RCC_ClockConfig+0x1c8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd ffa4 	bl	8002c84 <HAL_InitTick>

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40023c00 	.word	0x40023c00
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	0800c1b8 	.word	0x0800c1b8
 8004d54:	20000000 	.word	0x20000000
 8004d58:	20000004 	.word	0x20000004

08004d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b094      	sub	sp, #80	; 0x50
 8004d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	647b      	str	r3, [r7, #68]	; 0x44
 8004d68:	2300      	movs	r3, #0
 8004d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d74:	4b79      	ldr	r3, [pc, #484]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 030c 	and.w	r3, r3, #12
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d00d      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0x40>
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	f200 80e1 	bhi.w	8004f48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x34>
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d8e:	e0db      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d90:	4b73      	ldr	r3, [pc, #460]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d94:	e0db      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d96:	4b73      	ldr	r3, [pc, #460]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d9a:	e0d8      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d9c:	4b6f      	ldr	r3, [pc, #444]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da6:	4b6d      	ldr	r3, [pc, #436]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d063      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db2:	4b6a      	ldr	r3, [pc, #424]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	099b      	lsrs	r3, r3, #6
 8004db8:	2200      	movs	r2, #0
 8004dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dce:	4622      	mov	r2, r4
 8004dd0:	462b      	mov	r3, r5
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f04f 0100 	mov.w	r1, #0
 8004dda:	0159      	lsls	r1, r3, #5
 8004ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de0:	0150      	lsls	r0, r2, #5
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4621      	mov	r1, r4
 8004de8:	1a51      	subs	r1, r2, r1
 8004dea:	6139      	str	r1, [r7, #16]
 8004dec:	4629      	mov	r1, r5
 8004dee:	eb63 0301 	sbc.w	r3, r3, r1
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e00:	4659      	mov	r1, fp
 8004e02:	018b      	lsls	r3, r1, #6
 8004e04:	4651      	mov	r1, sl
 8004e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	018a      	lsls	r2, r1, #6
 8004e0e:	4651      	mov	r1, sl
 8004e10:	ebb2 0801 	subs.w	r8, r2, r1
 8004e14:	4659      	mov	r1, fp
 8004e16:	eb63 0901 	sbc.w	r9, r3, r1
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2e:	4690      	mov	r8, r2
 8004e30:	4699      	mov	r9, r3
 8004e32:	4623      	mov	r3, r4
 8004e34:	eb18 0303 	adds.w	r3, r8, r3
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	eb49 0303 	adc.w	r3, r9, r3
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	024b      	lsls	r3, r1, #9
 8004e52:	4621      	mov	r1, r4
 8004e54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e58:	4621      	mov	r1, r4
 8004e5a:	024a      	lsls	r2, r1, #9
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e62:	2200      	movs	r2, #0
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e6c:	f7fb ff0c 	bl	8000c88 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e78:	e058      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7a:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	2200      	movs	r2, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	4611      	mov	r1, r2
 8004e86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	f04f 0000 	mov.w	r0, #0
 8004e9c:	f04f 0100 	mov.w	r1, #0
 8004ea0:	0159      	lsls	r1, r3, #5
 8004ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea6:	0150      	lsls	r0, r2, #5
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4641      	mov	r1, r8
 8004eae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ec4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ec8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ecc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ed0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	00eb      	lsls	r3, r5, #3
 8004ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee2:	00e2      	lsls	r2, r4, #3
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	461d      	mov	r5, r3
 8004ee8:	4643      	mov	r3, r8
 8004eea:	18e3      	adds	r3, r4, r3
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	464b      	mov	r3, r9
 8004ef0:	eb45 0303 	adc.w	r3, r5, r3
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f02:	4629      	mov	r1, r5
 8004f04:	028b      	lsls	r3, r1, #10
 8004f06:	4621      	mov	r1, r4
 8004f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	028a      	lsls	r2, r1, #10
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f16:	2200      	movs	r2, #0
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	61fa      	str	r2, [r7, #28]
 8004f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f20:	f7fb feb2 	bl	8000c88 <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4613      	mov	r3, r2
 8004f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	3301      	adds	r3, #1
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f46:	e002      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3750      	adds	r7, #80	; 0x50
 8004f54:	46bd      	mov	sp, r7
 8004f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	00f42400 	.word	0x00f42400
 8004f64:	007a1200 	.word	0x007a1200

08004f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000000 	.word	0x20000000

08004f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f84:	f7ff fff0 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	0a9b      	lsrs	r3, r3, #10
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	0800c1c8 	.word	0x0800c1c8

08004fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fac:	f7ff ffdc 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	0b5b      	lsrs	r3, r3, #13
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	4903      	ldr	r1, [pc, #12]	; (8004fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fbe:	5ccb      	ldrb	r3, [r1, r3]
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	0800c1c8 	.word	0x0800c1c8

08004fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e041      	b.n	8005066 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fd fc1c 	bl	8002834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f000 fc7a 	bl	8005908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	d001      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e04e      	b.n	8005126 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a23      	ldr	r2, [pc, #140]	; (8005134 <HAL_TIM_Base_Start_IT+0xc4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d022      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d01d      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1f      	ldr	r2, [pc, #124]	; (8005138 <HAL_TIM_Base_Start_IT+0xc8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d018      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1e      	ldr	r2, [pc, #120]	; (800513c <HAL_TIM_Base_Start_IT+0xcc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00e      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <HAL_TIM_Base_Start_IT+0xd4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a19      	ldr	r2, [pc, #100]	; (8005148 <HAL_TIM_Base_Start_IT+0xd8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a18      	ldr	r2, [pc, #96]	; (800514c <HAL_TIM_Base_Start_IT+0xdc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d111      	bne.n	8005114 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d010      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0201 	orr.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005112:	e007      	b.n	8005124 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40000c00 	.word	0x40000c00
 8005144:	40010400 	.word	0x40010400
 8005148:	40014000 	.word	0x40014000
 800514c:	40001800 	.word	0x40001800

08005150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e041      	b.n	80051e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f839 	bl	80051ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f000 fbba 	bl	8005908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_TIM_PWM_Start+0x24>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	bf14      	ite	ne
 8005220:	2301      	movne	r3, #1
 8005222:	2300      	moveq	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	e022      	b.n	800526e <HAL_TIM_PWM_Start+0x6a>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b04      	cmp	r3, #4
 800522c:	d109      	bne.n	8005242 <HAL_TIM_PWM_Start+0x3e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b01      	cmp	r3, #1
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	e015      	b.n	800526e <HAL_TIM_PWM_Start+0x6a>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d109      	bne.n	800525c <HAL_TIM_PWM_Start+0x58>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e008      	b.n	800526e <HAL_TIM_PWM_Start+0x6a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e07c      	b.n	8005370 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0x82>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005284:	e013      	b.n	80052ae <HAL_TIM_PWM_Start+0xaa>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b04      	cmp	r3, #4
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Start+0x92>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005294:	e00b      	b.n	80052ae <HAL_TIM_PWM_Start+0xaa>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_PWM_Start+0xa2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a4:	e003      	b.n	80052ae <HAL_TIM_PWM_Start+0xaa>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2201      	movs	r2, #1
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fe10 	bl	8005edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a2d      	ldr	r2, [pc, #180]	; (8005378 <HAL_TIM_PWM_Start+0x174>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIM_PWM_Start+0xcc>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2c      	ldr	r2, [pc, #176]	; (800537c <HAL_TIM_PWM_Start+0x178>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d101      	bne.n	80052d4 <HAL_TIM_PWM_Start+0xd0>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <HAL_TIM_PWM_Start+0xd2>
 80052d4:	2300      	movs	r3, #0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d007      	beq.n	80052ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a22      	ldr	r2, [pc, #136]	; (8005378 <HAL_TIM_PWM_Start+0x174>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_TIM_PWM_Start+0x136>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fc:	d01d      	beq.n	800533a <HAL_TIM_PWM_Start+0x136>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <HAL_TIM_PWM_Start+0x17c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_TIM_PWM_Start+0x136>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <HAL_TIM_PWM_Start+0x180>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_TIM_PWM_Start+0x136>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <HAL_TIM_PWM_Start+0x184>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_TIM_PWM_Start+0x136>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a16      	ldr	r2, [pc, #88]	; (800537c <HAL_TIM_PWM_Start+0x178>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_TIM_PWM_Start+0x136>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a18      	ldr	r2, [pc, #96]	; (800538c <HAL_TIM_PWM_Start+0x188>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIM_PWM_Start+0x136>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a16      	ldr	r2, [pc, #88]	; (8005390 <HAL_TIM_PWM_Start+0x18c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d111      	bne.n	800535e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b06      	cmp	r3, #6
 800534a:	d010      	beq.n	800536e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535c:	e007      	b.n	800536e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0201 	orr.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40010000 	.word	0x40010000
 800537c:	40010400 	.word	0x40010400
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800
 8005388:	40000c00 	.word	0x40000c00
 800538c:	40014000 	.word	0x40014000
 8005390:	40001800 	.word	0x40001800

08005394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d122      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0202 	mvn.w	r2, #2
 80053c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa77 	bl	80058ca <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa69 	bl	80058b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fa7a 	bl	80058de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d122      	bne.n	8005444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b04      	cmp	r3, #4
 800540a:	d11b      	bne.n	8005444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0204 	mvn.w	r2, #4
 8005414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2202      	movs	r2, #2
 800541a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa4d 	bl	80058ca <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fa3f 	bl	80058b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fa50 	bl	80058de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b08      	cmp	r3, #8
 8005450:	d122      	bne.n	8005498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b08      	cmp	r3, #8
 800545e:	d11b      	bne.n	8005498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0208 	mvn.w	r2, #8
 8005468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2204      	movs	r2, #4
 800546e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa23 	bl	80058ca <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa15 	bl	80058b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fa26 	bl	80058de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b10      	cmp	r3, #16
 80054a4:	d122      	bne.n	80054ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d11b      	bne.n	80054ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0210 	mvn.w	r2, #16
 80054bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2208      	movs	r2, #8
 80054c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f9f9 	bl	80058ca <HAL_TIM_IC_CaptureCallback>
 80054d8:	e005      	b.n	80054e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9eb 	bl	80058b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f9fc 	bl	80058de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d10e      	bne.n	8005518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b01      	cmp	r3, #1
 8005506:	d107      	bne.n	8005518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0201 	mvn.w	r2, #1
 8005510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fc fd98 	bl	8002048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d10e      	bne.n	8005544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005530:	2b80      	cmp	r3, #128	; 0x80
 8005532:	d107      	bne.n	8005544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800553c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fd78 	bl	8006034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d10e      	bne.n	8005570 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d107      	bne.n	8005570 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f9c1 	bl	80058f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b20      	cmp	r3, #32
 800557c:	d10e      	bne.n	800559c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b20      	cmp	r3, #32
 800558a:	d107      	bne.n	800559c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0220 	mvn.w	r2, #32
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fd42 	bl	8006020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055be:	2302      	movs	r3, #2
 80055c0:	e0ae      	b.n	8005720 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b0c      	cmp	r3, #12
 80055ce:	f200 809f 	bhi.w	8005710 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	0800560d 	.word	0x0800560d
 80055dc:	08005711 	.word	0x08005711
 80055e0:	08005711 	.word	0x08005711
 80055e4:	08005711 	.word	0x08005711
 80055e8:	0800564d 	.word	0x0800564d
 80055ec:	08005711 	.word	0x08005711
 80055f0:	08005711 	.word	0x08005711
 80055f4:	08005711 	.word	0x08005711
 80055f8:	0800568f 	.word	0x0800568f
 80055fc:	08005711 	.word	0x08005711
 8005600:	08005711 	.word	0x08005711
 8005604:	08005711 	.word	0x08005711
 8005608:	080056cf 	.word	0x080056cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fa18 	bl	8005a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0208 	orr.w	r2, r2, #8
 8005626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0204 	bic.w	r2, r2, #4
 8005636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6999      	ldr	r1, [r3, #24]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	619a      	str	r2, [r3, #24]
      break;
 800564a:	e064      	b.n	8005716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fa68 	bl	8005b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6999      	ldr	r1, [r3, #24]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	021a      	lsls	r2, r3, #8
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	619a      	str	r2, [r3, #24]
      break;
 800568c:	e043      	b.n	8005716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fabd 	bl	8005c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0208 	orr.w	r2, r2, #8
 80056a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0204 	bic.w	r2, r2, #4
 80056b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69d9      	ldr	r1, [r3, #28]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	61da      	str	r2, [r3, #28]
      break;
 80056cc:	e023      	b.n	8005716 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fb11 	bl	8005cfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69d9      	ldr	r1, [r3, #28]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	021a      	lsls	r2, r3, #8
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	61da      	str	r2, [r3, #28]
      break;
 800570e:	e002      	b.n	8005716 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	75fb      	strb	r3, [r7, #23]
      break;
 8005714:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800571e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_TIM_ConfigClockSource+0x1c>
 8005740:	2302      	movs	r3, #2
 8005742:	e0b4      	b.n	80058ae <HAL_TIM_ConfigClockSource+0x186>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800576a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577c:	d03e      	beq.n	80057fc <HAL_TIM_ConfigClockSource+0xd4>
 800577e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005782:	f200 8087 	bhi.w	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 8005786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578a:	f000 8086 	beq.w	800589a <HAL_TIM_ConfigClockSource+0x172>
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005792:	d87f      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 8005794:	2b70      	cmp	r3, #112	; 0x70
 8005796:	d01a      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0xa6>
 8005798:	2b70      	cmp	r3, #112	; 0x70
 800579a:	d87b      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 800579c:	2b60      	cmp	r3, #96	; 0x60
 800579e:	d050      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x11a>
 80057a0:	2b60      	cmp	r3, #96	; 0x60
 80057a2:	d877      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 80057a4:	2b50      	cmp	r3, #80	; 0x50
 80057a6:	d03c      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0xfa>
 80057a8:	2b50      	cmp	r3, #80	; 0x50
 80057aa:	d873      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d058      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x13a>
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d86f      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 80057b4:	2b30      	cmp	r3, #48	; 0x30
 80057b6:	d064      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x15a>
 80057b8:	2b30      	cmp	r3, #48	; 0x30
 80057ba:	d86b      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d060      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x15a>
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d867      	bhi.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d05c      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x15a>
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d05a      	beq.n	8005882 <HAL_TIM_ConfigClockSource+0x15a>
 80057cc:	e062      	b.n	8005894 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6899      	ldr	r1, [r3, #8]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f000 fb5d 	bl	8005e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	609a      	str	r2, [r3, #8]
      break;
 80057fa:	e04f      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6899      	ldr	r1, [r3, #8]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f000 fb46 	bl	8005e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800581e:	609a      	str	r2, [r3, #8]
      break;
 8005820:	e03c      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	461a      	mov	r2, r3
 8005830:	f000 faba 	bl	8005da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2150      	movs	r1, #80	; 0x50
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fb13 	bl	8005e66 <TIM_ITRx_SetConfig>
      break;
 8005840:	e02c      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6859      	ldr	r1, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	461a      	mov	r2, r3
 8005850:	f000 fad9 	bl	8005e06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2160      	movs	r1, #96	; 0x60
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fb03 	bl	8005e66 <TIM_ITRx_SetConfig>
      break;
 8005860:	e01c      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6859      	ldr	r1, [r3, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	461a      	mov	r2, r3
 8005870:	f000 fa9a 	bl	8005da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2140      	movs	r1, #64	; 0x40
 800587a:	4618      	mov	r0, r3
 800587c:	f000 faf3 	bl	8005e66 <TIM_ITRx_SetConfig>
      break;
 8005880:	e00c      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f000 faea 	bl	8005e66 <TIM_ITRx_SetConfig>
      break;
 8005892:	e003      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
      break;
 8005898:	e000      	b.n	800589c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800589a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a40      	ldr	r2, [pc, #256]	; (8005a1c <TIM_Base_SetConfig+0x114>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005926:	d00f      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a3d      	ldr	r2, [pc, #244]	; (8005a20 <TIM_Base_SetConfig+0x118>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00b      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a3c      	ldr	r2, [pc, #240]	; (8005a24 <TIM_Base_SetConfig+0x11c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d007      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3b      	ldr	r2, [pc, #236]	; (8005a28 <TIM_Base_SetConfig+0x120>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3a      	ldr	r2, [pc, #232]	; (8005a2c <TIM_Base_SetConfig+0x124>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d108      	bne.n	800595a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <TIM_Base_SetConfig+0x114>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d02b      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005968:	d027      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2c      	ldr	r2, [pc, #176]	; (8005a20 <TIM_Base_SetConfig+0x118>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d023      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2b      	ldr	r2, [pc, #172]	; (8005a24 <TIM_Base_SetConfig+0x11c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01f      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2a      	ldr	r2, [pc, #168]	; (8005a28 <TIM_Base_SetConfig+0x120>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01b      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a29      	ldr	r2, [pc, #164]	; (8005a2c <TIM_Base_SetConfig+0x124>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d017      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a28      	ldr	r2, [pc, #160]	; (8005a30 <TIM_Base_SetConfig+0x128>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a27      	ldr	r2, [pc, #156]	; (8005a34 <TIM_Base_SetConfig+0x12c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00f      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a26      	ldr	r2, [pc, #152]	; (8005a38 <TIM_Base_SetConfig+0x130>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00b      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a25      	ldr	r2, [pc, #148]	; (8005a3c <TIM_Base_SetConfig+0x134>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d007      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a24      	ldr	r2, [pc, #144]	; (8005a40 <TIM_Base_SetConfig+0x138>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a23      	ldr	r2, [pc, #140]	; (8005a44 <TIM_Base_SetConfig+0x13c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d108      	bne.n	80059cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <TIM_Base_SetConfig+0x114>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_Base_SetConfig+0xf8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a0c      	ldr	r2, [pc, #48]	; (8005a2c <TIM_Base_SetConfig+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d103      	bne.n	8005a08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	615a      	str	r2, [r3, #20]
}
 8005a0e:	bf00      	nop
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800
 8005a28:	40000c00 	.word	0x40000c00
 8005a2c:	40010400 	.word	0x40010400
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800
 8005a3c:	40001800 	.word	0x40001800
 8005a40:	40001c00 	.word	0x40001c00
 8005a44:	40002000 	.word	0x40002000

08005a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 0302 	bic.w	r3, r3, #2
 8005a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a20      	ldr	r2, [pc, #128]	; (8005b20 <TIM_OC1_SetConfig+0xd8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC1_SetConfig+0x64>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a1f      	ldr	r2, [pc, #124]	; (8005b24 <TIM_OC1_SetConfig+0xdc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10c      	bne.n	8005ac6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0308 	bic.w	r3, r3, #8
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f023 0304 	bic.w	r3, r3, #4
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <TIM_OC1_SetConfig+0xd8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_OC1_SetConfig+0x8e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <TIM_OC1_SetConfig+0xdc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d111      	bne.n	8005afa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	621a      	str	r2, [r3, #32]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400

08005b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	f023 0210 	bic.w	r2, r3, #16
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f023 0320 	bic.w	r3, r3, #32
 8005b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a22      	ldr	r2, [pc, #136]	; (8005c0c <TIM_OC2_SetConfig+0xe4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC2_SetConfig+0x68>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a21      	ldr	r2, [pc, #132]	; (8005c10 <TIM_OC2_SetConfig+0xe8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d10d      	bne.n	8005bac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005baa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a17      	ldr	r2, [pc, #92]	; (8005c0c <TIM_OC2_SetConfig+0xe4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_OC2_SetConfig+0x94>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <TIM_OC2_SetConfig+0xe8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d113      	bne.n	8005be4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	621a      	str	r2, [r3, #32]
}
 8005bfe:	bf00      	nop
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	40010400 	.word	0x40010400

08005c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0303 	bic.w	r3, r3, #3
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a21      	ldr	r2, [pc, #132]	; (8005cf4 <TIM_OC3_SetConfig+0xe0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d003      	beq.n	8005c7a <TIM_OC3_SetConfig+0x66>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a20      	ldr	r2, [pc, #128]	; (8005cf8 <TIM_OC3_SetConfig+0xe4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10d      	bne.n	8005c96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a16      	ldr	r2, [pc, #88]	; (8005cf4 <TIM_OC3_SetConfig+0xe0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_OC3_SetConfig+0x92>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a15      	ldr	r2, [pc, #84]	; (8005cf8 <TIM_OC3_SetConfig+0xe4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d113      	bne.n	8005cce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400

08005cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	031b      	lsls	r3, r3, #12
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a12      	ldr	r2, [pc, #72]	; (8005da0 <TIM_OC4_SetConfig+0xa4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC4_SetConfig+0x68>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a11      	ldr	r2, [pc, #68]	; (8005da4 <TIM_OC4_SetConfig+0xa8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d109      	bne.n	8005d78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	019b      	lsls	r3, r3, #6
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40010400 	.word	0x40010400

08005da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f023 0201 	bic.w	r2, r3, #1
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f023 030a 	bic.w	r3, r3, #10
 8005de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b087      	sub	sp, #28
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f023 0210 	bic.w	r2, r3, #16
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	031b      	lsls	r3, r3, #12
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f043 0307 	orr.w	r3, r3, #7
 8005e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	609a      	str	r2, [r3, #8]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	021a      	lsls	r2, r3, #8
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	609a      	str	r2, [r3, #8]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f003 031f 	and.w	r3, r3, #31
 8005eee:	2201      	movs	r2, #1
 8005ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1a      	ldr	r2, [r3, #32]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	43db      	mvns	r3, r3
 8005efe:	401a      	ands	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a1a      	ldr	r2, [r3, #32]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	fa01 f303 	lsl.w	r3, r1, r3
 8005f14:	431a      	orrs	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	621a      	str	r2, [r3, #32]
}
 8005f1a:	bf00      	nop
 8005f1c:	371c      	adds	r7, #28
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e05a      	b.n	8005ff6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a21      	ldr	r2, [pc, #132]	; (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d022      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8c:	d01d      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d018      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1b      	ldr	r2, [pc, #108]	; (800600c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1a      	ldr	r2, [pc, #104]	; (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00e      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a18      	ldr	r2, [pc, #96]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d009      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a17      	ldr	r2, [pc, #92]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d004      	beq.n	8005fca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a15      	ldr	r2, [pc, #84]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d10c      	bne.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40010400 	.word	0x40010400
 8006018:	40014000 	.word	0x40014000
 800601c:	40001800 	.word	0x40001800

08006020 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e03f      	b.n	80060da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fc fc56 	bl	8002920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2224      	movs	r2, #36	; 0x24
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800608a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fd23 	bl	8006ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695a      	ldr	r2, [r3, #20]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	4613      	mov	r3, r2
 80060ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d130      	bne.n	800615e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_UART_Transmit_IT+0x26>
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e029      	b.n	8006160 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_UART_Transmit_IT+0x38>
 8006116:	2302      	movs	r3, #2
 8006118:	e022      	b.n	8006160 <HAL_UART_Transmit_IT+0x7e>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	88fa      	ldrh	r2, [r7, #6]
 800612c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	88fa      	ldrh	r2, [r7, #6]
 8006132:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2221      	movs	r2, #33	; 0x21
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006158:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
  }
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b20      	cmp	r3, #32
 8006184:	d11d      	bne.n	80061c2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_UART_Receive_IT+0x26>
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e016      	b.n	80061c4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_UART_Receive_IT+0x38>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e00f      	b.n	80061c4 <HAL_UART_Receive_IT+0x58>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	461a      	mov	r2, r3
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fab5 	bl	8006728 <UART_Start_Receive_IT>
 80061be:	4603      	mov	r3, r0
 80061c0:	e000      	b.n	80061c4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061c2:	2302      	movs	r3, #2
  }
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b0ba      	sub	sp, #232	; 0xe8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800620a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10f      	bne.n	8006232 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_UART_IRQHandler+0x66>
 800621e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006222:	f003 0320 	and.w	r3, r3, #32
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fb99 	bl	8006962 <UART_Receive_IT>
      return;
 8006230:	e256      	b.n	80066e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 80de 	beq.w	80063f8 <HAL_UART_IRQHandler+0x22c>
 800623c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 80d1 	beq.w	80063f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00b      	beq.n	800627a <HAL_UART_IRQHandler+0xae>
 8006262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626a:	2b00      	cmp	r3, #0
 800626c:	d005      	beq.n	800627a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f043 0201 	orr.w	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800627a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <HAL_UART_IRQHandler+0xd2>
 8006286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f043 0202 	orr.w	r2, r3, #2
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800629e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <HAL_UART_IRQHandler+0xf6>
 80062aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f043 0204 	orr.w	r2, r3, #4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d011      	beq.n	80062f2 <HAL_UART_IRQHandler+0x126>
 80062ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d105      	bne.n	80062e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	f043 0208 	orr.w	r2, r3, #8
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 81ed 	beq.w	80066d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <HAL_UART_IRQHandler+0x14e>
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fb24 	bl	8006962 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006324:	2b40      	cmp	r3, #64	; 0x40
 8006326:	bf0c      	ite	eq
 8006328:	2301      	moveq	r3, #1
 800632a:	2300      	movne	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <HAL_UART_IRQHandler+0x17a>
 800633e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d04f      	beq.n	80063e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fa2c 	bl	80067a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d141      	bne.n	80063de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3314      	adds	r3, #20
 8006360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3314      	adds	r3, #20
 8006382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006386:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800638a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800639e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1d9      	bne.n	800635a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d013      	beq.n	80063d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	4a7d      	ldr	r2, [pc, #500]	; (80065a8 <HAL_UART_IRQHandler+0x3dc>)
 80063b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fc fe57 	bl	800306e <HAL_DMA_Abort_IT>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d016      	beq.n	80063f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063d0:	4610      	mov	r0, r2
 80063d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	e00e      	b.n	80063f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f990 	bl	80066fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	e00a      	b.n	80063f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f98c 	bl	80066fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e4:	e006      	b.n	80063f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f988 	bl	80066fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063f2:	e170      	b.n	80066d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f4:	bf00      	nop
    return;
 80063f6:	e16e      	b.n	80066d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	f040 814a 	bne.w	8006696 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 8143 	beq.w	8006696 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 813c 	beq.w	8006696 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800641e:	2300      	movs	r3, #0
 8006420:	60bb      	str	r3, [r7, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b40      	cmp	r3, #64	; 0x40
 8006440:	f040 80b4 	bne.w	80065ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006450:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8140 	beq.w	80066da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800645e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006462:	429a      	cmp	r2, r3
 8006464:	f080 8139 	bcs.w	80066da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800646e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647a:	f000 8088 	beq.w	800658e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	330c      	adds	r3, #12
 8006484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006494:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800649c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80064aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80064b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1d9      	bne.n	800647e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3314      	adds	r3, #20
 80064d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3314      	adds	r3, #20
 80064ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e1      	bne.n	80064ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3314      	adds	r3, #20
 800650c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3314      	adds	r3, #20
 8006526:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800652a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800652c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006530:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e3      	bne.n	8006506 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	330c      	adds	r3, #12
 8006552:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800655c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655e:	f023 0310 	bic.w	r3, r3, #16
 8006562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	330c      	adds	r3, #12
 800656c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006570:	65ba      	str	r2, [r7, #88]	; 0x58
 8006572:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800657e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e3      	bne.n	800654c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	4618      	mov	r0, r3
 800658a:	f7fc fd00 	bl	8002f8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006596:	b29b      	uxth	r3, r3
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	b29b      	uxth	r3, r3
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f8b6 	bl	8006710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065a4:	e099      	b.n	80066da <HAL_UART_IRQHandler+0x50e>
 80065a6:	bf00      	nop
 80065a8:	0800686b 	.word	0x0800686b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 808b 	beq.w	80066de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8086 	beq.w	80066de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	330c      	adds	r3, #12
 80065d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065f6:	647a      	str	r2, [r7, #68]	; 0x44
 80065f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e3      	bne.n	80065d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3314      	adds	r3, #20
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	623b      	str	r3, [r7, #32]
   return(result);
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3314      	adds	r3, #20
 800662a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800662e:	633a      	str	r2, [r7, #48]	; 0x30
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e3      	bne.n	800660a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	330c      	adds	r3, #12
 8006656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0310 	bic.w	r3, r3, #16
 8006666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	330c      	adds	r3, #12
 8006670:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006674:	61fa      	str	r2, [r7, #28]
 8006676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	69b9      	ldr	r1, [r7, #24]
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	617b      	str	r3, [r7, #20]
   return(result);
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e3      	bne.n	8006650 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f83e 	bl	8006710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006694:	e023      	b.n	80066de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_UART_IRQHandler+0x4ea>
 80066a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f8ef 	bl	8006892 <UART_Transmit_IT>
    return;
 80066b4:	e014      	b.n	80066e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00e      	beq.n	80066e0 <HAL_UART_IRQHandler+0x514>
 80066c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d008      	beq.n	80066e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f92f 	bl	8006932 <UART_EndTransmit_IT>
    return;
 80066d4:	e004      	b.n	80066e0 <HAL_UART_IRQHandler+0x514>
    return;
 80066d6:	bf00      	nop
 80066d8:	e002      	b.n	80066e0 <HAL_UART_IRQHandler+0x514>
      return;
 80066da:	bf00      	nop
 80066dc:	e000      	b.n	80066e0 <HAL_UART_IRQHandler+0x514>
      return;
 80066de:	bf00      	nop
  }
}
 80066e0:	37e8      	adds	r7, #232	; 0xe8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop

080066e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4613      	mov	r3, r2
 8006734:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	88fa      	ldrh	r2, [r7, #6]
 8006746:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2222      	movs	r2, #34	; 0x22
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d007      	beq.n	8006776 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006774:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695a      	ldr	r2, [r3, #20]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0201 	orr.w	r2, r2, #1
 8006784:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0220 	orr.w	r2, r2, #32
 8006794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b095      	sub	sp, #84	; 0x54
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	330c      	adds	r3, #12
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330c      	adds	r3, #12
 80067ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067cc:	643a      	str	r2, [r7, #64]	; 0x40
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e5      	bne.n	80067ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3314      	adds	r3, #20
 80067e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f023 0301 	bic.w	r3, r3, #1
 80067f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3314      	adds	r3, #20
 80067fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006800:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e5      	bne.n	80067e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	2b01      	cmp	r3, #1
 800681a:	d119      	bne.n	8006850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330c      	adds	r3, #12
 8006822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	60bb      	str	r3, [r7, #8]
   return(result);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f023 0310 	bic.w	r3, r3, #16
 8006832:	647b      	str	r3, [r7, #68]	; 0x44
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	330c      	adds	r3, #12
 800683a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800683c:	61ba      	str	r2, [r7, #24]
 800683e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	6979      	ldr	r1, [r7, #20]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	613b      	str	r3, [r7, #16]
   return(result);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e5      	bne.n	800681c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800685e:	bf00      	nop
 8006860:	3754      	adds	r7, #84	; 0x54
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff ff39 	bl	80066fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b21      	cmp	r3, #33	; 0x21
 80068a4:	d13e      	bne.n	8006924 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ae:	d114      	bne.n	80068da <UART_Transmit_IT+0x48>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d110      	bne.n	80068da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	1c9a      	adds	r2, r3, #2
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	621a      	str	r2, [r3, #32]
 80068d8:	e008      	b.n	80068ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	1c59      	adds	r1, r3, #1
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6211      	str	r1, [r2, #32]
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	4619      	mov	r1, r3
 80068fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10f      	bne.n	8006920 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800690e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800691e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e000      	b.n	8006926 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006924:	2302      	movs	r3, #2
  }
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006948:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff fec8 	bl	80066e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b08c      	sub	sp, #48	; 0x30
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b22      	cmp	r3, #34	; 0x22
 8006974:	f040 80ab 	bne.w	8006ace <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006980:	d117      	bne.n	80069b2 <UART_Receive_IT+0x50>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d113      	bne.n	80069b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800698a:	2300      	movs	r3, #0
 800698c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	1c9a      	adds	r2, r3, #2
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28
 80069b0:	e026      	b.n	8006a00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c4:	d007      	beq.n	80069d6 <UART_Receive_IT+0x74>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <UART_Receive_IT+0x82>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d106      	bne.n	80069e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e008      	b.n	80069f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d15a      	bne.n	8006aca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0220 	bic.w	r2, r2, #32
 8006a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0201 	bic.w	r2, r2, #1
 8006a42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d135      	bne.n	8006ac0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	613b      	str	r3, [r7, #16]
   return(result);
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f023 0310 	bic.w	r3, r3, #16
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	330c      	adds	r3, #12
 8006a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7a:	623a      	str	r2, [r7, #32]
 8006a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	69f9      	ldr	r1, [r7, #28]
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e5      	bne.n	8006a5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d10a      	bne.n	8006ab2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff fe29 	bl	8006710 <HAL_UARTEx_RxEventCallback>
 8006abe:	e002      	b.n	8006ac6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7fb fb0b 	bl	80020dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e002      	b.n	8006ad0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e000      	b.n	8006ad0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006ace:	2302      	movs	r3, #2
  }
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3730      	adds	r7, #48	; 0x30
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006adc:	b0c0      	sub	sp, #256	; 0x100
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af4:	68d9      	ldr	r1, [r3, #12]
 8006af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	ea40 0301 	orr.w	r3, r0, r1
 8006b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b30:	f021 010c 	bic.w	r1, r1, #12
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b52:	6999      	ldr	r1, [r3, #24]
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	ea40 0301 	orr.w	r3, r0, r1
 8006b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b8f      	ldr	r3, [pc, #572]	; (8006da4 <UART_SetConfig+0x2cc>)
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d005      	beq.n	8006b78 <UART_SetConfig+0xa0>
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b8d      	ldr	r3, [pc, #564]	; (8006da8 <UART_SetConfig+0x2d0>)
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d104      	bne.n	8006b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b78:	f7fe fa16 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 8006b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b80:	e003      	b.n	8006b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b82:	f7fe f9fd 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8006b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b94:	f040 810c 	bne.w	8006db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006baa:	4622      	mov	r2, r4
 8006bac:	462b      	mov	r3, r5
 8006bae:	1891      	adds	r1, r2, r2
 8006bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bb2:	415b      	adcs	r3, r3
 8006bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bba:	4621      	mov	r1, r4
 8006bbc:	eb12 0801 	adds.w	r8, r2, r1
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	eb43 0901 	adc.w	r9, r3, r1
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bda:	4690      	mov	r8, r2
 8006bdc:	4699      	mov	r9, r3
 8006bde:	4623      	mov	r3, r4
 8006be0:	eb18 0303 	adds.w	r3, r8, r3
 8006be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006be8:	462b      	mov	r3, r5
 8006bea:	eb49 0303 	adc.w	r3, r9, r3
 8006bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c06:	460b      	mov	r3, r1
 8006c08:	18db      	adds	r3, r3, r3
 8006c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	eb42 0303 	adc.w	r3, r2, r3
 8006c12:	657b      	str	r3, [r7, #84]	; 0x54
 8006c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c1c:	f7fa f834 	bl	8000c88 <__aeabi_uldivmod>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4b61      	ldr	r3, [pc, #388]	; (8006dac <UART_SetConfig+0x2d4>)
 8006c26:	fba3 2302 	umull	r2, r3, r3, r2
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	011c      	lsls	r4, r3, #4
 8006c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	1891      	adds	r1, r2, r2
 8006c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c48:	415b      	adcs	r3, r3
 8006c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c50:	4641      	mov	r1, r8
 8006c52:	eb12 0a01 	adds.w	sl, r2, r1
 8006c56:	4649      	mov	r1, r9
 8006c58:	eb43 0b01 	adc.w	fp, r3, r1
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c70:	4692      	mov	sl, r2
 8006c72:	469b      	mov	fp, r3
 8006c74:	4643      	mov	r3, r8
 8006c76:	eb1a 0303 	adds.w	r3, sl, r3
 8006c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	eb4b 0303 	adc.w	r3, fp, r3
 8006c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	18db      	adds	r3, r3, r3
 8006ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	eb42 0303 	adc.w	r3, r2, r3
 8006ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8006caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006cb2:	f7f9 ffe9 	bl	8000c88 <__aeabi_uldivmod>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4b3b      	ldr	r3, [pc, #236]	; (8006dac <UART_SetConfig+0x2d4>)
 8006cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	2264      	movs	r2, #100	; 0x64
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	1acb      	subs	r3, r1, r3
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006cd2:	4b36      	ldr	r3, [pc, #216]	; (8006dac <UART_SetConfig+0x2d4>)
 8006cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ce0:	441c      	add	r4, r3
 8006ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	1891      	adds	r1, r2, r2
 8006cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cfc:	415b      	adcs	r3, r3
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d04:	4641      	mov	r1, r8
 8006d06:	1851      	adds	r1, r2, r1
 8006d08:	6339      	str	r1, [r7, #48]	; 0x30
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	414b      	adcs	r3, r1
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	00cb      	lsls	r3, r1, #3
 8006d20:	4651      	mov	r1, sl
 8006d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d26:	4651      	mov	r1, sl
 8006d28:	00ca      	lsls	r2, r1, #3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4642      	mov	r2, r8
 8006d32:	189b      	adds	r3, r3, r2
 8006d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d38:	464b      	mov	r3, r9
 8006d3a:	460a      	mov	r2, r1
 8006d3c:	eb42 0303 	adc.w	r3, r2, r3
 8006d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d58:	460b      	mov	r3, r1
 8006d5a:	18db      	adds	r3, r3, r3
 8006d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5e:	4613      	mov	r3, r2
 8006d60:	eb42 0303 	adc.w	r3, r2, r3
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d6e:	f7f9 ff8b 	bl	8000c88 <__aeabi_uldivmod>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <UART_SetConfig+0x2d4>)
 8006d78:	fba3 1302 	umull	r1, r3, r3, r2
 8006d7c:	095b      	lsrs	r3, r3, #5
 8006d7e:	2164      	movs	r1, #100	; 0x64
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	3332      	adds	r3, #50	; 0x32
 8006d8a:	4a08      	ldr	r2, [pc, #32]	; (8006dac <UART_SetConfig+0x2d4>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	f003 0207 	and.w	r2, r3, #7
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4422      	add	r2, r4
 8006d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006da0:	e106      	b.n	8006fb0 <UART_SetConfig+0x4d8>
 8006da2:	bf00      	nop
 8006da4:	40011000 	.word	0x40011000
 8006da8:	40011400 	.word	0x40011400
 8006dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006dc2:	4642      	mov	r2, r8
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	1891      	adds	r1, r2, r2
 8006dc8:	6239      	str	r1, [r7, #32]
 8006dca:	415b      	adcs	r3, r3
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	1854      	adds	r4, r2, r1
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	eb43 0501 	adc.w	r5, r3, r1
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	00eb      	lsls	r3, r5, #3
 8006de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dea:	00e2      	lsls	r2, r4, #3
 8006dec:	4614      	mov	r4, r2
 8006dee:	461d      	mov	r5, r3
 8006df0:	4643      	mov	r3, r8
 8006df2:	18e3      	adds	r3, r4, r3
 8006df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006df8:	464b      	mov	r3, r9
 8006dfa:	eb45 0303 	adc.w	r3, r5, r3
 8006dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e1e:	4629      	mov	r1, r5
 8006e20:	008b      	lsls	r3, r1, #2
 8006e22:	4621      	mov	r1, r4
 8006e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e28:	4621      	mov	r1, r4
 8006e2a:	008a      	lsls	r2, r1, #2
 8006e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e30:	f7f9 ff2a 	bl	8000c88 <__aeabi_uldivmod>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4b60      	ldr	r3, [pc, #384]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	011c      	lsls	r4, r3, #4
 8006e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e54:	4642      	mov	r2, r8
 8006e56:	464b      	mov	r3, r9
 8006e58:	1891      	adds	r1, r2, r2
 8006e5a:	61b9      	str	r1, [r7, #24]
 8006e5c:	415b      	adcs	r3, r3
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e64:	4641      	mov	r1, r8
 8006e66:	1851      	adds	r1, r2, r1
 8006e68:	6139      	str	r1, [r7, #16]
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	414b      	adcs	r3, r1
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	00cb      	lsls	r3, r1, #3
 8006e80:	4651      	mov	r1, sl
 8006e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e86:	4651      	mov	r1, sl
 8006e88:	00ca      	lsls	r2, r1, #3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4642      	mov	r2, r8
 8006e92:	189b      	adds	r3, r3, r2
 8006e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e98:	464b      	mov	r3, r9
 8006e9a:	460a      	mov	r2, r1
 8006e9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	008b      	lsls	r3, r1, #2
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ec6:	4641      	mov	r1, r8
 8006ec8:	008a      	lsls	r2, r1, #2
 8006eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ece:	f7f9 fedb 	bl	8000c88 <__aeabi_uldivmod>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4b38      	ldr	r3, [pc, #224]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006eda:	fba3 2301 	umull	r2, r3, r3, r1
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	2264      	movs	r2, #100	; 0x64
 8006ee2:	fb02 f303 	mul.w	r3, r2, r3
 8006ee6:	1acb      	subs	r3, r1, r3
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	3332      	adds	r3, #50	; 0x32
 8006eec:	4a33      	ldr	r2, [pc, #204]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006eee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ef8:	441c      	add	r4, r3
 8006efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006efe:	2200      	movs	r2, #0
 8006f00:	673b      	str	r3, [r7, #112]	; 0x70
 8006f02:	677a      	str	r2, [r7, #116]	; 0x74
 8006f04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f08:	4642      	mov	r2, r8
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	1891      	adds	r1, r2, r2
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	415b      	adcs	r3, r3
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f18:	4641      	mov	r1, r8
 8006f1a:	1851      	adds	r1, r2, r1
 8006f1c:	6039      	str	r1, [r7, #0]
 8006f1e:	4649      	mov	r1, r9
 8006f20:	414b      	adcs	r3, r1
 8006f22:	607b      	str	r3, [r7, #4]
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f30:	4659      	mov	r1, fp
 8006f32:	00cb      	lsls	r3, r1, #3
 8006f34:	4651      	mov	r1, sl
 8006f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f3a:	4651      	mov	r1, sl
 8006f3c:	00ca      	lsls	r2, r1, #3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	4619      	mov	r1, r3
 8006f42:	4603      	mov	r3, r0
 8006f44:	4642      	mov	r2, r8
 8006f46:	189b      	adds	r3, r3, r2
 8006f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f4a:	464b      	mov	r3, r9
 8006f4c:	460a      	mov	r2, r1
 8006f4e:	eb42 0303 	adc.w	r3, r2, r3
 8006f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	663b      	str	r3, [r7, #96]	; 0x60
 8006f5e:	667a      	str	r2, [r7, #100]	; 0x64
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	008b      	lsls	r3, r1, #2
 8006f70:	4641      	mov	r1, r8
 8006f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f76:	4641      	mov	r1, r8
 8006f78:	008a      	lsls	r2, r1, #2
 8006f7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f7e:	f7f9 fe83 	bl	8000c88 <__aeabi_uldivmod>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006f88:	fba3 1302 	umull	r1, r3, r3, r2
 8006f8c:	095b      	lsrs	r3, r3, #5
 8006f8e:	2164      	movs	r1, #100	; 0x64
 8006f90:	fb01 f303 	mul.w	r3, r1, r3
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	3332      	adds	r3, #50	; 0x32
 8006f9a:	4a08      	ldr	r2, [pc, #32]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	f003 020f 	and.w	r2, r3, #15
 8006fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4422      	add	r2, r4
 8006fae:	609a      	str	r2, [r3, #8]
}
 8006fb0:	bf00      	nop
 8006fb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fbc:	51eb851f 	.word	0x51eb851f

08006fc0 <atof>:
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f000 be0d 	b.w	8007be0 <strtod>

08006fc6 <sulp>:
 8006fc6:	b570      	push	{r4, r5, r6, lr}
 8006fc8:	4604      	mov	r4, r0
 8006fca:	460d      	mov	r5, r1
 8006fcc:	ec45 4b10 	vmov	d0, r4, r5
 8006fd0:	4616      	mov	r6, r2
 8006fd2:	f003 fab9 	bl	800a548 <__ulp>
 8006fd6:	ec51 0b10 	vmov	r0, r1, d0
 8006fda:	b17e      	cbz	r6, 8006ffc <sulp+0x36>
 8006fdc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fe0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	dd09      	ble.n	8006ffc <sulp+0x36>
 8006fe8:	051b      	lsls	r3, r3, #20
 8006fea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fee:	2400      	movs	r4, #0
 8006ff0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	f7f9 fafe 	bl	80005f8 <__aeabi_dmul>
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007000 <_strtod_l>:
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	ed2d 8b02 	vpush	{d8}
 8007008:	b09b      	sub	sp, #108	; 0x6c
 800700a:	4604      	mov	r4, r0
 800700c:	9213      	str	r2, [sp, #76]	; 0x4c
 800700e:	2200      	movs	r2, #0
 8007010:	9216      	str	r2, [sp, #88]	; 0x58
 8007012:	460d      	mov	r5, r1
 8007014:	f04f 0800 	mov.w	r8, #0
 8007018:	f04f 0900 	mov.w	r9, #0
 800701c:	460a      	mov	r2, r1
 800701e:	9215      	str	r2, [sp, #84]	; 0x54
 8007020:	7811      	ldrb	r1, [r2, #0]
 8007022:	292b      	cmp	r1, #43	; 0x2b
 8007024:	d04c      	beq.n	80070c0 <_strtod_l+0xc0>
 8007026:	d83a      	bhi.n	800709e <_strtod_l+0x9e>
 8007028:	290d      	cmp	r1, #13
 800702a:	d834      	bhi.n	8007096 <_strtod_l+0x96>
 800702c:	2908      	cmp	r1, #8
 800702e:	d834      	bhi.n	800709a <_strtod_l+0x9a>
 8007030:	2900      	cmp	r1, #0
 8007032:	d03d      	beq.n	80070b0 <_strtod_l+0xb0>
 8007034:	2200      	movs	r2, #0
 8007036:	920a      	str	r2, [sp, #40]	; 0x28
 8007038:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800703a:	7832      	ldrb	r2, [r6, #0]
 800703c:	2a30      	cmp	r2, #48	; 0x30
 800703e:	f040 80b4 	bne.w	80071aa <_strtod_l+0x1aa>
 8007042:	7872      	ldrb	r2, [r6, #1]
 8007044:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007048:	2a58      	cmp	r2, #88	; 0x58
 800704a:	d170      	bne.n	800712e <_strtod_l+0x12e>
 800704c:	9302      	str	r3, [sp, #8]
 800704e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007050:	9301      	str	r3, [sp, #4]
 8007052:	ab16      	add	r3, sp, #88	; 0x58
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	4a8e      	ldr	r2, [pc, #568]	; (8007290 <_strtod_l+0x290>)
 8007058:	ab17      	add	r3, sp, #92	; 0x5c
 800705a:	a915      	add	r1, sp, #84	; 0x54
 800705c:	4620      	mov	r0, r4
 800705e:	f002 fb51 	bl	8009704 <__gethex>
 8007062:	f010 070f 	ands.w	r7, r0, #15
 8007066:	4605      	mov	r5, r0
 8007068:	d005      	beq.n	8007076 <_strtod_l+0x76>
 800706a:	2f06      	cmp	r7, #6
 800706c:	d12a      	bne.n	80070c4 <_strtod_l+0xc4>
 800706e:	3601      	adds	r6, #1
 8007070:	2300      	movs	r3, #0
 8007072:	9615      	str	r6, [sp, #84]	; 0x54
 8007074:	930a      	str	r3, [sp, #40]	; 0x28
 8007076:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007078:	2b00      	cmp	r3, #0
 800707a:	f040 857f 	bne.w	8007b7c <_strtod_l+0xb7c>
 800707e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007080:	b1db      	cbz	r3, 80070ba <_strtod_l+0xba>
 8007082:	4642      	mov	r2, r8
 8007084:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007088:	ec43 2b10 	vmov	d0, r2, r3
 800708c:	b01b      	add	sp, #108	; 0x6c
 800708e:	ecbd 8b02 	vpop	{d8}
 8007092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007096:	2920      	cmp	r1, #32
 8007098:	d1cc      	bne.n	8007034 <_strtod_l+0x34>
 800709a:	3201      	adds	r2, #1
 800709c:	e7bf      	b.n	800701e <_strtod_l+0x1e>
 800709e:	292d      	cmp	r1, #45	; 0x2d
 80070a0:	d1c8      	bne.n	8007034 <_strtod_l+0x34>
 80070a2:	2101      	movs	r1, #1
 80070a4:	910a      	str	r1, [sp, #40]	; 0x28
 80070a6:	1c51      	adds	r1, r2, #1
 80070a8:	9115      	str	r1, [sp, #84]	; 0x54
 80070aa:	7852      	ldrb	r2, [r2, #1]
 80070ac:	2a00      	cmp	r2, #0
 80070ae:	d1c3      	bne.n	8007038 <_strtod_l+0x38>
 80070b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070b2:	9515      	str	r5, [sp, #84]	; 0x54
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f040 855f 	bne.w	8007b78 <_strtod_l+0xb78>
 80070ba:	4642      	mov	r2, r8
 80070bc:	464b      	mov	r3, r9
 80070be:	e7e3      	b.n	8007088 <_strtod_l+0x88>
 80070c0:	2100      	movs	r1, #0
 80070c2:	e7ef      	b.n	80070a4 <_strtod_l+0xa4>
 80070c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80070c6:	b13a      	cbz	r2, 80070d8 <_strtod_l+0xd8>
 80070c8:	2135      	movs	r1, #53	; 0x35
 80070ca:	a818      	add	r0, sp, #96	; 0x60
 80070cc:	f003 fb39 	bl	800a742 <__copybits>
 80070d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80070d2:	4620      	mov	r0, r4
 80070d4:	f002 ff0c 	bl	8009ef0 <_Bfree>
 80070d8:	3f01      	subs	r7, #1
 80070da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070dc:	2f04      	cmp	r7, #4
 80070de:	d806      	bhi.n	80070ee <_strtod_l+0xee>
 80070e0:	e8df f007 	tbb	[pc, r7]
 80070e4:	201d0314 	.word	0x201d0314
 80070e8:	14          	.byte	0x14
 80070e9:	00          	.byte	0x00
 80070ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80070ee:	05e9      	lsls	r1, r5, #23
 80070f0:	bf48      	it	mi
 80070f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80070f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070fa:	0d1b      	lsrs	r3, r3, #20
 80070fc:	051b      	lsls	r3, r3, #20
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1b9      	bne.n	8007076 <_strtod_l+0x76>
 8007102:	f001 fb8b 	bl	800881c <__errno>
 8007106:	2322      	movs	r3, #34	; 0x22
 8007108:	6003      	str	r3, [r0, #0]
 800710a:	e7b4      	b.n	8007076 <_strtod_l+0x76>
 800710c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007110:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007114:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007118:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800711c:	e7e7      	b.n	80070ee <_strtod_l+0xee>
 800711e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007298 <_strtod_l+0x298>
 8007122:	e7e4      	b.n	80070ee <_strtod_l+0xee>
 8007124:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007128:	f04f 38ff 	mov.w	r8, #4294967295
 800712c:	e7df      	b.n	80070ee <_strtod_l+0xee>
 800712e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	9215      	str	r2, [sp, #84]	; 0x54
 8007134:	785b      	ldrb	r3, [r3, #1]
 8007136:	2b30      	cmp	r3, #48	; 0x30
 8007138:	d0f9      	beq.n	800712e <_strtod_l+0x12e>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d09b      	beq.n	8007076 <_strtod_l+0x76>
 800713e:	2301      	movs	r3, #1
 8007140:	f04f 0a00 	mov.w	sl, #0
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007148:	930b      	str	r3, [sp, #44]	; 0x2c
 800714a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800714e:	46d3      	mov	fp, sl
 8007150:	220a      	movs	r2, #10
 8007152:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007154:	7806      	ldrb	r6, [r0, #0]
 8007156:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800715a:	b2d9      	uxtb	r1, r3
 800715c:	2909      	cmp	r1, #9
 800715e:	d926      	bls.n	80071ae <_strtod_l+0x1ae>
 8007160:	494c      	ldr	r1, [pc, #304]	; (8007294 <_strtod_l+0x294>)
 8007162:	2201      	movs	r2, #1
 8007164:	f001 fae8 	bl	8008738 <strncmp>
 8007168:	2800      	cmp	r0, #0
 800716a:	d030      	beq.n	80071ce <_strtod_l+0x1ce>
 800716c:	2000      	movs	r0, #0
 800716e:	4632      	mov	r2, r6
 8007170:	9005      	str	r0, [sp, #20]
 8007172:	465e      	mov	r6, fp
 8007174:	4603      	mov	r3, r0
 8007176:	2a65      	cmp	r2, #101	; 0x65
 8007178:	d001      	beq.n	800717e <_strtod_l+0x17e>
 800717a:	2a45      	cmp	r2, #69	; 0x45
 800717c:	d113      	bne.n	80071a6 <_strtod_l+0x1a6>
 800717e:	b91e      	cbnz	r6, 8007188 <_strtod_l+0x188>
 8007180:	9a04      	ldr	r2, [sp, #16]
 8007182:	4302      	orrs	r2, r0
 8007184:	d094      	beq.n	80070b0 <_strtod_l+0xb0>
 8007186:	2600      	movs	r6, #0
 8007188:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800718a:	1c6a      	adds	r2, r5, #1
 800718c:	9215      	str	r2, [sp, #84]	; 0x54
 800718e:	786a      	ldrb	r2, [r5, #1]
 8007190:	2a2b      	cmp	r2, #43	; 0x2b
 8007192:	d074      	beq.n	800727e <_strtod_l+0x27e>
 8007194:	2a2d      	cmp	r2, #45	; 0x2d
 8007196:	d078      	beq.n	800728a <_strtod_l+0x28a>
 8007198:	f04f 0c00 	mov.w	ip, #0
 800719c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80071a0:	2909      	cmp	r1, #9
 80071a2:	d97f      	bls.n	80072a4 <_strtod_l+0x2a4>
 80071a4:	9515      	str	r5, [sp, #84]	; 0x54
 80071a6:	2700      	movs	r7, #0
 80071a8:	e09e      	b.n	80072e8 <_strtod_l+0x2e8>
 80071aa:	2300      	movs	r3, #0
 80071ac:	e7c8      	b.n	8007140 <_strtod_l+0x140>
 80071ae:	f1bb 0f08 	cmp.w	fp, #8
 80071b2:	bfd8      	it	le
 80071b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80071b6:	f100 0001 	add.w	r0, r0, #1
 80071ba:	bfda      	itte	le
 80071bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80071c0:	9309      	strle	r3, [sp, #36]	; 0x24
 80071c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80071c6:	f10b 0b01 	add.w	fp, fp, #1
 80071ca:	9015      	str	r0, [sp, #84]	; 0x54
 80071cc:	e7c1      	b.n	8007152 <_strtod_l+0x152>
 80071ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	9215      	str	r2, [sp, #84]	; 0x54
 80071d4:	785a      	ldrb	r2, [r3, #1]
 80071d6:	f1bb 0f00 	cmp.w	fp, #0
 80071da:	d037      	beq.n	800724c <_strtod_l+0x24c>
 80071dc:	9005      	str	r0, [sp, #20]
 80071de:	465e      	mov	r6, fp
 80071e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80071e4:	2b09      	cmp	r3, #9
 80071e6:	d912      	bls.n	800720e <_strtod_l+0x20e>
 80071e8:	2301      	movs	r3, #1
 80071ea:	e7c4      	b.n	8007176 <_strtod_l+0x176>
 80071ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	9215      	str	r2, [sp, #84]	; 0x54
 80071f2:	785a      	ldrb	r2, [r3, #1]
 80071f4:	3001      	adds	r0, #1
 80071f6:	2a30      	cmp	r2, #48	; 0x30
 80071f8:	d0f8      	beq.n	80071ec <_strtod_l+0x1ec>
 80071fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80071fe:	2b08      	cmp	r3, #8
 8007200:	f200 84c1 	bhi.w	8007b86 <_strtod_l+0xb86>
 8007204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007206:	9005      	str	r0, [sp, #20]
 8007208:	2000      	movs	r0, #0
 800720a:	930b      	str	r3, [sp, #44]	; 0x2c
 800720c:	4606      	mov	r6, r0
 800720e:	3a30      	subs	r2, #48	; 0x30
 8007210:	f100 0301 	add.w	r3, r0, #1
 8007214:	d014      	beq.n	8007240 <_strtod_l+0x240>
 8007216:	9905      	ldr	r1, [sp, #20]
 8007218:	4419      	add	r1, r3
 800721a:	9105      	str	r1, [sp, #20]
 800721c:	4633      	mov	r3, r6
 800721e:	eb00 0c06 	add.w	ip, r0, r6
 8007222:	210a      	movs	r1, #10
 8007224:	4563      	cmp	r3, ip
 8007226:	d113      	bne.n	8007250 <_strtod_l+0x250>
 8007228:	1833      	adds	r3, r6, r0
 800722a:	2b08      	cmp	r3, #8
 800722c:	f106 0601 	add.w	r6, r6, #1
 8007230:	4406      	add	r6, r0
 8007232:	dc1a      	bgt.n	800726a <_strtod_l+0x26a>
 8007234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007236:	230a      	movs	r3, #10
 8007238:	fb03 2301 	mla	r3, r3, r1, r2
 800723c:	9309      	str	r3, [sp, #36]	; 0x24
 800723e:	2300      	movs	r3, #0
 8007240:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007242:	1c51      	adds	r1, r2, #1
 8007244:	9115      	str	r1, [sp, #84]	; 0x54
 8007246:	7852      	ldrb	r2, [r2, #1]
 8007248:	4618      	mov	r0, r3
 800724a:	e7c9      	b.n	80071e0 <_strtod_l+0x1e0>
 800724c:	4658      	mov	r0, fp
 800724e:	e7d2      	b.n	80071f6 <_strtod_l+0x1f6>
 8007250:	2b08      	cmp	r3, #8
 8007252:	f103 0301 	add.w	r3, r3, #1
 8007256:	dc03      	bgt.n	8007260 <_strtod_l+0x260>
 8007258:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800725a:	434f      	muls	r7, r1
 800725c:	9709      	str	r7, [sp, #36]	; 0x24
 800725e:	e7e1      	b.n	8007224 <_strtod_l+0x224>
 8007260:	2b10      	cmp	r3, #16
 8007262:	bfd8      	it	le
 8007264:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007268:	e7dc      	b.n	8007224 <_strtod_l+0x224>
 800726a:	2e10      	cmp	r6, #16
 800726c:	bfdc      	itt	le
 800726e:	230a      	movle	r3, #10
 8007270:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007274:	e7e3      	b.n	800723e <_strtod_l+0x23e>
 8007276:	2300      	movs	r3, #0
 8007278:	9305      	str	r3, [sp, #20]
 800727a:	2301      	movs	r3, #1
 800727c:	e780      	b.n	8007180 <_strtod_l+0x180>
 800727e:	f04f 0c00 	mov.w	ip, #0
 8007282:	1caa      	adds	r2, r5, #2
 8007284:	9215      	str	r2, [sp, #84]	; 0x54
 8007286:	78aa      	ldrb	r2, [r5, #2]
 8007288:	e788      	b.n	800719c <_strtod_l+0x19c>
 800728a:	f04f 0c01 	mov.w	ip, #1
 800728e:	e7f8      	b.n	8007282 <_strtod_l+0x282>
 8007290:	0800c1d4 	.word	0x0800c1d4
 8007294:	0800c1d0 	.word	0x0800c1d0
 8007298:	7ff00000 	.word	0x7ff00000
 800729c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800729e:	1c51      	adds	r1, r2, #1
 80072a0:	9115      	str	r1, [sp, #84]	; 0x54
 80072a2:	7852      	ldrb	r2, [r2, #1]
 80072a4:	2a30      	cmp	r2, #48	; 0x30
 80072a6:	d0f9      	beq.n	800729c <_strtod_l+0x29c>
 80072a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80072ac:	2908      	cmp	r1, #8
 80072ae:	f63f af7a 	bhi.w	80071a6 <_strtod_l+0x1a6>
 80072b2:	3a30      	subs	r2, #48	; 0x30
 80072b4:	9208      	str	r2, [sp, #32]
 80072b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072b8:	920c      	str	r2, [sp, #48]	; 0x30
 80072ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072bc:	1c57      	adds	r7, r2, #1
 80072be:	9715      	str	r7, [sp, #84]	; 0x54
 80072c0:	7852      	ldrb	r2, [r2, #1]
 80072c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80072c6:	f1be 0f09 	cmp.w	lr, #9
 80072ca:	d938      	bls.n	800733e <_strtod_l+0x33e>
 80072cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072ce:	1a7f      	subs	r7, r7, r1
 80072d0:	2f08      	cmp	r7, #8
 80072d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80072d6:	dc03      	bgt.n	80072e0 <_strtod_l+0x2e0>
 80072d8:	9908      	ldr	r1, [sp, #32]
 80072da:	428f      	cmp	r7, r1
 80072dc:	bfa8      	it	ge
 80072de:	460f      	movge	r7, r1
 80072e0:	f1bc 0f00 	cmp.w	ip, #0
 80072e4:	d000      	beq.n	80072e8 <_strtod_l+0x2e8>
 80072e6:	427f      	negs	r7, r7
 80072e8:	2e00      	cmp	r6, #0
 80072ea:	d14f      	bne.n	800738c <_strtod_l+0x38c>
 80072ec:	9904      	ldr	r1, [sp, #16]
 80072ee:	4301      	orrs	r1, r0
 80072f0:	f47f aec1 	bne.w	8007076 <_strtod_l+0x76>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f47f aedb 	bne.w	80070b0 <_strtod_l+0xb0>
 80072fa:	2a69      	cmp	r2, #105	; 0x69
 80072fc:	d029      	beq.n	8007352 <_strtod_l+0x352>
 80072fe:	dc26      	bgt.n	800734e <_strtod_l+0x34e>
 8007300:	2a49      	cmp	r2, #73	; 0x49
 8007302:	d026      	beq.n	8007352 <_strtod_l+0x352>
 8007304:	2a4e      	cmp	r2, #78	; 0x4e
 8007306:	f47f aed3 	bne.w	80070b0 <_strtod_l+0xb0>
 800730a:	499b      	ldr	r1, [pc, #620]	; (8007578 <_strtod_l+0x578>)
 800730c:	a815      	add	r0, sp, #84	; 0x54
 800730e:	f002 fc39 	bl	8009b84 <__match>
 8007312:	2800      	cmp	r0, #0
 8007314:	f43f aecc 	beq.w	80070b0 <_strtod_l+0xb0>
 8007318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b28      	cmp	r3, #40	; 0x28
 800731e:	d12f      	bne.n	8007380 <_strtod_l+0x380>
 8007320:	4996      	ldr	r1, [pc, #600]	; (800757c <_strtod_l+0x57c>)
 8007322:	aa18      	add	r2, sp, #96	; 0x60
 8007324:	a815      	add	r0, sp, #84	; 0x54
 8007326:	f002 fc41 	bl	8009bac <__hexnan>
 800732a:	2805      	cmp	r0, #5
 800732c:	d128      	bne.n	8007380 <_strtod_l+0x380>
 800732e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007330:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007334:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007338:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800733c:	e69b      	b.n	8007076 <_strtod_l+0x76>
 800733e:	9f08      	ldr	r7, [sp, #32]
 8007340:	210a      	movs	r1, #10
 8007342:	fb01 2107 	mla	r1, r1, r7, r2
 8007346:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800734a:	9208      	str	r2, [sp, #32]
 800734c:	e7b5      	b.n	80072ba <_strtod_l+0x2ba>
 800734e:	2a6e      	cmp	r2, #110	; 0x6e
 8007350:	e7d9      	b.n	8007306 <_strtod_l+0x306>
 8007352:	498b      	ldr	r1, [pc, #556]	; (8007580 <_strtod_l+0x580>)
 8007354:	a815      	add	r0, sp, #84	; 0x54
 8007356:	f002 fc15 	bl	8009b84 <__match>
 800735a:	2800      	cmp	r0, #0
 800735c:	f43f aea8 	beq.w	80070b0 <_strtod_l+0xb0>
 8007360:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007362:	4988      	ldr	r1, [pc, #544]	; (8007584 <_strtod_l+0x584>)
 8007364:	3b01      	subs	r3, #1
 8007366:	a815      	add	r0, sp, #84	; 0x54
 8007368:	9315      	str	r3, [sp, #84]	; 0x54
 800736a:	f002 fc0b 	bl	8009b84 <__match>
 800736e:	b910      	cbnz	r0, 8007376 <_strtod_l+0x376>
 8007370:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007372:	3301      	adds	r3, #1
 8007374:	9315      	str	r3, [sp, #84]	; 0x54
 8007376:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007594 <_strtod_l+0x594>
 800737a:	f04f 0800 	mov.w	r8, #0
 800737e:	e67a      	b.n	8007076 <_strtod_l+0x76>
 8007380:	4881      	ldr	r0, [pc, #516]	; (8007588 <_strtod_l+0x588>)
 8007382:	f001 fa89 	bl	8008898 <nan>
 8007386:	ec59 8b10 	vmov	r8, r9, d0
 800738a:	e674      	b.n	8007076 <_strtod_l+0x76>
 800738c:	9b05      	ldr	r3, [sp, #20]
 800738e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007390:	1afb      	subs	r3, r7, r3
 8007392:	f1bb 0f00 	cmp.w	fp, #0
 8007396:	bf08      	it	eq
 8007398:	46b3      	moveq	fp, r6
 800739a:	2e10      	cmp	r6, #16
 800739c:	9308      	str	r3, [sp, #32]
 800739e:	4635      	mov	r5, r6
 80073a0:	bfa8      	it	ge
 80073a2:	2510      	movge	r5, #16
 80073a4:	f7f9 f8ae 	bl	8000504 <__aeabi_ui2d>
 80073a8:	2e09      	cmp	r6, #9
 80073aa:	4680      	mov	r8, r0
 80073ac:	4689      	mov	r9, r1
 80073ae:	dd13      	ble.n	80073d8 <_strtod_l+0x3d8>
 80073b0:	4b76      	ldr	r3, [pc, #472]	; (800758c <_strtod_l+0x58c>)
 80073b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80073b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073ba:	f7f9 f91d 	bl	80005f8 <__aeabi_dmul>
 80073be:	4680      	mov	r8, r0
 80073c0:	4650      	mov	r0, sl
 80073c2:	4689      	mov	r9, r1
 80073c4:	f7f9 f89e 	bl	8000504 <__aeabi_ui2d>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4640      	mov	r0, r8
 80073ce:	4649      	mov	r1, r9
 80073d0:	f7f8 ff5c 	bl	800028c <__adddf3>
 80073d4:	4680      	mov	r8, r0
 80073d6:	4689      	mov	r9, r1
 80073d8:	2e0f      	cmp	r6, #15
 80073da:	dc38      	bgt.n	800744e <_strtod_l+0x44e>
 80073dc:	9b08      	ldr	r3, [sp, #32]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f43f ae49 	beq.w	8007076 <_strtod_l+0x76>
 80073e4:	dd24      	ble.n	8007430 <_strtod_l+0x430>
 80073e6:	2b16      	cmp	r3, #22
 80073e8:	dc0b      	bgt.n	8007402 <_strtod_l+0x402>
 80073ea:	4968      	ldr	r1, [pc, #416]	; (800758c <_strtod_l+0x58c>)
 80073ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073f4:	4642      	mov	r2, r8
 80073f6:	464b      	mov	r3, r9
 80073f8:	f7f9 f8fe 	bl	80005f8 <__aeabi_dmul>
 80073fc:	4680      	mov	r8, r0
 80073fe:	4689      	mov	r9, r1
 8007400:	e639      	b.n	8007076 <_strtod_l+0x76>
 8007402:	9a08      	ldr	r2, [sp, #32]
 8007404:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007408:	4293      	cmp	r3, r2
 800740a:	db20      	blt.n	800744e <_strtod_l+0x44e>
 800740c:	4c5f      	ldr	r4, [pc, #380]	; (800758c <_strtod_l+0x58c>)
 800740e:	f1c6 060f 	rsb	r6, r6, #15
 8007412:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007416:	4642      	mov	r2, r8
 8007418:	464b      	mov	r3, r9
 800741a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800741e:	f7f9 f8eb 	bl	80005f8 <__aeabi_dmul>
 8007422:	9b08      	ldr	r3, [sp, #32]
 8007424:	1b9e      	subs	r6, r3, r6
 8007426:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800742a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800742e:	e7e3      	b.n	80073f8 <_strtod_l+0x3f8>
 8007430:	9b08      	ldr	r3, [sp, #32]
 8007432:	3316      	adds	r3, #22
 8007434:	db0b      	blt.n	800744e <_strtod_l+0x44e>
 8007436:	9b05      	ldr	r3, [sp, #20]
 8007438:	1bdf      	subs	r7, r3, r7
 800743a:	4b54      	ldr	r3, [pc, #336]	; (800758c <_strtod_l+0x58c>)
 800743c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007444:	4640      	mov	r0, r8
 8007446:	4649      	mov	r1, r9
 8007448:	f7f9 fa00 	bl	800084c <__aeabi_ddiv>
 800744c:	e7d6      	b.n	80073fc <_strtod_l+0x3fc>
 800744e:	9b08      	ldr	r3, [sp, #32]
 8007450:	1b75      	subs	r5, r6, r5
 8007452:	441d      	add	r5, r3
 8007454:	2d00      	cmp	r5, #0
 8007456:	dd70      	ble.n	800753a <_strtod_l+0x53a>
 8007458:	f015 030f 	ands.w	r3, r5, #15
 800745c:	d00a      	beq.n	8007474 <_strtod_l+0x474>
 800745e:	494b      	ldr	r1, [pc, #300]	; (800758c <_strtod_l+0x58c>)
 8007460:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007464:	4642      	mov	r2, r8
 8007466:	464b      	mov	r3, r9
 8007468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800746c:	f7f9 f8c4 	bl	80005f8 <__aeabi_dmul>
 8007470:	4680      	mov	r8, r0
 8007472:	4689      	mov	r9, r1
 8007474:	f035 050f 	bics.w	r5, r5, #15
 8007478:	d04d      	beq.n	8007516 <_strtod_l+0x516>
 800747a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800747e:	dd22      	ble.n	80074c6 <_strtod_l+0x4c6>
 8007480:	2500      	movs	r5, #0
 8007482:	46ab      	mov	fp, r5
 8007484:	9509      	str	r5, [sp, #36]	; 0x24
 8007486:	9505      	str	r5, [sp, #20]
 8007488:	2322      	movs	r3, #34	; 0x22
 800748a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007594 <_strtod_l+0x594>
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	f04f 0800 	mov.w	r8, #0
 8007494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	f43f aded 	beq.w	8007076 <_strtod_l+0x76>
 800749c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800749e:	4620      	mov	r0, r4
 80074a0:	f002 fd26 	bl	8009ef0 <_Bfree>
 80074a4:	9905      	ldr	r1, [sp, #20]
 80074a6:	4620      	mov	r0, r4
 80074a8:	f002 fd22 	bl	8009ef0 <_Bfree>
 80074ac:	4659      	mov	r1, fp
 80074ae:	4620      	mov	r0, r4
 80074b0:	f002 fd1e 	bl	8009ef0 <_Bfree>
 80074b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074b6:	4620      	mov	r0, r4
 80074b8:	f002 fd1a 	bl	8009ef0 <_Bfree>
 80074bc:	4629      	mov	r1, r5
 80074be:	4620      	mov	r0, r4
 80074c0:	f002 fd16 	bl	8009ef0 <_Bfree>
 80074c4:	e5d7      	b.n	8007076 <_strtod_l+0x76>
 80074c6:	4b32      	ldr	r3, [pc, #200]	; (8007590 <_strtod_l+0x590>)
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	2300      	movs	r3, #0
 80074cc:	112d      	asrs	r5, r5, #4
 80074ce:	4640      	mov	r0, r8
 80074d0:	4649      	mov	r1, r9
 80074d2:	469a      	mov	sl, r3
 80074d4:	2d01      	cmp	r5, #1
 80074d6:	dc21      	bgt.n	800751c <_strtod_l+0x51c>
 80074d8:	b10b      	cbz	r3, 80074de <_strtod_l+0x4de>
 80074da:	4680      	mov	r8, r0
 80074dc:	4689      	mov	r9, r1
 80074de:	492c      	ldr	r1, [pc, #176]	; (8007590 <_strtod_l+0x590>)
 80074e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80074e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f0:	f7f9 f882 	bl	80005f8 <__aeabi_dmul>
 80074f4:	4b27      	ldr	r3, [pc, #156]	; (8007594 <_strtod_l+0x594>)
 80074f6:	460a      	mov	r2, r1
 80074f8:	400b      	ands	r3, r1
 80074fa:	4927      	ldr	r1, [pc, #156]	; (8007598 <_strtod_l+0x598>)
 80074fc:	428b      	cmp	r3, r1
 80074fe:	4680      	mov	r8, r0
 8007500:	d8be      	bhi.n	8007480 <_strtod_l+0x480>
 8007502:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007506:	428b      	cmp	r3, r1
 8007508:	bf86      	itte	hi
 800750a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800759c <_strtod_l+0x59c>
 800750e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007512:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007516:	2300      	movs	r3, #0
 8007518:	9304      	str	r3, [sp, #16]
 800751a:	e07b      	b.n	8007614 <_strtod_l+0x614>
 800751c:	07ea      	lsls	r2, r5, #31
 800751e:	d505      	bpl.n	800752c <_strtod_l+0x52c>
 8007520:	9b04      	ldr	r3, [sp, #16]
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f7f9 f867 	bl	80005f8 <__aeabi_dmul>
 800752a:	2301      	movs	r3, #1
 800752c:	9a04      	ldr	r2, [sp, #16]
 800752e:	3208      	adds	r2, #8
 8007530:	f10a 0a01 	add.w	sl, sl, #1
 8007534:	106d      	asrs	r5, r5, #1
 8007536:	9204      	str	r2, [sp, #16]
 8007538:	e7cc      	b.n	80074d4 <_strtod_l+0x4d4>
 800753a:	d0ec      	beq.n	8007516 <_strtod_l+0x516>
 800753c:	426d      	negs	r5, r5
 800753e:	f015 020f 	ands.w	r2, r5, #15
 8007542:	d00a      	beq.n	800755a <_strtod_l+0x55a>
 8007544:	4b11      	ldr	r3, [pc, #68]	; (800758c <_strtod_l+0x58c>)
 8007546:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800754a:	4640      	mov	r0, r8
 800754c:	4649      	mov	r1, r9
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	f7f9 f97b 	bl	800084c <__aeabi_ddiv>
 8007556:	4680      	mov	r8, r0
 8007558:	4689      	mov	r9, r1
 800755a:	112d      	asrs	r5, r5, #4
 800755c:	d0db      	beq.n	8007516 <_strtod_l+0x516>
 800755e:	2d1f      	cmp	r5, #31
 8007560:	dd1e      	ble.n	80075a0 <_strtod_l+0x5a0>
 8007562:	2500      	movs	r5, #0
 8007564:	46ab      	mov	fp, r5
 8007566:	9509      	str	r5, [sp, #36]	; 0x24
 8007568:	9505      	str	r5, [sp, #20]
 800756a:	2322      	movs	r3, #34	; 0x22
 800756c:	f04f 0800 	mov.w	r8, #0
 8007570:	f04f 0900 	mov.w	r9, #0
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	e78d      	b.n	8007494 <_strtod_l+0x494>
 8007578:	0800c235 	.word	0x0800c235
 800757c:	0800c1e8 	.word	0x0800c1e8
 8007580:	0800c22d 	.word	0x0800c22d
 8007584:	0800c267 	.word	0x0800c267
 8007588:	0800c5f9 	.word	0x0800c5f9
 800758c:	0800c3d8 	.word	0x0800c3d8
 8007590:	0800c3b0 	.word	0x0800c3b0
 8007594:	7ff00000 	.word	0x7ff00000
 8007598:	7ca00000 	.word	0x7ca00000
 800759c:	7fefffff 	.word	0x7fefffff
 80075a0:	f015 0310 	ands.w	r3, r5, #16
 80075a4:	bf18      	it	ne
 80075a6:	236a      	movne	r3, #106	; 0x6a
 80075a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800794c <_strtod_l+0x94c>
 80075ac:	9304      	str	r3, [sp, #16]
 80075ae:	4640      	mov	r0, r8
 80075b0:	4649      	mov	r1, r9
 80075b2:	2300      	movs	r3, #0
 80075b4:	07ea      	lsls	r2, r5, #31
 80075b6:	d504      	bpl.n	80075c2 <_strtod_l+0x5c2>
 80075b8:	e9da 2300 	ldrd	r2, r3, [sl]
 80075bc:	f7f9 f81c 	bl	80005f8 <__aeabi_dmul>
 80075c0:	2301      	movs	r3, #1
 80075c2:	106d      	asrs	r5, r5, #1
 80075c4:	f10a 0a08 	add.w	sl, sl, #8
 80075c8:	d1f4      	bne.n	80075b4 <_strtod_l+0x5b4>
 80075ca:	b10b      	cbz	r3, 80075d0 <_strtod_l+0x5d0>
 80075cc:	4680      	mov	r8, r0
 80075ce:	4689      	mov	r9, r1
 80075d0:	9b04      	ldr	r3, [sp, #16]
 80075d2:	b1bb      	cbz	r3, 8007604 <_strtod_l+0x604>
 80075d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80075d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075dc:	2b00      	cmp	r3, #0
 80075de:	4649      	mov	r1, r9
 80075e0:	dd10      	ble.n	8007604 <_strtod_l+0x604>
 80075e2:	2b1f      	cmp	r3, #31
 80075e4:	f340 811e 	ble.w	8007824 <_strtod_l+0x824>
 80075e8:	2b34      	cmp	r3, #52	; 0x34
 80075ea:	bfde      	ittt	le
 80075ec:	f04f 33ff 	movle.w	r3, #4294967295
 80075f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80075f4:	4093      	lslle	r3, r2
 80075f6:	f04f 0800 	mov.w	r8, #0
 80075fa:	bfcc      	ite	gt
 80075fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007600:	ea03 0901 	andle.w	r9, r3, r1
 8007604:	2200      	movs	r2, #0
 8007606:	2300      	movs	r3, #0
 8007608:	4640      	mov	r0, r8
 800760a:	4649      	mov	r1, r9
 800760c:	f7f9 fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007610:	2800      	cmp	r0, #0
 8007612:	d1a6      	bne.n	8007562 <_strtod_l+0x562>
 8007614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800761a:	4633      	mov	r3, r6
 800761c:	465a      	mov	r2, fp
 800761e:	4620      	mov	r0, r4
 8007620:	f002 fcce 	bl	8009fc0 <__s2b>
 8007624:	9009      	str	r0, [sp, #36]	; 0x24
 8007626:	2800      	cmp	r0, #0
 8007628:	f43f af2a 	beq.w	8007480 <_strtod_l+0x480>
 800762c:	9a08      	ldr	r2, [sp, #32]
 800762e:	9b05      	ldr	r3, [sp, #20]
 8007630:	2a00      	cmp	r2, #0
 8007632:	eba3 0307 	sub.w	r3, r3, r7
 8007636:	bfa8      	it	ge
 8007638:	2300      	movge	r3, #0
 800763a:	930c      	str	r3, [sp, #48]	; 0x30
 800763c:	2500      	movs	r5, #0
 800763e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007642:	9312      	str	r3, [sp, #72]	; 0x48
 8007644:	46ab      	mov	fp, r5
 8007646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007648:	4620      	mov	r0, r4
 800764a:	6859      	ldr	r1, [r3, #4]
 800764c:	f002 fc10 	bl	8009e70 <_Balloc>
 8007650:	9005      	str	r0, [sp, #20]
 8007652:	2800      	cmp	r0, #0
 8007654:	f43f af18 	beq.w	8007488 <_strtod_l+0x488>
 8007658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	3202      	adds	r2, #2
 800765e:	f103 010c 	add.w	r1, r3, #12
 8007662:	0092      	lsls	r2, r2, #2
 8007664:	300c      	adds	r0, #12
 8007666:	f001 f906 	bl	8008876 <memcpy>
 800766a:	ec49 8b10 	vmov	d0, r8, r9
 800766e:	aa18      	add	r2, sp, #96	; 0x60
 8007670:	a917      	add	r1, sp, #92	; 0x5c
 8007672:	4620      	mov	r0, r4
 8007674:	f002 ffd8 	bl	800a628 <__d2b>
 8007678:	ec49 8b18 	vmov	d8, r8, r9
 800767c:	9016      	str	r0, [sp, #88]	; 0x58
 800767e:	2800      	cmp	r0, #0
 8007680:	f43f af02 	beq.w	8007488 <_strtod_l+0x488>
 8007684:	2101      	movs	r1, #1
 8007686:	4620      	mov	r0, r4
 8007688:	f002 fd32 	bl	800a0f0 <__i2b>
 800768c:	4683      	mov	fp, r0
 800768e:	2800      	cmp	r0, #0
 8007690:	f43f aefa 	beq.w	8007488 <_strtod_l+0x488>
 8007694:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007696:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007698:	2e00      	cmp	r6, #0
 800769a:	bfab      	itete	ge
 800769c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800769e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80076a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80076a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80076a6:	bfac      	ite	ge
 80076a8:	eb06 0a03 	addge.w	sl, r6, r3
 80076ac:	1b9f      	sublt	r7, r3, r6
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	1af6      	subs	r6, r6, r3
 80076b2:	4416      	add	r6, r2
 80076b4:	4ba0      	ldr	r3, [pc, #640]	; (8007938 <_strtod_l+0x938>)
 80076b6:	3e01      	subs	r6, #1
 80076b8:	429e      	cmp	r6, r3
 80076ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076be:	f280 80c4 	bge.w	800784a <_strtod_l+0x84a>
 80076c2:	1b9b      	subs	r3, r3, r6
 80076c4:	2b1f      	cmp	r3, #31
 80076c6:	eba2 0203 	sub.w	r2, r2, r3
 80076ca:	f04f 0101 	mov.w	r1, #1
 80076ce:	f300 80b0 	bgt.w	8007832 <_strtod_l+0x832>
 80076d2:	fa01 f303 	lsl.w	r3, r1, r3
 80076d6:	930e      	str	r3, [sp, #56]	; 0x38
 80076d8:	2300      	movs	r3, #0
 80076da:	930d      	str	r3, [sp, #52]	; 0x34
 80076dc:	eb0a 0602 	add.w	r6, sl, r2
 80076e0:	9b04      	ldr	r3, [sp, #16]
 80076e2:	45b2      	cmp	sl, r6
 80076e4:	4417      	add	r7, r2
 80076e6:	441f      	add	r7, r3
 80076e8:	4653      	mov	r3, sl
 80076ea:	bfa8      	it	ge
 80076ec:	4633      	movge	r3, r6
 80076ee:	42bb      	cmp	r3, r7
 80076f0:	bfa8      	it	ge
 80076f2:	463b      	movge	r3, r7
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bfc2      	ittt	gt
 80076f8:	1af6      	subgt	r6, r6, r3
 80076fa:	1aff      	subgt	r7, r7, r3
 80076fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007702:	2b00      	cmp	r3, #0
 8007704:	dd17      	ble.n	8007736 <_strtod_l+0x736>
 8007706:	4659      	mov	r1, fp
 8007708:	461a      	mov	r2, r3
 800770a:	4620      	mov	r0, r4
 800770c:	f002 fdb0 	bl	800a270 <__pow5mult>
 8007710:	4683      	mov	fp, r0
 8007712:	2800      	cmp	r0, #0
 8007714:	f43f aeb8 	beq.w	8007488 <_strtod_l+0x488>
 8007718:	4601      	mov	r1, r0
 800771a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800771c:	4620      	mov	r0, r4
 800771e:	f002 fcfd 	bl	800a11c <__multiply>
 8007722:	900b      	str	r0, [sp, #44]	; 0x2c
 8007724:	2800      	cmp	r0, #0
 8007726:	f43f aeaf 	beq.w	8007488 <_strtod_l+0x488>
 800772a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800772c:	4620      	mov	r0, r4
 800772e:	f002 fbdf 	bl	8009ef0 <_Bfree>
 8007732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007734:	9316      	str	r3, [sp, #88]	; 0x58
 8007736:	2e00      	cmp	r6, #0
 8007738:	f300 808c 	bgt.w	8007854 <_strtod_l+0x854>
 800773c:	9b08      	ldr	r3, [sp, #32]
 800773e:	2b00      	cmp	r3, #0
 8007740:	dd08      	ble.n	8007754 <_strtod_l+0x754>
 8007742:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007744:	9905      	ldr	r1, [sp, #20]
 8007746:	4620      	mov	r0, r4
 8007748:	f002 fd92 	bl	800a270 <__pow5mult>
 800774c:	9005      	str	r0, [sp, #20]
 800774e:	2800      	cmp	r0, #0
 8007750:	f43f ae9a 	beq.w	8007488 <_strtod_l+0x488>
 8007754:	2f00      	cmp	r7, #0
 8007756:	dd08      	ble.n	800776a <_strtod_l+0x76a>
 8007758:	9905      	ldr	r1, [sp, #20]
 800775a:	463a      	mov	r2, r7
 800775c:	4620      	mov	r0, r4
 800775e:	f002 fde1 	bl	800a324 <__lshift>
 8007762:	9005      	str	r0, [sp, #20]
 8007764:	2800      	cmp	r0, #0
 8007766:	f43f ae8f 	beq.w	8007488 <_strtod_l+0x488>
 800776a:	f1ba 0f00 	cmp.w	sl, #0
 800776e:	dd08      	ble.n	8007782 <_strtod_l+0x782>
 8007770:	4659      	mov	r1, fp
 8007772:	4652      	mov	r2, sl
 8007774:	4620      	mov	r0, r4
 8007776:	f002 fdd5 	bl	800a324 <__lshift>
 800777a:	4683      	mov	fp, r0
 800777c:	2800      	cmp	r0, #0
 800777e:	f43f ae83 	beq.w	8007488 <_strtod_l+0x488>
 8007782:	9a05      	ldr	r2, [sp, #20]
 8007784:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007786:	4620      	mov	r0, r4
 8007788:	f002 fe54 	bl	800a434 <__mdiff>
 800778c:	4605      	mov	r5, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f ae7a 	beq.w	8007488 <_strtod_l+0x488>
 8007794:	68c3      	ldr	r3, [r0, #12]
 8007796:	930b      	str	r3, [sp, #44]	; 0x2c
 8007798:	2300      	movs	r3, #0
 800779a:	60c3      	str	r3, [r0, #12]
 800779c:	4659      	mov	r1, fp
 800779e:	f002 fe2d 	bl	800a3fc <__mcmp>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	da60      	bge.n	8007868 <_strtod_l+0x868>
 80077a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077a8:	ea53 0308 	orrs.w	r3, r3, r8
 80077ac:	f040 8084 	bne.w	80078b8 <_strtod_l+0x8b8>
 80077b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d17f      	bne.n	80078b8 <_strtod_l+0x8b8>
 80077b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077bc:	0d1b      	lsrs	r3, r3, #20
 80077be:	051b      	lsls	r3, r3, #20
 80077c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077c4:	d978      	bls.n	80078b8 <_strtod_l+0x8b8>
 80077c6:	696b      	ldr	r3, [r5, #20]
 80077c8:	b913      	cbnz	r3, 80077d0 <_strtod_l+0x7d0>
 80077ca:	692b      	ldr	r3, [r5, #16]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	dd73      	ble.n	80078b8 <_strtod_l+0x8b8>
 80077d0:	4629      	mov	r1, r5
 80077d2:	2201      	movs	r2, #1
 80077d4:	4620      	mov	r0, r4
 80077d6:	f002 fda5 	bl	800a324 <__lshift>
 80077da:	4659      	mov	r1, fp
 80077dc:	4605      	mov	r5, r0
 80077de:	f002 fe0d 	bl	800a3fc <__mcmp>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	dd68      	ble.n	80078b8 <_strtod_l+0x8b8>
 80077e6:	9904      	ldr	r1, [sp, #16]
 80077e8:	4a54      	ldr	r2, [pc, #336]	; (800793c <_strtod_l+0x93c>)
 80077ea:	464b      	mov	r3, r9
 80077ec:	2900      	cmp	r1, #0
 80077ee:	f000 8084 	beq.w	80078fa <_strtod_l+0x8fa>
 80077f2:	ea02 0109 	and.w	r1, r2, r9
 80077f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077fa:	dc7e      	bgt.n	80078fa <_strtod_l+0x8fa>
 80077fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007800:	f77f aeb3 	ble.w	800756a <_strtod_l+0x56a>
 8007804:	4b4e      	ldr	r3, [pc, #312]	; (8007940 <_strtod_l+0x940>)
 8007806:	4640      	mov	r0, r8
 8007808:	4649      	mov	r1, r9
 800780a:	2200      	movs	r2, #0
 800780c:	f7f8 fef4 	bl	80005f8 <__aeabi_dmul>
 8007810:	4b4a      	ldr	r3, [pc, #296]	; (800793c <_strtod_l+0x93c>)
 8007812:	400b      	ands	r3, r1
 8007814:	4680      	mov	r8, r0
 8007816:	4689      	mov	r9, r1
 8007818:	2b00      	cmp	r3, #0
 800781a:	f47f ae3f 	bne.w	800749c <_strtod_l+0x49c>
 800781e:	2322      	movs	r3, #34	; 0x22
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	e63b      	b.n	800749c <_strtod_l+0x49c>
 8007824:	f04f 32ff 	mov.w	r2, #4294967295
 8007828:	fa02 f303 	lsl.w	r3, r2, r3
 800782c:	ea03 0808 	and.w	r8, r3, r8
 8007830:	e6e8      	b.n	8007604 <_strtod_l+0x604>
 8007832:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007836:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800783a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800783e:	36e2      	adds	r6, #226	; 0xe2
 8007840:	fa01 f306 	lsl.w	r3, r1, r6
 8007844:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007848:	e748      	b.n	80076dc <_strtod_l+0x6dc>
 800784a:	2100      	movs	r1, #0
 800784c:	2301      	movs	r3, #1
 800784e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007852:	e743      	b.n	80076dc <_strtod_l+0x6dc>
 8007854:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007856:	4632      	mov	r2, r6
 8007858:	4620      	mov	r0, r4
 800785a:	f002 fd63 	bl	800a324 <__lshift>
 800785e:	9016      	str	r0, [sp, #88]	; 0x58
 8007860:	2800      	cmp	r0, #0
 8007862:	f47f af6b 	bne.w	800773c <_strtod_l+0x73c>
 8007866:	e60f      	b.n	8007488 <_strtod_l+0x488>
 8007868:	46ca      	mov	sl, r9
 800786a:	d171      	bne.n	8007950 <_strtod_l+0x950>
 800786c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800786e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007872:	b352      	cbz	r2, 80078ca <_strtod_l+0x8ca>
 8007874:	4a33      	ldr	r2, [pc, #204]	; (8007944 <_strtod_l+0x944>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d12a      	bne.n	80078d0 <_strtod_l+0x8d0>
 800787a:	9b04      	ldr	r3, [sp, #16]
 800787c:	4641      	mov	r1, r8
 800787e:	b1fb      	cbz	r3, 80078c0 <_strtod_l+0x8c0>
 8007880:	4b2e      	ldr	r3, [pc, #184]	; (800793c <_strtod_l+0x93c>)
 8007882:	ea09 0303 	and.w	r3, r9, r3
 8007886:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800788a:	f04f 32ff 	mov.w	r2, #4294967295
 800788e:	d81a      	bhi.n	80078c6 <_strtod_l+0x8c6>
 8007890:	0d1b      	lsrs	r3, r3, #20
 8007892:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	4299      	cmp	r1, r3
 800789c:	d118      	bne.n	80078d0 <_strtod_l+0x8d0>
 800789e:	4b2a      	ldr	r3, [pc, #168]	; (8007948 <_strtod_l+0x948>)
 80078a0:	459a      	cmp	sl, r3
 80078a2:	d102      	bne.n	80078aa <_strtod_l+0x8aa>
 80078a4:	3101      	adds	r1, #1
 80078a6:	f43f adef 	beq.w	8007488 <_strtod_l+0x488>
 80078aa:	4b24      	ldr	r3, [pc, #144]	; (800793c <_strtod_l+0x93c>)
 80078ac:	ea0a 0303 	and.w	r3, sl, r3
 80078b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80078b4:	f04f 0800 	mov.w	r8, #0
 80078b8:	9b04      	ldr	r3, [sp, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1a2      	bne.n	8007804 <_strtod_l+0x804>
 80078be:	e5ed      	b.n	800749c <_strtod_l+0x49c>
 80078c0:	f04f 33ff 	mov.w	r3, #4294967295
 80078c4:	e7e9      	b.n	800789a <_strtod_l+0x89a>
 80078c6:	4613      	mov	r3, r2
 80078c8:	e7e7      	b.n	800789a <_strtod_l+0x89a>
 80078ca:	ea53 0308 	orrs.w	r3, r3, r8
 80078ce:	d08a      	beq.n	80077e6 <_strtod_l+0x7e6>
 80078d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078d2:	b1e3      	cbz	r3, 800790e <_strtod_l+0x90e>
 80078d4:	ea13 0f0a 	tst.w	r3, sl
 80078d8:	d0ee      	beq.n	80078b8 <_strtod_l+0x8b8>
 80078da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078dc:	9a04      	ldr	r2, [sp, #16]
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	b1c3      	cbz	r3, 8007916 <_strtod_l+0x916>
 80078e4:	f7ff fb6f 	bl	8006fc6 <sulp>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	ec51 0b18 	vmov	r0, r1, d8
 80078f0:	f7f8 fccc 	bl	800028c <__adddf3>
 80078f4:	4680      	mov	r8, r0
 80078f6:	4689      	mov	r9, r1
 80078f8:	e7de      	b.n	80078b8 <_strtod_l+0x8b8>
 80078fa:	4013      	ands	r3, r2
 80078fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007900:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007904:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007908:	f04f 38ff 	mov.w	r8, #4294967295
 800790c:	e7d4      	b.n	80078b8 <_strtod_l+0x8b8>
 800790e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007910:	ea13 0f08 	tst.w	r3, r8
 8007914:	e7e0      	b.n	80078d8 <_strtod_l+0x8d8>
 8007916:	f7ff fb56 	bl	8006fc6 <sulp>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	ec51 0b18 	vmov	r0, r1, d8
 8007922:	f7f8 fcb1 	bl	8000288 <__aeabi_dsub>
 8007926:	2200      	movs	r2, #0
 8007928:	2300      	movs	r3, #0
 800792a:	4680      	mov	r8, r0
 800792c:	4689      	mov	r9, r1
 800792e:	f7f9 f8cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007932:	2800      	cmp	r0, #0
 8007934:	d0c0      	beq.n	80078b8 <_strtod_l+0x8b8>
 8007936:	e618      	b.n	800756a <_strtod_l+0x56a>
 8007938:	fffffc02 	.word	0xfffffc02
 800793c:	7ff00000 	.word	0x7ff00000
 8007940:	39500000 	.word	0x39500000
 8007944:	000fffff 	.word	0x000fffff
 8007948:	7fefffff 	.word	0x7fefffff
 800794c:	0800c200 	.word	0x0800c200
 8007950:	4659      	mov	r1, fp
 8007952:	4628      	mov	r0, r5
 8007954:	f002 fec2 	bl	800a6dc <__ratio>
 8007958:	ec57 6b10 	vmov	r6, r7, d0
 800795c:	ee10 0a10 	vmov	r0, s0
 8007960:	2200      	movs	r2, #0
 8007962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007966:	4639      	mov	r1, r7
 8007968:	f7f9 f8c2 	bl	8000af0 <__aeabi_dcmple>
 800796c:	2800      	cmp	r0, #0
 800796e:	d071      	beq.n	8007a54 <_strtod_l+0xa54>
 8007970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d17c      	bne.n	8007a70 <_strtod_l+0xa70>
 8007976:	f1b8 0f00 	cmp.w	r8, #0
 800797a:	d15a      	bne.n	8007a32 <_strtod_l+0xa32>
 800797c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007980:	2b00      	cmp	r3, #0
 8007982:	d15d      	bne.n	8007a40 <_strtod_l+0xa40>
 8007984:	4b90      	ldr	r3, [pc, #576]	; (8007bc8 <_strtod_l+0xbc8>)
 8007986:	2200      	movs	r2, #0
 8007988:	4630      	mov	r0, r6
 800798a:	4639      	mov	r1, r7
 800798c:	f7f9 f8a6 	bl	8000adc <__aeabi_dcmplt>
 8007990:	2800      	cmp	r0, #0
 8007992:	d15c      	bne.n	8007a4e <_strtod_l+0xa4e>
 8007994:	4630      	mov	r0, r6
 8007996:	4639      	mov	r1, r7
 8007998:	4b8c      	ldr	r3, [pc, #560]	; (8007bcc <_strtod_l+0xbcc>)
 800799a:	2200      	movs	r2, #0
 800799c:	f7f8 fe2c 	bl	80005f8 <__aeabi_dmul>
 80079a0:	4606      	mov	r6, r0
 80079a2:	460f      	mov	r7, r1
 80079a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80079a8:	9606      	str	r6, [sp, #24]
 80079aa:	9307      	str	r3, [sp, #28]
 80079ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80079b4:	4b86      	ldr	r3, [pc, #536]	; (8007bd0 <_strtod_l+0xbd0>)
 80079b6:	ea0a 0303 	and.w	r3, sl, r3
 80079ba:	930d      	str	r3, [sp, #52]	; 0x34
 80079bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079be:	4b85      	ldr	r3, [pc, #532]	; (8007bd4 <_strtod_l+0xbd4>)
 80079c0:	429a      	cmp	r2, r3
 80079c2:	f040 8090 	bne.w	8007ae6 <_strtod_l+0xae6>
 80079c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80079ca:	ec49 8b10 	vmov	d0, r8, r9
 80079ce:	f002 fdbb 	bl	800a548 <__ulp>
 80079d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079d6:	ec51 0b10 	vmov	r0, r1, d0
 80079da:	f7f8 fe0d 	bl	80005f8 <__aeabi_dmul>
 80079de:	4642      	mov	r2, r8
 80079e0:	464b      	mov	r3, r9
 80079e2:	f7f8 fc53 	bl	800028c <__adddf3>
 80079e6:	460b      	mov	r3, r1
 80079e8:	4979      	ldr	r1, [pc, #484]	; (8007bd0 <_strtod_l+0xbd0>)
 80079ea:	4a7b      	ldr	r2, [pc, #492]	; (8007bd8 <_strtod_l+0xbd8>)
 80079ec:	4019      	ands	r1, r3
 80079ee:	4291      	cmp	r1, r2
 80079f0:	4680      	mov	r8, r0
 80079f2:	d944      	bls.n	8007a7e <_strtod_l+0xa7e>
 80079f4:	ee18 2a90 	vmov	r2, s17
 80079f8:	4b78      	ldr	r3, [pc, #480]	; (8007bdc <_strtod_l+0xbdc>)
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d104      	bne.n	8007a08 <_strtod_l+0xa08>
 80079fe:	ee18 3a10 	vmov	r3, s16
 8007a02:	3301      	adds	r3, #1
 8007a04:	f43f ad40 	beq.w	8007488 <_strtod_l+0x488>
 8007a08:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007bdc <_strtod_l+0xbdc>
 8007a0c:	f04f 38ff 	mov.w	r8, #4294967295
 8007a10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007a12:	4620      	mov	r0, r4
 8007a14:	f002 fa6c 	bl	8009ef0 <_Bfree>
 8007a18:	9905      	ldr	r1, [sp, #20]
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f002 fa68 	bl	8009ef0 <_Bfree>
 8007a20:	4659      	mov	r1, fp
 8007a22:	4620      	mov	r0, r4
 8007a24:	f002 fa64 	bl	8009ef0 <_Bfree>
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f002 fa60 	bl	8009ef0 <_Bfree>
 8007a30:	e609      	b.n	8007646 <_strtod_l+0x646>
 8007a32:	f1b8 0f01 	cmp.w	r8, #1
 8007a36:	d103      	bne.n	8007a40 <_strtod_l+0xa40>
 8007a38:	f1b9 0f00 	cmp.w	r9, #0
 8007a3c:	f43f ad95 	beq.w	800756a <_strtod_l+0x56a>
 8007a40:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007b98 <_strtod_l+0xb98>
 8007a44:	4f60      	ldr	r7, [pc, #384]	; (8007bc8 <_strtod_l+0xbc8>)
 8007a46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a4a:	2600      	movs	r6, #0
 8007a4c:	e7ae      	b.n	80079ac <_strtod_l+0x9ac>
 8007a4e:	4f5f      	ldr	r7, [pc, #380]	; (8007bcc <_strtod_l+0xbcc>)
 8007a50:	2600      	movs	r6, #0
 8007a52:	e7a7      	b.n	80079a4 <_strtod_l+0x9a4>
 8007a54:	4b5d      	ldr	r3, [pc, #372]	; (8007bcc <_strtod_l+0xbcc>)
 8007a56:	4630      	mov	r0, r6
 8007a58:	4639      	mov	r1, r7
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f7f8 fdcc 	bl	80005f8 <__aeabi_dmul>
 8007a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a62:	4606      	mov	r6, r0
 8007a64:	460f      	mov	r7, r1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d09c      	beq.n	80079a4 <_strtod_l+0x9a4>
 8007a6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007a6e:	e79d      	b.n	80079ac <_strtod_l+0x9ac>
 8007a70:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007ba0 <_strtod_l+0xba0>
 8007a74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a78:	ec57 6b17 	vmov	r6, r7, d7
 8007a7c:	e796      	b.n	80079ac <_strtod_l+0x9ac>
 8007a7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007a82:	9b04      	ldr	r3, [sp, #16]
 8007a84:	46ca      	mov	sl, r9
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1c2      	bne.n	8007a10 <_strtod_l+0xa10>
 8007a8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a90:	0d1b      	lsrs	r3, r3, #20
 8007a92:	051b      	lsls	r3, r3, #20
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d1bb      	bne.n	8007a10 <_strtod_l+0xa10>
 8007a98:	4630      	mov	r0, r6
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	f7f9 f90c 	bl	8000cb8 <__aeabi_d2lz>
 8007aa0:	f7f8 fd7c 	bl	800059c <__aeabi_l2d>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	4639      	mov	r1, r7
 8007aac:	f7f8 fbec 	bl	8000288 <__aeabi_dsub>
 8007ab0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ab2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ab6:	ea43 0308 	orr.w	r3, r3, r8
 8007aba:	4313      	orrs	r3, r2
 8007abc:	4606      	mov	r6, r0
 8007abe:	460f      	mov	r7, r1
 8007ac0:	d054      	beq.n	8007b6c <_strtod_l+0xb6c>
 8007ac2:	a339      	add	r3, pc, #228	; (adr r3, 8007ba8 <_strtod_l+0xba8>)
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f7f9 f808 	bl	8000adc <__aeabi_dcmplt>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f47f ace5 	bne.w	800749c <_strtod_l+0x49c>
 8007ad2:	a337      	add	r3, pc, #220	; (adr r3, 8007bb0 <_strtod_l+0xbb0>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f9 f81c 	bl	8000b18 <__aeabi_dcmpgt>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d095      	beq.n	8007a10 <_strtod_l+0xa10>
 8007ae4:	e4da      	b.n	800749c <_strtod_l+0x49c>
 8007ae6:	9b04      	ldr	r3, [sp, #16]
 8007ae8:	b333      	cbz	r3, 8007b38 <_strtod_l+0xb38>
 8007aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007af0:	d822      	bhi.n	8007b38 <_strtod_l+0xb38>
 8007af2:	a331      	add	r3, pc, #196	; (adr r3, 8007bb8 <_strtod_l+0xbb8>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	4630      	mov	r0, r6
 8007afa:	4639      	mov	r1, r7
 8007afc:	f7f8 fff8 	bl	8000af0 <__aeabi_dcmple>
 8007b00:	b1a0      	cbz	r0, 8007b2c <_strtod_l+0xb2c>
 8007b02:	4639      	mov	r1, r7
 8007b04:	4630      	mov	r0, r6
 8007b06:	f7f9 f84f 	bl	8000ba8 <__aeabi_d2uiz>
 8007b0a:	2801      	cmp	r0, #1
 8007b0c:	bf38      	it	cc
 8007b0e:	2001      	movcc	r0, #1
 8007b10:	f7f8 fcf8 	bl	8000504 <__aeabi_ui2d>
 8007b14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b16:	4606      	mov	r6, r0
 8007b18:	460f      	mov	r7, r1
 8007b1a:	bb23      	cbnz	r3, 8007b66 <_strtod_l+0xb66>
 8007b1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b20:	9010      	str	r0, [sp, #64]	; 0x40
 8007b22:	9311      	str	r3, [sp, #68]	; 0x44
 8007b24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b3c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b40:	eef0 0a68 	vmov.f32	s1, s17
 8007b44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007b48:	f002 fcfe 	bl	800a548 <__ulp>
 8007b4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b50:	ec53 2b10 	vmov	r2, r3, d0
 8007b54:	f7f8 fd50 	bl	80005f8 <__aeabi_dmul>
 8007b58:	ec53 2b18 	vmov	r2, r3, d8
 8007b5c:	f7f8 fb96 	bl	800028c <__adddf3>
 8007b60:	4680      	mov	r8, r0
 8007b62:	4689      	mov	r9, r1
 8007b64:	e78d      	b.n	8007a82 <_strtod_l+0xa82>
 8007b66:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007b6a:	e7db      	b.n	8007b24 <_strtod_l+0xb24>
 8007b6c:	a314      	add	r3, pc, #80	; (adr r3, 8007bc0 <_strtod_l+0xbc0>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8007b76:	e7b3      	b.n	8007ae0 <_strtod_l+0xae0>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	f7ff ba7c 	b.w	800707e <_strtod_l+0x7e>
 8007b86:	2a65      	cmp	r2, #101	; 0x65
 8007b88:	f43f ab75 	beq.w	8007276 <_strtod_l+0x276>
 8007b8c:	2a45      	cmp	r2, #69	; 0x45
 8007b8e:	f43f ab72 	beq.w	8007276 <_strtod_l+0x276>
 8007b92:	2301      	movs	r3, #1
 8007b94:	f7ff bbaa 	b.w	80072ec <_strtod_l+0x2ec>
 8007b98:	00000000 	.word	0x00000000
 8007b9c:	bff00000 	.word	0xbff00000
 8007ba0:	00000000 	.word	0x00000000
 8007ba4:	3ff00000 	.word	0x3ff00000
 8007ba8:	94a03595 	.word	0x94a03595
 8007bac:	3fdfffff 	.word	0x3fdfffff
 8007bb0:	35afe535 	.word	0x35afe535
 8007bb4:	3fe00000 	.word	0x3fe00000
 8007bb8:	ffc00000 	.word	0xffc00000
 8007bbc:	41dfffff 	.word	0x41dfffff
 8007bc0:	94a03595 	.word	0x94a03595
 8007bc4:	3fcfffff 	.word	0x3fcfffff
 8007bc8:	3ff00000 	.word	0x3ff00000
 8007bcc:	3fe00000 	.word	0x3fe00000
 8007bd0:	7ff00000 	.word	0x7ff00000
 8007bd4:	7fe00000 	.word	0x7fe00000
 8007bd8:	7c9fffff 	.word	0x7c9fffff
 8007bdc:	7fefffff 	.word	0x7fefffff

08007be0 <strtod>:
 8007be0:	460a      	mov	r2, r1
 8007be2:	4601      	mov	r1, r0
 8007be4:	4802      	ldr	r0, [pc, #8]	; (8007bf0 <strtod+0x10>)
 8007be6:	4b03      	ldr	r3, [pc, #12]	; (8007bf4 <strtod+0x14>)
 8007be8:	6800      	ldr	r0, [r0, #0]
 8007bea:	f7ff ba09 	b.w	8007000 <_strtod_l>
 8007bee:	bf00      	nop
 8007bf0:	200001d0 	.word	0x200001d0
 8007bf4:	20000018 	.word	0x20000018

08007bf8 <__cvt>:
 8007bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bfc:	ec55 4b10 	vmov	r4, r5, d0
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	460e      	mov	r6, r1
 8007c04:	4619      	mov	r1, r3
 8007c06:	462b      	mov	r3, r5
 8007c08:	bfbb      	ittet	lt
 8007c0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c0e:	461d      	movlt	r5, r3
 8007c10:	2300      	movge	r3, #0
 8007c12:	232d      	movlt	r3, #45	; 0x2d
 8007c14:	700b      	strb	r3, [r1, #0]
 8007c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c1c:	4691      	mov	r9, r2
 8007c1e:	f023 0820 	bic.w	r8, r3, #32
 8007c22:	bfbc      	itt	lt
 8007c24:	4622      	movlt	r2, r4
 8007c26:	4614      	movlt	r4, r2
 8007c28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c2c:	d005      	beq.n	8007c3a <__cvt+0x42>
 8007c2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c32:	d100      	bne.n	8007c36 <__cvt+0x3e>
 8007c34:	3601      	adds	r6, #1
 8007c36:	2102      	movs	r1, #2
 8007c38:	e000      	b.n	8007c3c <__cvt+0x44>
 8007c3a:	2103      	movs	r1, #3
 8007c3c:	ab03      	add	r3, sp, #12
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	ab02      	add	r3, sp, #8
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	ec45 4b10 	vmov	d0, r4, r5
 8007c48:	4653      	mov	r3, sl
 8007c4a:	4632      	mov	r2, r6
 8007c4c:	f000 feb4 	bl	80089b8 <_dtoa_r>
 8007c50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c54:	4607      	mov	r7, r0
 8007c56:	d102      	bne.n	8007c5e <__cvt+0x66>
 8007c58:	f019 0f01 	tst.w	r9, #1
 8007c5c:	d022      	beq.n	8007ca4 <__cvt+0xac>
 8007c5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c62:	eb07 0906 	add.w	r9, r7, r6
 8007c66:	d110      	bne.n	8007c8a <__cvt+0x92>
 8007c68:	783b      	ldrb	r3, [r7, #0]
 8007c6a:	2b30      	cmp	r3, #48	; 0x30
 8007c6c:	d10a      	bne.n	8007c84 <__cvt+0x8c>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2300      	movs	r3, #0
 8007c72:	4620      	mov	r0, r4
 8007c74:	4629      	mov	r1, r5
 8007c76:	f7f8 ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c7a:	b918      	cbnz	r0, 8007c84 <__cvt+0x8c>
 8007c7c:	f1c6 0601 	rsb	r6, r6, #1
 8007c80:	f8ca 6000 	str.w	r6, [sl]
 8007c84:	f8da 3000 	ldr.w	r3, [sl]
 8007c88:	4499      	add	r9, r3
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7f8 ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c96:	b108      	cbz	r0, 8007c9c <__cvt+0xa4>
 8007c98:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c9c:	2230      	movs	r2, #48	; 0x30
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	454b      	cmp	r3, r9
 8007ca2:	d307      	bcc.n	8007cb4 <__cvt+0xbc>
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ca8:	1bdb      	subs	r3, r3, r7
 8007caa:	4638      	mov	r0, r7
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	b004      	add	sp, #16
 8007cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb4:	1c59      	adds	r1, r3, #1
 8007cb6:	9103      	str	r1, [sp, #12]
 8007cb8:	701a      	strb	r2, [r3, #0]
 8007cba:	e7f0      	b.n	8007c9e <__cvt+0xa6>

08007cbc <__exponent>:
 8007cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	bfb8      	it	lt
 8007cc4:	4249      	neglt	r1, r1
 8007cc6:	f803 2b02 	strb.w	r2, [r3], #2
 8007cca:	bfb4      	ite	lt
 8007ccc:	222d      	movlt	r2, #45	; 0x2d
 8007cce:	222b      	movge	r2, #43	; 0x2b
 8007cd0:	2909      	cmp	r1, #9
 8007cd2:	7042      	strb	r2, [r0, #1]
 8007cd4:	dd2a      	ble.n	8007d2c <__exponent+0x70>
 8007cd6:	f10d 0207 	add.w	r2, sp, #7
 8007cda:	4617      	mov	r7, r2
 8007cdc:	260a      	movs	r6, #10
 8007cde:	4694      	mov	ip, r2
 8007ce0:	fb91 f5f6 	sdiv	r5, r1, r6
 8007ce4:	fb06 1415 	mls	r4, r6, r5, r1
 8007ce8:	3430      	adds	r4, #48	; 0x30
 8007cea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007cee:	460c      	mov	r4, r1
 8007cf0:	2c63      	cmp	r4, #99	; 0x63
 8007cf2:	f102 32ff 	add.w	r2, r2, #4294967295
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	dcf1      	bgt.n	8007cde <__exponent+0x22>
 8007cfa:	3130      	adds	r1, #48	; 0x30
 8007cfc:	f1ac 0402 	sub.w	r4, ip, #2
 8007d00:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d04:	1c41      	adds	r1, r0, #1
 8007d06:	4622      	mov	r2, r4
 8007d08:	42ba      	cmp	r2, r7
 8007d0a:	d30a      	bcc.n	8007d22 <__exponent+0x66>
 8007d0c:	f10d 0209 	add.w	r2, sp, #9
 8007d10:	eba2 020c 	sub.w	r2, r2, ip
 8007d14:	42bc      	cmp	r4, r7
 8007d16:	bf88      	it	hi
 8007d18:	2200      	movhi	r2, #0
 8007d1a:	4413      	add	r3, r2
 8007d1c:	1a18      	subs	r0, r3, r0
 8007d1e:	b003      	add	sp, #12
 8007d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d22:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d26:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d2a:	e7ed      	b.n	8007d08 <__exponent+0x4c>
 8007d2c:	2330      	movs	r3, #48	; 0x30
 8007d2e:	3130      	adds	r1, #48	; 0x30
 8007d30:	7083      	strb	r3, [r0, #2]
 8007d32:	70c1      	strb	r1, [r0, #3]
 8007d34:	1d03      	adds	r3, r0, #4
 8007d36:	e7f1      	b.n	8007d1c <__exponent+0x60>

08007d38 <_printf_float>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	ed2d 8b02 	vpush	{d8}
 8007d40:	b08d      	sub	sp, #52	; 0x34
 8007d42:	460c      	mov	r4, r1
 8007d44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d48:	4616      	mov	r6, r2
 8007d4a:	461f      	mov	r7, r3
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	f000 fd1b 	bl	8008788 <_localeconv_r>
 8007d52:	f8d0 a000 	ldr.w	sl, [r0]
 8007d56:	4650      	mov	r0, sl
 8007d58:	f7f8 fa8a 	bl	8000270 <strlen>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	9305      	str	r3, [sp, #20]
 8007d64:	f8d8 3000 	ldr.w	r3, [r8]
 8007d68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d6c:	3307      	adds	r3, #7
 8007d6e:	f023 0307 	bic.w	r3, r3, #7
 8007d72:	f103 0208 	add.w	r2, r3, #8
 8007d76:	f8c8 2000 	str.w	r2, [r8]
 8007d7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d82:	9307      	str	r3, [sp, #28]
 8007d84:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d88:	ee08 0a10 	vmov	s16, r0
 8007d8c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007d90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d94:	4b9e      	ldr	r3, [pc, #632]	; (8008010 <_printf_float+0x2d8>)
 8007d96:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9a:	f7f8 fec7 	bl	8000b2c <__aeabi_dcmpun>
 8007d9e:	bb88      	cbnz	r0, 8007e04 <_printf_float+0xcc>
 8007da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007da4:	4b9a      	ldr	r3, [pc, #616]	; (8008010 <_printf_float+0x2d8>)
 8007da6:	f04f 32ff 	mov.w	r2, #4294967295
 8007daa:	f7f8 fea1 	bl	8000af0 <__aeabi_dcmple>
 8007dae:	bb48      	cbnz	r0, 8007e04 <_printf_float+0xcc>
 8007db0:	2200      	movs	r2, #0
 8007db2:	2300      	movs	r3, #0
 8007db4:	4640      	mov	r0, r8
 8007db6:	4649      	mov	r1, r9
 8007db8:	f7f8 fe90 	bl	8000adc <__aeabi_dcmplt>
 8007dbc:	b110      	cbz	r0, 8007dc4 <_printf_float+0x8c>
 8007dbe:	232d      	movs	r3, #45	; 0x2d
 8007dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dc4:	4a93      	ldr	r2, [pc, #588]	; (8008014 <_printf_float+0x2dc>)
 8007dc6:	4b94      	ldr	r3, [pc, #592]	; (8008018 <_printf_float+0x2e0>)
 8007dc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007dcc:	bf94      	ite	ls
 8007dce:	4690      	movls	r8, r2
 8007dd0:	4698      	movhi	r8, r3
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	6123      	str	r3, [r4, #16]
 8007dd6:	9b05      	ldr	r3, [sp, #20]
 8007dd8:	f023 0304 	bic.w	r3, r3, #4
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	f04f 0900 	mov.w	r9, #0
 8007de2:	9700      	str	r7, [sp, #0]
 8007de4:	4633      	mov	r3, r6
 8007de6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007de8:	4621      	mov	r1, r4
 8007dea:	4628      	mov	r0, r5
 8007dec:	f000 f9da 	bl	80081a4 <_printf_common>
 8007df0:	3001      	adds	r0, #1
 8007df2:	f040 8090 	bne.w	8007f16 <_printf_float+0x1de>
 8007df6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfa:	b00d      	add	sp, #52	; 0x34
 8007dfc:	ecbd 8b02 	vpop	{d8}
 8007e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e04:	4642      	mov	r2, r8
 8007e06:	464b      	mov	r3, r9
 8007e08:	4640      	mov	r0, r8
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	f7f8 fe8e 	bl	8000b2c <__aeabi_dcmpun>
 8007e10:	b140      	cbz	r0, 8007e24 <_printf_float+0xec>
 8007e12:	464b      	mov	r3, r9
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bfbc      	itt	lt
 8007e18:	232d      	movlt	r3, #45	; 0x2d
 8007e1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e1e:	4a7f      	ldr	r2, [pc, #508]	; (800801c <_printf_float+0x2e4>)
 8007e20:	4b7f      	ldr	r3, [pc, #508]	; (8008020 <_printf_float+0x2e8>)
 8007e22:	e7d1      	b.n	8007dc8 <_printf_float+0x90>
 8007e24:	6863      	ldr	r3, [r4, #4]
 8007e26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e2a:	9206      	str	r2, [sp, #24]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	d13f      	bne.n	8007eb0 <_printf_float+0x178>
 8007e30:	2306      	movs	r3, #6
 8007e32:	6063      	str	r3, [r4, #4]
 8007e34:	9b05      	ldr	r3, [sp, #20]
 8007e36:	6861      	ldr	r1, [r4, #4]
 8007e38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9303      	str	r3, [sp, #12]
 8007e40:	ab0a      	add	r3, sp, #40	; 0x28
 8007e42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e46:	ab09      	add	r3, sp, #36	; 0x24
 8007e48:	ec49 8b10 	vmov	d0, r8, r9
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	6022      	str	r2, [r4, #0]
 8007e50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e54:	4628      	mov	r0, r5
 8007e56:	f7ff fecf 	bl	8007bf8 <__cvt>
 8007e5a:	9b06      	ldr	r3, [sp, #24]
 8007e5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e5e:	2b47      	cmp	r3, #71	; 0x47
 8007e60:	4680      	mov	r8, r0
 8007e62:	d108      	bne.n	8007e76 <_printf_float+0x13e>
 8007e64:	1cc8      	adds	r0, r1, #3
 8007e66:	db02      	blt.n	8007e6e <_printf_float+0x136>
 8007e68:	6863      	ldr	r3, [r4, #4]
 8007e6a:	4299      	cmp	r1, r3
 8007e6c:	dd41      	ble.n	8007ef2 <_printf_float+0x1ba>
 8007e6e:	f1ab 0302 	sub.w	r3, fp, #2
 8007e72:	fa5f fb83 	uxtb.w	fp, r3
 8007e76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e7a:	d820      	bhi.n	8007ebe <_printf_float+0x186>
 8007e7c:	3901      	subs	r1, #1
 8007e7e:	465a      	mov	r2, fp
 8007e80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e84:	9109      	str	r1, [sp, #36]	; 0x24
 8007e86:	f7ff ff19 	bl	8007cbc <__exponent>
 8007e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e8c:	1813      	adds	r3, r2, r0
 8007e8e:	2a01      	cmp	r2, #1
 8007e90:	4681      	mov	r9, r0
 8007e92:	6123      	str	r3, [r4, #16]
 8007e94:	dc02      	bgt.n	8007e9c <_printf_float+0x164>
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	07d2      	lsls	r2, r2, #31
 8007e9a:	d501      	bpl.n	8007ea0 <_printf_float+0x168>
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	6123      	str	r3, [r4, #16]
 8007ea0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d09c      	beq.n	8007de2 <_printf_float+0xaa>
 8007ea8:	232d      	movs	r3, #45	; 0x2d
 8007eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eae:	e798      	b.n	8007de2 <_printf_float+0xaa>
 8007eb0:	9a06      	ldr	r2, [sp, #24]
 8007eb2:	2a47      	cmp	r2, #71	; 0x47
 8007eb4:	d1be      	bne.n	8007e34 <_printf_float+0xfc>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1bc      	bne.n	8007e34 <_printf_float+0xfc>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e7b9      	b.n	8007e32 <_printf_float+0xfa>
 8007ebe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ec2:	d118      	bne.n	8007ef6 <_printf_float+0x1be>
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	6863      	ldr	r3, [r4, #4]
 8007ec8:	dd0b      	ble.n	8007ee2 <_printf_float+0x1aa>
 8007eca:	6121      	str	r1, [r4, #16]
 8007ecc:	b913      	cbnz	r3, 8007ed4 <_printf_float+0x19c>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	07d0      	lsls	r0, r2, #31
 8007ed2:	d502      	bpl.n	8007eda <_printf_float+0x1a2>
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	440b      	add	r3, r1
 8007ed8:	6123      	str	r3, [r4, #16]
 8007eda:	65a1      	str	r1, [r4, #88]	; 0x58
 8007edc:	f04f 0900 	mov.w	r9, #0
 8007ee0:	e7de      	b.n	8007ea0 <_printf_float+0x168>
 8007ee2:	b913      	cbnz	r3, 8007eea <_printf_float+0x1b2>
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	07d2      	lsls	r2, r2, #31
 8007ee8:	d501      	bpl.n	8007eee <_printf_float+0x1b6>
 8007eea:	3302      	adds	r3, #2
 8007eec:	e7f4      	b.n	8007ed8 <_printf_float+0x1a0>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e7f2      	b.n	8007ed8 <_printf_float+0x1a0>
 8007ef2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	db05      	blt.n	8007f08 <_printf_float+0x1d0>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	6121      	str	r1, [r4, #16]
 8007f00:	07d8      	lsls	r0, r3, #31
 8007f02:	d5ea      	bpl.n	8007eda <_printf_float+0x1a2>
 8007f04:	1c4b      	adds	r3, r1, #1
 8007f06:	e7e7      	b.n	8007ed8 <_printf_float+0x1a0>
 8007f08:	2900      	cmp	r1, #0
 8007f0a:	bfd4      	ite	le
 8007f0c:	f1c1 0202 	rsble	r2, r1, #2
 8007f10:	2201      	movgt	r2, #1
 8007f12:	4413      	add	r3, r2
 8007f14:	e7e0      	b.n	8007ed8 <_printf_float+0x1a0>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	055a      	lsls	r2, r3, #21
 8007f1a:	d407      	bmi.n	8007f2c <_printf_float+0x1f4>
 8007f1c:	6923      	ldr	r3, [r4, #16]
 8007f1e:	4642      	mov	r2, r8
 8007f20:	4631      	mov	r1, r6
 8007f22:	4628      	mov	r0, r5
 8007f24:	47b8      	blx	r7
 8007f26:	3001      	adds	r0, #1
 8007f28:	d12c      	bne.n	8007f84 <_printf_float+0x24c>
 8007f2a:	e764      	b.n	8007df6 <_printf_float+0xbe>
 8007f2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f30:	f240 80e0 	bls.w	80080f4 <_printf_float+0x3bc>
 8007f34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f7f8 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d034      	beq.n	8007fae <_printf_float+0x276>
 8007f44:	4a37      	ldr	r2, [pc, #220]	; (8008024 <_printf_float+0x2ec>)
 8007f46:	2301      	movs	r3, #1
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	47b8      	blx	r7
 8007f4e:	3001      	adds	r0, #1
 8007f50:	f43f af51 	beq.w	8007df6 <_printf_float+0xbe>
 8007f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	db02      	blt.n	8007f62 <_printf_float+0x22a>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	07d8      	lsls	r0, r3, #31
 8007f60:	d510      	bpl.n	8007f84 <_printf_float+0x24c>
 8007f62:	ee18 3a10 	vmov	r3, s16
 8007f66:	4652      	mov	r2, sl
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f43f af41 	beq.w	8007df6 <_printf_float+0xbe>
 8007f74:	f04f 0800 	mov.w	r8, #0
 8007f78:	f104 091a 	add.w	r9, r4, #26
 8007f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	4543      	cmp	r3, r8
 8007f82:	dc09      	bgt.n	8007f98 <_printf_float+0x260>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	079b      	lsls	r3, r3, #30
 8007f88:	f100 8107 	bmi.w	800819a <_printf_float+0x462>
 8007f8c:	68e0      	ldr	r0, [r4, #12]
 8007f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f90:	4298      	cmp	r0, r3
 8007f92:	bfb8      	it	lt
 8007f94:	4618      	movlt	r0, r3
 8007f96:	e730      	b.n	8007dfa <_printf_float+0xc2>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	464a      	mov	r2, r9
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	f43f af27 	beq.w	8007df6 <_printf_float+0xbe>
 8007fa8:	f108 0801 	add.w	r8, r8, #1
 8007fac:	e7e6      	b.n	8007f7c <_printf_float+0x244>
 8007fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dc39      	bgt.n	8008028 <_printf_float+0x2f0>
 8007fb4:	4a1b      	ldr	r2, [pc, #108]	; (8008024 <_printf_float+0x2ec>)
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4631      	mov	r1, r6
 8007fba:	4628      	mov	r0, r5
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f af19 	beq.w	8007df6 <_printf_float+0xbe>
 8007fc4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	d102      	bne.n	8007fd2 <_printf_float+0x29a>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	07d9      	lsls	r1, r3, #31
 8007fd0:	d5d8      	bpl.n	8007f84 <_printf_float+0x24c>
 8007fd2:	ee18 3a10 	vmov	r3, s16
 8007fd6:	4652      	mov	r2, sl
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f43f af09 	beq.w	8007df6 <_printf_float+0xbe>
 8007fe4:	f04f 0900 	mov.w	r9, #0
 8007fe8:	f104 0a1a 	add.w	sl, r4, #26
 8007fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fee:	425b      	negs	r3, r3
 8007ff0:	454b      	cmp	r3, r9
 8007ff2:	dc01      	bgt.n	8007ff8 <_printf_float+0x2c0>
 8007ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff6:	e792      	b.n	8007f1e <_printf_float+0x1e6>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4652      	mov	r2, sl
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	47b8      	blx	r7
 8008002:	3001      	adds	r0, #1
 8008004:	f43f aef7 	beq.w	8007df6 <_printf_float+0xbe>
 8008008:	f109 0901 	add.w	r9, r9, #1
 800800c:	e7ee      	b.n	8007fec <_printf_float+0x2b4>
 800800e:	bf00      	nop
 8008010:	7fefffff 	.word	0x7fefffff
 8008014:	0800c228 	.word	0x0800c228
 8008018:	0800c22c 	.word	0x0800c22c
 800801c:	0800c230 	.word	0x0800c230
 8008020:	0800c234 	.word	0x0800c234
 8008024:	0800c238 	.word	0x0800c238
 8008028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800802a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800802c:	429a      	cmp	r2, r3
 800802e:	bfa8      	it	ge
 8008030:	461a      	movge	r2, r3
 8008032:	2a00      	cmp	r2, #0
 8008034:	4691      	mov	r9, r2
 8008036:	dc37      	bgt.n	80080a8 <_printf_float+0x370>
 8008038:	f04f 0b00 	mov.w	fp, #0
 800803c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008040:	f104 021a 	add.w	r2, r4, #26
 8008044:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008046:	9305      	str	r3, [sp, #20]
 8008048:	eba3 0309 	sub.w	r3, r3, r9
 800804c:	455b      	cmp	r3, fp
 800804e:	dc33      	bgt.n	80080b8 <_printf_float+0x380>
 8008050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008054:	429a      	cmp	r2, r3
 8008056:	db3b      	blt.n	80080d0 <_printf_float+0x398>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	07da      	lsls	r2, r3, #31
 800805c:	d438      	bmi.n	80080d0 <_printf_float+0x398>
 800805e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008062:	eba2 0903 	sub.w	r9, r2, r3
 8008066:	9b05      	ldr	r3, [sp, #20]
 8008068:	1ad2      	subs	r2, r2, r3
 800806a:	4591      	cmp	r9, r2
 800806c:	bfa8      	it	ge
 800806e:	4691      	movge	r9, r2
 8008070:	f1b9 0f00 	cmp.w	r9, #0
 8008074:	dc35      	bgt.n	80080e2 <_printf_float+0x3aa>
 8008076:	f04f 0800 	mov.w	r8, #0
 800807a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800807e:	f104 0a1a 	add.w	sl, r4, #26
 8008082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008086:	1a9b      	subs	r3, r3, r2
 8008088:	eba3 0309 	sub.w	r3, r3, r9
 800808c:	4543      	cmp	r3, r8
 800808e:	f77f af79 	ble.w	8007f84 <_printf_float+0x24c>
 8008092:	2301      	movs	r3, #1
 8008094:	4652      	mov	r2, sl
 8008096:	4631      	mov	r1, r6
 8008098:	4628      	mov	r0, r5
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	f43f aeaa 	beq.w	8007df6 <_printf_float+0xbe>
 80080a2:	f108 0801 	add.w	r8, r8, #1
 80080a6:	e7ec      	b.n	8008082 <_printf_float+0x34a>
 80080a8:	4613      	mov	r3, r2
 80080aa:	4631      	mov	r1, r6
 80080ac:	4642      	mov	r2, r8
 80080ae:	4628      	mov	r0, r5
 80080b0:	47b8      	blx	r7
 80080b2:	3001      	adds	r0, #1
 80080b4:	d1c0      	bne.n	8008038 <_printf_float+0x300>
 80080b6:	e69e      	b.n	8007df6 <_printf_float+0xbe>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4631      	mov	r1, r6
 80080bc:	4628      	mov	r0, r5
 80080be:	9205      	str	r2, [sp, #20]
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	f43f ae97 	beq.w	8007df6 <_printf_float+0xbe>
 80080c8:	9a05      	ldr	r2, [sp, #20]
 80080ca:	f10b 0b01 	add.w	fp, fp, #1
 80080ce:	e7b9      	b.n	8008044 <_printf_float+0x30c>
 80080d0:	ee18 3a10 	vmov	r3, s16
 80080d4:	4652      	mov	r2, sl
 80080d6:	4631      	mov	r1, r6
 80080d8:	4628      	mov	r0, r5
 80080da:	47b8      	blx	r7
 80080dc:	3001      	adds	r0, #1
 80080de:	d1be      	bne.n	800805e <_printf_float+0x326>
 80080e0:	e689      	b.n	8007df6 <_printf_float+0xbe>
 80080e2:	9a05      	ldr	r2, [sp, #20]
 80080e4:	464b      	mov	r3, r9
 80080e6:	4442      	add	r2, r8
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b8      	blx	r7
 80080ee:	3001      	adds	r0, #1
 80080f0:	d1c1      	bne.n	8008076 <_printf_float+0x33e>
 80080f2:	e680      	b.n	8007df6 <_printf_float+0xbe>
 80080f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080f6:	2a01      	cmp	r2, #1
 80080f8:	dc01      	bgt.n	80080fe <_printf_float+0x3c6>
 80080fa:	07db      	lsls	r3, r3, #31
 80080fc:	d53a      	bpl.n	8008174 <_printf_float+0x43c>
 80080fe:	2301      	movs	r3, #1
 8008100:	4642      	mov	r2, r8
 8008102:	4631      	mov	r1, r6
 8008104:	4628      	mov	r0, r5
 8008106:	47b8      	blx	r7
 8008108:	3001      	adds	r0, #1
 800810a:	f43f ae74 	beq.w	8007df6 <_printf_float+0xbe>
 800810e:	ee18 3a10 	vmov	r3, s16
 8008112:	4652      	mov	r2, sl
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f ae6b 	beq.w	8007df6 <_printf_float+0xbe>
 8008120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008124:	2200      	movs	r2, #0
 8008126:	2300      	movs	r3, #0
 8008128:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800812c:	f7f8 fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008130:	b9d8      	cbnz	r0, 800816a <_printf_float+0x432>
 8008132:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008136:	f108 0201 	add.w	r2, r8, #1
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	d10e      	bne.n	8008162 <_printf_float+0x42a>
 8008144:	e657      	b.n	8007df6 <_printf_float+0xbe>
 8008146:	2301      	movs	r3, #1
 8008148:	4652      	mov	r2, sl
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	f43f ae50 	beq.w	8007df6 <_printf_float+0xbe>
 8008156:	f108 0801 	add.w	r8, r8, #1
 800815a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815c:	3b01      	subs	r3, #1
 800815e:	4543      	cmp	r3, r8
 8008160:	dcf1      	bgt.n	8008146 <_printf_float+0x40e>
 8008162:	464b      	mov	r3, r9
 8008164:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008168:	e6da      	b.n	8007f20 <_printf_float+0x1e8>
 800816a:	f04f 0800 	mov.w	r8, #0
 800816e:	f104 0a1a 	add.w	sl, r4, #26
 8008172:	e7f2      	b.n	800815a <_printf_float+0x422>
 8008174:	2301      	movs	r3, #1
 8008176:	4642      	mov	r2, r8
 8008178:	e7df      	b.n	800813a <_printf_float+0x402>
 800817a:	2301      	movs	r3, #1
 800817c:	464a      	mov	r2, r9
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	f43f ae36 	beq.w	8007df6 <_printf_float+0xbe>
 800818a:	f108 0801 	add.w	r8, r8, #1
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008192:	1a5b      	subs	r3, r3, r1
 8008194:	4543      	cmp	r3, r8
 8008196:	dcf0      	bgt.n	800817a <_printf_float+0x442>
 8008198:	e6f8      	b.n	8007f8c <_printf_float+0x254>
 800819a:	f04f 0800 	mov.w	r8, #0
 800819e:	f104 0919 	add.w	r9, r4, #25
 80081a2:	e7f4      	b.n	800818e <_printf_float+0x456>

080081a4 <_printf_common>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	4616      	mov	r6, r2
 80081aa:	4699      	mov	r9, r3
 80081ac:	688a      	ldr	r2, [r1, #8]
 80081ae:	690b      	ldr	r3, [r1, #16]
 80081b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081b4:	4293      	cmp	r3, r2
 80081b6:	bfb8      	it	lt
 80081b8:	4613      	movlt	r3, r2
 80081ba:	6033      	str	r3, [r6, #0]
 80081bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081c0:	4607      	mov	r7, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	b10a      	cbz	r2, 80081ca <_printf_common+0x26>
 80081c6:	3301      	adds	r3, #1
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	0699      	lsls	r1, r3, #26
 80081ce:	bf42      	ittt	mi
 80081d0:	6833      	ldrmi	r3, [r6, #0]
 80081d2:	3302      	addmi	r3, #2
 80081d4:	6033      	strmi	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	f015 0506 	ands.w	r5, r5, #6
 80081dc:	d106      	bne.n	80081ec <_printf_common+0x48>
 80081de:	f104 0a19 	add.w	sl, r4, #25
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	6832      	ldr	r2, [r6, #0]
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dc26      	bgt.n	800823a <_printf_common+0x96>
 80081ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081f0:	1e13      	subs	r3, r2, #0
 80081f2:	6822      	ldr	r2, [r4, #0]
 80081f4:	bf18      	it	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	0692      	lsls	r2, r2, #26
 80081fa:	d42b      	bmi.n	8008254 <_printf_common+0xb0>
 80081fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008200:	4649      	mov	r1, r9
 8008202:	4638      	mov	r0, r7
 8008204:	47c0      	blx	r8
 8008206:	3001      	adds	r0, #1
 8008208:	d01e      	beq.n	8008248 <_printf_common+0xa4>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	f003 0306 	and.w	r3, r3, #6
 8008212:	2b04      	cmp	r3, #4
 8008214:	bf02      	ittt	eq
 8008216:	68e5      	ldreq	r5, [r4, #12]
 8008218:	6833      	ldreq	r3, [r6, #0]
 800821a:	1aed      	subeq	r5, r5, r3
 800821c:	68a3      	ldr	r3, [r4, #8]
 800821e:	bf0c      	ite	eq
 8008220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008224:	2500      	movne	r5, #0
 8008226:	4293      	cmp	r3, r2
 8008228:	bfc4      	itt	gt
 800822a:	1a9b      	subgt	r3, r3, r2
 800822c:	18ed      	addgt	r5, r5, r3
 800822e:	2600      	movs	r6, #0
 8008230:	341a      	adds	r4, #26
 8008232:	42b5      	cmp	r5, r6
 8008234:	d11a      	bne.n	800826c <_printf_common+0xc8>
 8008236:	2000      	movs	r0, #0
 8008238:	e008      	b.n	800824c <_printf_common+0xa8>
 800823a:	2301      	movs	r3, #1
 800823c:	4652      	mov	r2, sl
 800823e:	4649      	mov	r1, r9
 8008240:	4638      	mov	r0, r7
 8008242:	47c0      	blx	r8
 8008244:	3001      	adds	r0, #1
 8008246:	d103      	bne.n	8008250 <_printf_common+0xac>
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	3501      	adds	r5, #1
 8008252:	e7c6      	b.n	80081e2 <_printf_common+0x3e>
 8008254:	18e1      	adds	r1, r4, r3
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	2030      	movs	r0, #48	; 0x30
 800825a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800825e:	4422      	add	r2, r4
 8008260:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008264:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008268:	3302      	adds	r3, #2
 800826a:	e7c7      	b.n	80081fc <_printf_common+0x58>
 800826c:	2301      	movs	r3, #1
 800826e:	4622      	mov	r2, r4
 8008270:	4649      	mov	r1, r9
 8008272:	4638      	mov	r0, r7
 8008274:	47c0      	blx	r8
 8008276:	3001      	adds	r0, #1
 8008278:	d0e6      	beq.n	8008248 <_printf_common+0xa4>
 800827a:	3601      	adds	r6, #1
 800827c:	e7d9      	b.n	8008232 <_printf_common+0x8e>
	...

08008280 <_printf_i>:
 8008280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	7e0f      	ldrb	r7, [r1, #24]
 8008286:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008288:	2f78      	cmp	r7, #120	; 0x78
 800828a:	4691      	mov	r9, r2
 800828c:	4680      	mov	r8, r0
 800828e:	460c      	mov	r4, r1
 8008290:	469a      	mov	sl, r3
 8008292:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008296:	d807      	bhi.n	80082a8 <_printf_i+0x28>
 8008298:	2f62      	cmp	r7, #98	; 0x62
 800829a:	d80a      	bhi.n	80082b2 <_printf_i+0x32>
 800829c:	2f00      	cmp	r7, #0
 800829e:	f000 80d4 	beq.w	800844a <_printf_i+0x1ca>
 80082a2:	2f58      	cmp	r7, #88	; 0x58
 80082a4:	f000 80c0 	beq.w	8008428 <_printf_i+0x1a8>
 80082a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082b0:	e03a      	b.n	8008328 <_printf_i+0xa8>
 80082b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082b6:	2b15      	cmp	r3, #21
 80082b8:	d8f6      	bhi.n	80082a8 <_printf_i+0x28>
 80082ba:	a101      	add	r1, pc, #4	; (adr r1, 80082c0 <_printf_i+0x40>)
 80082bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082c0:	08008319 	.word	0x08008319
 80082c4:	0800832d 	.word	0x0800832d
 80082c8:	080082a9 	.word	0x080082a9
 80082cc:	080082a9 	.word	0x080082a9
 80082d0:	080082a9 	.word	0x080082a9
 80082d4:	080082a9 	.word	0x080082a9
 80082d8:	0800832d 	.word	0x0800832d
 80082dc:	080082a9 	.word	0x080082a9
 80082e0:	080082a9 	.word	0x080082a9
 80082e4:	080082a9 	.word	0x080082a9
 80082e8:	080082a9 	.word	0x080082a9
 80082ec:	08008431 	.word	0x08008431
 80082f0:	08008359 	.word	0x08008359
 80082f4:	080083eb 	.word	0x080083eb
 80082f8:	080082a9 	.word	0x080082a9
 80082fc:	080082a9 	.word	0x080082a9
 8008300:	08008453 	.word	0x08008453
 8008304:	080082a9 	.word	0x080082a9
 8008308:	08008359 	.word	0x08008359
 800830c:	080082a9 	.word	0x080082a9
 8008310:	080082a9 	.word	0x080082a9
 8008314:	080083f3 	.word	0x080083f3
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	1d1a      	adds	r2, r3, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	602a      	str	r2, [r5, #0]
 8008320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008324:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008328:	2301      	movs	r3, #1
 800832a:	e09f      	b.n	800846c <_printf_i+0x1ec>
 800832c:	6820      	ldr	r0, [r4, #0]
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	0607      	lsls	r7, r0, #24
 8008332:	f103 0104 	add.w	r1, r3, #4
 8008336:	6029      	str	r1, [r5, #0]
 8008338:	d501      	bpl.n	800833e <_printf_i+0xbe>
 800833a:	681e      	ldr	r6, [r3, #0]
 800833c:	e003      	b.n	8008346 <_printf_i+0xc6>
 800833e:	0646      	lsls	r6, r0, #25
 8008340:	d5fb      	bpl.n	800833a <_printf_i+0xba>
 8008342:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008346:	2e00      	cmp	r6, #0
 8008348:	da03      	bge.n	8008352 <_printf_i+0xd2>
 800834a:	232d      	movs	r3, #45	; 0x2d
 800834c:	4276      	negs	r6, r6
 800834e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008352:	485a      	ldr	r0, [pc, #360]	; (80084bc <_printf_i+0x23c>)
 8008354:	230a      	movs	r3, #10
 8008356:	e012      	b.n	800837e <_printf_i+0xfe>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	6820      	ldr	r0, [r4, #0]
 800835c:	1d19      	adds	r1, r3, #4
 800835e:	6029      	str	r1, [r5, #0]
 8008360:	0605      	lsls	r5, r0, #24
 8008362:	d501      	bpl.n	8008368 <_printf_i+0xe8>
 8008364:	681e      	ldr	r6, [r3, #0]
 8008366:	e002      	b.n	800836e <_printf_i+0xee>
 8008368:	0641      	lsls	r1, r0, #25
 800836a:	d5fb      	bpl.n	8008364 <_printf_i+0xe4>
 800836c:	881e      	ldrh	r6, [r3, #0]
 800836e:	4853      	ldr	r0, [pc, #332]	; (80084bc <_printf_i+0x23c>)
 8008370:	2f6f      	cmp	r7, #111	; 0x6f
 8008372:	bf0c      	ite	eq
 8008374:	2308      	moveq	r3, #8
 8008376:	230a      	movne	r3, #10
 8008378:	2100      	movs	r1, #0
 800837a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800837e:	6865      	ldr	r5, [r4, #4]
 8008380:	60a5      	str	r5, [r4, #8]
 8008382:	2d00      	cmp	r5, #0
 8008384:	bfa2      	ittt	ge
 8008386:	6821      	ldrge	r1, [r4, #0]
 8008388:	f021 0104 	bicge.w	r1, r1, #4
 800838c:	6021      	strge	r1, [r4, #0]
 800838e:	b90e      	cbnz	r6, 8008394 <_printf_i+0x114>
 8008390:	2d00      	cmp	r5, #0
 8008392:	d04b      	beq.n	800842c <_printf_i+0x1ac>
 8008394:	4615      	mov	r5, r2
 8008396:	fbb6 f1f3 	udiv	r1, r6, r3
 800839a:	fb03 6711 	mls	r7, r3, r1, r6
 800839e:	5dc7      	ldrb	r7, [r0, r7]
 80083a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083a4:	4637      	mov	r7, r6
 80083a6:	42bb      	cmp	r3, r7
 80083a8:	460e      	mov	r6, r1
 80083aa:	d9f4      	bls.n	8008396 <_printf_i+0x116>
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d10b      	bne.n	80083c8 <_printf_i+0x148>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	07de      	lsls	r6, r3, #31
 80083b4:	d508      	bpl.n	80083c8 <_printf_i+0x148>
 80083b6:	6923      	ldr	r3, [r4, #16]
 80083b8:	6861      	ldr	r1, [r4, #4]
 80083ba:	4299      	cmp	r1, r3
 80083bc:	bfde      	ittt	le
 80083be:	2330      	movle	r3, #48	; 0x30
 80083c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083c8:	1b52      	subs	r2, r2, r5
 80083ca:	6122      	str	r2, [r4, #16]
 80083cc:	f8cd a000 	str.w	sl, [sp]
 80083d0:	464b      	mov	r3, r9
 80083d2:	aa03      	add	r2, sp, #12
 80083d4:	4621      	mov	r1, r4
 80083d6:	4640      	mov	r0, r8
 80083d8:	f7ff fee4 	bl	80081a4 <_printf_common>
 80083dc:	3001      	adds	r0, #1
 80083de:	d14a      	bne.n	8008476 <_printf_i+0x1f6>
 80083e0:	f04f 30ff 	mov.w	r0, #4294967295
 80083e4:	b004      	add	sp, #16
 80083e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	f043 0320 	orr.w	r3, r3, #32
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	4833      	ldr	r0, [pc, #204]	; (80084c0 <_printf_i+0x240>)
 80083f4:	2778      	movs	r7, #120	; 0x78
 80083f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	6829      	ldr	r1, [r5, #0]
 80083fe:	061f      	lsls	r7, r3, #24
 8008400:	f851 6b04 	ldr.w	r6, [r1], #4
 8008404:	d402      	bmi.n	800840c <_printf_i+0x18c>
 8008406:	065f      	lsls	r7, r3, #25
 8008408:	bf48      	it	mi
 800840a:	b2b6      	uxthmi	r6, r6
 800840c:	07df      	lsls	r7, r3, #31
 800840e:	bf48      	it	mi
 8008410:	f043 0320 	orrmi.w	r3, r3, #32
 8008414:	6029      	str	r1, [r5, #0]
 8008416:	bf48      	it	mi
 8008418:	6023      	strmi	r3, [r4, #0]
 800841a:	b91e      	cbnz	r6, 8008424 <_printf_i+0x1a4>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	f023 0320 	bic.w	r3, r3, #32
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	2310      	movs	r3, #16
 8008426:	e7a7      	b.n	8008378 <_printf_i+0xf8>
 8008428:	4824      	ldr	r0, [pc, #144]	; (80084bc <_printf_i+0x23c>)
 800842a:	e7e4      	b.n	80083f6 <_printf_i+0x176>
 800842c:	4615      	mov	r5, r2
 800842e:	e7bd      	b.n	80083ac <_printf_i+0x12c>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	6826      	ldr	r6, [r4, #0]
 8008434:	6961      	ldr	r1, [r4, #20]
 8008436:	1d18      	adds	r0, r3, #4
 8008438:	6028      	str	r0, [r5, #0]
 800843a:	0635      	lsls	r5, r6, #24
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	d501      	bpl.n	8008444 <_printf_i+0x1c4>
 8008440:	6019      	str	r1, [r3, #0]
 8008442:	e002      	b.n	800844a <_printf_i+0x1ca>
 8008444:	0670      	lsls	r0, r6, #25
 8008446:	d5fb      	bpl.n	8008440 <_printf_i+0x1c0>
 8008448:	8019      	strh	r1, [r3, #0]
 800844a:	2300      	movs	r3, #0
 800844c:	6123      	str	r3, [r4, #16]
 800844e:	4615      	mov	r5, r2
 8008450:	e7bc      	b.n	80083cc <_printf_i+0x14c>
 8008452:	682b      	ldr	r3, [r5, #0]
 8008454:	1d1a      	adds	r2, r3, #4
 8008456:	602a      	str	r2, [r5, #0]
 8008458:	681d      	ldr	r5, [r3, #0]
 800845a:	6862      	ldr	r2, [r4, #4]
 800845c:	2100      	movs	r1, #0
 800845e:	4628      	mov	r0, r5
 8008460:	f7f7 feb6 	bl	80001d0 <memchr>
 8008464:	b108      	cbz	r0, 800846a <_printf_i+0x1ea>
 8008466:	1b40      	subs	r0, r0, r5
 8008468:	6060      	str	r0, [r4, #4]
 800846a:	6863      	ldr	r3, [r4, #4]
 800846c:	6123      	str	r3, [r4, #16]
 800846e:	2300      	movs	r3, #0
 8008470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008474:	e7aa      	b.n	80083cc <_printf_i+0x14c>
 8008476:	6923      	ldr	r3, [r4, #16]
 8008478:	462a      	mov	r2, r5
 800847a:	4649      	mov	r1, r9
 800847c:	4640      	mov	r0, r8
 800847e:	47d0      	blx	sl
 8008480:	3001      	adds	r0, #1
 8008482:	d0ad      	beq.n	80083e0 <_printf_i+0x160>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	079b      	lsls	r3, r3, #30
 8008488:	d413      	bmi.n	80084b2 <_printf_i+0x232>
 800848a:	68e0      	ldr	r0, [r4, #12]
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	4298      	cmp	r0, r3
 8008490:	bfb8      	it	lt
 8008492:	4618      	movlt	r0, r3
 8008494:	e7a6      	b.n	80083e4 <_printf_i+0x164>
 8008496:	2301      	movs	r3, #1
 8008498:	4632      	mov	r2, r6
 800849a:	4649      	mov	r1, r9
 800849c:	4640      	mov	r0, r8
 800849e:	47d0      	blx	sl
 80084a0:	3001      	adds	r0, #1
 80084a2:	d09d      	beq.n	80083e0 <_printf_i+0x160>
 80084a4:	3501      	adds	r5, #1
 80084a6:	68e3      	ldr	r3, [r4, #12]
 80084a8:	9903      	ldr	r1, [sp, #12]
 80084aa:	1a5b      	subs	r3, r3, r1
 80084ac:	42ab      	cmp	r3, r5
 80084ae:	dcf2      	bgt.n	8008496 <_printf_i+0x216>
 80084b0:	e7eb      	b.n	800848a <_printf_i+0x20a>
 80084b2:	2500      	movs	r5, #0
 80084b4:	f104 0619 	add.w	r6, r4, #25
 80084b8:	e7f5      	b.n	80084a6 <_printf_i+0x226>
 80084ba:	bf00      	nop
 80084bc:	0800c23a 	.word	0x0800c23a
 80084c0:	0800c24b 	.word	0x0800c24b

080084c4 <std>:
 80084c4:	2300      	movs	r3, #0
 80084c6:	b510      	push	{r4, lr}
 80084c8:	4604      	mov	r4, r0
 80084ca:	e9c0 3300 	strd	r3, r3, [r0]
 80084ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084d2:	6083      	str	r3, [r0, #8]
 80084d4:	8181      	strh	r1, [r0, #12]
 80084d6:	6643      	str	r3, [r0, #100]	; 0x64
 80084d8:	81c2      	strh	r2, [r0, #14]
 80084da:	6183      	str	r3, [r0, #24]
 80084dc:	4619      	mov	r1, r3
 80084de:	2208      	movs	r2, #8
 80084e0:	305c      	adds	r0, #92	; 0x5c
 80084e2:	f000 f914 	bl	800870e <memset>
 80084e6:	4b0d      	ldr	r3, [pc, #52]	; (800851c <std+0x58>)
 80084e8:	6263      	str	r3, [r4, #36]	; 0x24
 80084ea:	4b0d      	ldr	r3, [pc, #52]	; (8008520 <std+0x5c>)
 80084ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80084ee:	4b0d      	ldr	r3, [pc, #52]	; (8008524 <std+0x60>)
 80084f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084f2:	4b0d      	ldr	r3, [pc, #52]	; (8008528 <std+0x64>)
 80084f4:	6323      	str	r3, [r4, #48]	; 0x30
 80084f6:	4b0d      	ldr	r3, [pc, #52]	; (800852c <std+0x68>)
 80084f8:	6224      	str	r4, [r4, #32]
 80084fa:	429c      	cmp	r4, r3
 80084fc:	d006      	beq.n	800850c <std+0x48>
 80084fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008502:	4294      	cmp	r4, r2
 8008504:	d002      	beq.n	800850c <std+0x48>
 8008506:	33d0      	adds	r3, #208	; 0xd0
 8008508:	429c      	cmp	r4, r3
 800850a:	d105      	bne.n	8008518 <std+0x54>
 800850c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008514:	f000 b9ac 	b.w	8008870 <__retarget_lock_init_recursive>
 8008518:	bd10      	pop	{r4, pc}
 800851a:	bf00      	nop
 800851c:	08008689 	.word	0x08008689
 8008520:	080086ab 	.word	0x080086ab
 8008524:	080086e3 	.word	0x080086e3
 8008528:	08008707 	.word	0x08008707
 800852c:	20000444 	.word	0x20000444

08008530 <stdio_exit_handler>:
 8008530:	4a02      	ldr	r2, [pc, #8]	; (800853c <stdio_exit_handler+0xc>)
 8008532:	4903      	ldr	r1, [pc, #12]	; (8008540 <stdio_exit_handler+0x10>)
 8008534:	4803      	ldr	r0, [pc, #12]	; (8008544 <stdio_exit_handler+0x14>)
 8008536:	f000 b869 	b.w	800860c <_fwalk_sglue>
 800853a:	bf00      	nop
 800853c:	2000000c 	.word	0x2000000c
 8008540:	0800aba1 	.word	0x0800aba1
 8008544:	20000184 	.word	0x20000184

08008548 <cleanup_stdio>:
 8008548:	6841      	ldr	r1, [r0, #4]
 800854a:	4b0c      	ldr	r3, [pc, #48]	; (800857c <cleanup_stdio+0x34>)
 800854c:	4299      	cmp	r1, r3
 800854e:	b510      	push	{r4, lr}
 8008550:	4604      	mov	r4, r0
 8008552:	d001      	beq.n	8008558 <cleanup_stdio+0x10>
 8008554:	f002 fb24 	bl	800aba0 <_fflush_r>
 8008558:	68a1      	ldr	r1, [r4, #8]
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <cleanup_stdio+0x38>)
 800855c:	4299      	cmp	r1, r3
 800855e:	d002      	beq.n	8008566 <cleanup_stdio+0x1e>
 8008560:	4620      	mov	r0, r4
 8008562:	f002 fb1d 	bl	800aba0 <_fflush_r>
 8008566:	68e1      	ldr	r1, [r4, #12]
 8008568:	4b06      	ldr	r3, [pc, #24]	; (8008584 <cleanup_stdio+0x3c>)
 800856a:	4299      	cmp	r1, r3
 800856c:	d004      	beq.n	8008578 <cleanup_stdio+0x30>
 800856e:	4620      	mov	r0, r4
 8008570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008574:	f002 bb14 	b.w	800aba0 <_fflush_r>
 8008578:	bd10      	pop	{r4, pc}
 800857a:	bf00      	nop
 800857c:	20000444 	.word	0x20000444
 8008580:	200004ac 	.word	0x200004ac
 8008584:	20000514 	.word	0x20000514

08008588 <global_stdio_init.part.0>:
 8008588:	b510      	push	{r4, lr}
 800858a:	4b0b      	ldr	r3, [pc, #44]	; (80085b8 <global_stdio_init.part.0+0x30>)
 800858c:	4c0b      	ldr	r4, [pc, #44]	; (80085bc <global_stdio_init.part.0+0x34>)
 800858e:	4a0c      	ldr	r2, [pc, #48]	; (80085c0 <global_stdio_init.part.0+0x38>)
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	4620      	mov	r0, r4
 8008594:	2200      	movs	r2, #0
 8008596:	2104      	movs	r1, #4
 8008598:	f7ff ff94 	bl	80084c4 <std>
 800859c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80085a0:	2201      	movs	r2, #1
 80085a2:	2109      	movs	r1, #9
 80085a4:	f7ff ff8e 	bl	80084c4 <std>
 80085a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80085ac:	2202      	movs	r2, #2
 80085ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b2:	2112      	movs	r1, #18
 80085b4:	f7ff bf86 	b.w	80084c4 <std>
 80085b8:	2000057c 	.word	0x2000057c
 80085bc:	20000444 	.word	0x20000444
 80085c0:	08008531 	.word	0x08008531

080085c4 <__sfp_lock_acquire>:
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <__sfp_lock_acquire+0x8>)
 80085c6:	f000 b954 	b.w	8008872 <__retarget_lock_acquire_recursive>
 80085ca:	bf00      	nop
 80085cc:	20000585 	.word	0x20000585

080085d0 <__sfp_lock_release>:
 80085d0:	4801      	ldr	r0, [pc, #4]	; (80085d8 <__sfp_lock_release+0x8>)
 80085d2:	f000 b94f 	b.w	8008874 <__retarget_lock_release_recursive>
 80085d6:	bf00      	nop
 80085d8:	20000585 	.word	0x20000585

080085dc <__sinit>:
 80085dc:	b510      	push	{r4, lr}
 80085de:	4604      	mov	r4, r0
 80085e0:	f7ff fff0 	bl	80085c4 <__sfp_lock_acquire>
 80085e4:	6a23      	ldr	r3, [r4, #32]
 80085e6:	b11b      	cbz	r3, 80085f0 <__sinit+0x14>
 80085e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ec:	f7ff bff0 	b.w	80085d0 <__sfp_lock_release>
 80085f0:	4b04      	ldr	r3, [pc, #16]	; (8008604 <__sinit+0x28>)
 80085f2:	6223      	str	r3, [r4, #32]
 80085f4:	4b04      	ldr	r3, [pc, #16]	; (8008608 <__sinit+0x2c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f5      	bne.n	80085e8 <__sinit+0xc>
 80085fc:	f7ff ffc4 	bl	8008588 <global_stdio_init.part.0>
 8008600:	e7f2      	b.n	80085e8 <__sinit+0xc>
 8008602:	bf00      	nop
 8008604:	08008549 	.word	0x08008549
 8008608:	2000057c 	.word	0x2000057c

0800860c <_fwalk_sglue>:
 800860c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008610:	4607      	mov	r7, r0
 8008612:	4688      	mov	r8, r1
 8008614:	4614      	mov	r4, r2
 8008616:	2600      	movs	r6, #0
 8008618:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800861c:	f1b9 0901 	subs.w	r9, r9, #1
 8008620:	d505      	bpl.n	800862e <_fwalk_sglue+0x22>
 8008622:	6824      	ldr	r4, [r4, #0]
 8008624:	2c00      	cmp	r4, #0
 8008626:	d1f7      	bne.n	8008618 <_fwalk_sglue+0xc>
 8008628:	4630      	mov	r0, r6
 800862a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d907      	bls.n	8008644 <_fwalk_sglue+0x38>
 8008634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008638:	3301      	adds	r3, #1
 800863a:	d003      	beq.n	8008644 <_fwalk_sglue+0x38>
 800863c:	4629      	mov	r1, r5
 800863e:	4638      	mov	r0, r7
 8008640:	47c0      	blx	r8
 8008642:	4306      	orrs	r6, r0
 8008644:	3568      	adds	r5, #104	; 0x68
 8008646:	e7e9      	b.n	800861c <_fwalk_sglue+0x10>

08008648 <siprintf>:
 8008648:	b40e      	push	{r1, r2, r3}
 800864a:	b500      	push	{lr}
 800864c:	b09c      	sub	sp, #112	; 0x70
 800864e:	ab1d      	add	r3, sp, #116	; 0x74
 8008650:	9002      	str	r0, [sp, #8]
 8008652:	9006      	str	r0, [sp, #24]
 8008654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008658:	4809      	ldr	r0, [pc, #36]	; (8008680 <siprintf+0x38>)
 800865a:	9107      	str	r1, [sp, #28]
 800865c:	9104      	str	r1, [sp, #16]
 800865e:	4909      	ldr	r1, [pc, #36]	; (8008684 <siprintf+0x3c>)
 8008660:	f853 2b04 	ldr.w	r2, [r3], #4
 8008664:	9105      	str	r1, [sp, #20]
 8008666:	6800      	ldr	r0, [r0, #0]
 8008668:	9301      	str	r3, [sp, #4]
 800866a:	a902      	add	r1, sp, #8
 800866c:	f002 f914 	bl	800a898 <_svfiprintf_r>
 8008670:	9b02      	ldr	r3, [sp, #8]
 8008672:	2200      	movs	r2, #0
 8008674:	701a      	strb	r2, [r3, #0]
 8008676:	b01c      	add	sp, #112	; 0x70
 8008678:	f85d eb04 	ldr.w	lr, [sp], #4
 800867c:	b003      	add	sp, #12
 800867e:	4770      	bx	lr
 8008680:	200001d0 	.word	0x200001d0
 8008684:	ffff0208 	.word	0xffff0208

08008688 <__sread>:
 8008688:	b510      	push	{r4, lr}
 800868a:	460c      	mov	r4, r1
 800868c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008690:	f000 f8a0 	bl	80087d4 <_read_r>
 8008694:	2800      	cmp	r0, #0
 8008696:	bfab      	itete	ge
 8008698:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800869a:	89a3      	ldrhlt	r3, [r4, #12]
 800869c:	181b      	addge	r3, r3, r0
 800869e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086a2:	bfac      	ite	ge
 80086a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80086a6:	81a3      	strhlt	r3, [r4, #12]
 80086a8:	bd10      	pop	{r4, pc}

080086aa <__swrite>:
 80086aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ae:	461f      	mov	r7, r3
 80086b0:	898b      	ldrh	r3, [r1, #12]
 80086b2:	05db      	lsls	r3, r3, #23
 80086b4:	4605      	mov	r5, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	4616      	mov	r6, r2
 80086ba:	d505      	bpl.n	80086c8 <__swrite+0x1e>
 80086bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c0:	2302      	movs	r3, #2
 80086c2:	2200      	movs	r2, #0
 80086c4:	f000 f874 	bl	80087b0 <_lseek_r>
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086d2:	81a3      	strh	r3, [r4, #12]
 80086d4:	4632      	mov	r2, r6
 80086d6:	463b      	mov	r3, r7
 80086d8:	4628      	mov	r0, r5
 80086da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086de:	f000 b88b 	b.w	80087f8 <_write_r>

080086e2 <__sseek>:
 80086e2:	b510      	push	{r4, lr}
 80086e4:	460c      	mov	r4, r1
 80086e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ea:	f000 f861 	bl	80087b0 <_lseek_r>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	bf15      	itete	ne
 80086f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80086f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086fe:	81a3      	strheq	r3, [r4, #12]
 8008700:	bf18      	it	ne
 8008702:	81a3      	strhne	r3, [r4, #12]
 8008704:	bd10      	pop	{r4, pc}

08008706 <__sclose>:
 8008706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870a:	f000 b841 	b.w	8008790 <_close_r>

0800870e <memset>:
 800870e:	4402      	add	r2, r0
 8008710:	4603      	mov	r3, r0
 8008712:	4293      	cmp	r3, r2
 8008714:	d100      	bne.n	8008718 <memset+0xa>
 8008716:	4770      	bx	lr
 8008718:	f803 1b01 	strb.w	r1, [r3], #1
 800871c:	e7f9      	b.n	8008712 <memset+0x4>

0800871e <strchr>:
 800871e:	b2c9      	uxtb	r1, r1
 8008720:	4603      	mov	r3, r0
 8008722:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008726:	b11a      	cbz	r2, 8008730 <strchr+0x12>
 8008728:	428a      	cmp	r2, r1
 800872a:	d1f9      	bne.n	8008720 <strchr+0x2>
 800872c:	4618      	mov	r0, r3
 800872e:	4770      	bx	lr
 8008730:	2900      	cmp	r1, #0
 8008732:	bf18      	it	ne
 8008734:	2300      	movne	r3, #0
 8008736:	e7f9      	b.n	800872c <strchr+0xe>

08008738 <strncmp>:
 8008738:	b510      	push	{r4, lr}
 800873a:	b16a      	cbz	r2, 8008758 <strncmp+0x20>
 800873c:	3901      	subs	r1, #1
 800873e:	1884      	adds	r4, r0, r2
 8008740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008744:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008748:	429a      	cmp	r2, r3
 800874a:	d103      	bne.n	8008754 <strncmp+0x1c>
 800874c:	42a0      	cmp	r0, r4
 800874e:	d001      	beq.n	8008754 <strncmp+0x1c>
 8008750:	2a00      	cmp	r2, #0
 8008752:	d1f5      	bne.n	8008740 <strncmp+0x8>
 8008754:	1ad0      	subs	r0, r2, r3
 8008756:	bd10      	pop	{r4, pc}
 8008758:	4610      	mov	r0, r2
 800875a:	e7fc      	b.n	8008756 <strncmp+0x1e>

0800875c <strstr>:
 800875c:	780a      	ldrb	r2, [r1, #0]
 800875e:	b570      	push	{r4, r5, r6, lr}
 8008760:	b96a      	cbnz	r2, 800877e <strstr+0x22>
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	429a      	cmp	r2, r3
 8008766:	d109      	bne.n	800877c <strstr+0x20>
 8008768:	460c      	mov	r4, r1
 800876a:	4605      	mov	r5, r0
 800876c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0f6      	beq.n	8008762 <strstr+0x6>
 8008774:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008778:	429e      	cmp	r6, r3
 800877a:	d0f7      	beq.n	800876c <strstr+0x10>
 800877c:	3001      	adds	r0, #1
 800877e:	7803      	ldrb	r3, [r0, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1ef      	bne.n	8008764 <strstr+0x8>
 8008784:	4618      	mov	r0, r3
 8008786:	e7ec      	b.n	8008762 <strstr+0x6>

08008788 <_localeconv_r>:
 8008788:	4800      	ldr	r0, [pc, #0]	; (800878c <_localeconv_r+0x4>)
 800878a:	4770      	bx	lr
 800878c:	20000108 	.word	0x20000108

08008790 <_close_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d06      	ldr	r5, [pc, #24]	; (80087ac <_close_r+0x1c>)
 8008794:	2300      	movs	r3, #0
 8008796:	4604      	mov	r4, r0
 8008798:	4608      	mov	r0, r1
 800879a:	602b      	str	r3, [r5, #0]
 800879c:	f7fa f9a9 	bl	8002af2 <_close>
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d102      	bne.n	80087aa <_close_r+0x1a>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	b103      	cbz	r3, 80087aa <_close_r+0x1a>
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	bd38      	pop	{r3, r4, r5, pc}
 80087ac:	20000580 	.word	0x20000580

080087b0 <_lseek_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	; (80087d0 <_lseek_r+0x20>)
 80087b4:	4604      	mov	r4, r0
 80087b6:	4608      	mov	r0, r1
 80087b8:	4611      	mov	r1, r2
 80087ba:	2200      	movs	r2, #0
 80087bc:	602a      	str	r2, [r5, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	f7fa f9be 	bl	8002b40 <_lseek>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_lseek_r+0x1e>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_lseek_r+0x1e>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	20000580 	.word	0x20000580

080087d4 <_read_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d07      	ldr	r5, [pc, #28]	; (80087f4 <_read_r+0x20>)
 80087d8:	4604      	mov	r4, r0
 80087da:	4608      	mov	r0, r1
 80087dc:	4611      	mov	r1, r2
 80087de:	2200      	movs	r2, #0
 80087e0:	602a      	str	r2, [r5, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	f7fa f94c 	bl	8002a80 <_read>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_read_r+0x1e>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_read_r+0x1e>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	20000580 	.word	0x20000580

080087f8 <_write_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d07      	ldr	r5, [pc, #28]	; (8008818 <_write_r+0x20>)
 80087fc:	4604      	mov	r4, r0
 80087fe:	4608      	mov	r0, r1
 8008800:	4611      	mov	r1, r2
 8008802:	2200      	movs	r2, #0
 8008804:	602a      	str	r2, [r5, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	f7fa f957 	bl	8002aba <_write>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_write_r+0x1e>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_write_r+0x1e>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20000580 	.word	0x20000580

0800881c <__errno>:
 800881c:	4b01      	ldr	r3, [pc, #4]	; (8008824 <__errno+0x8>)
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	200001d0 	.word	0x200001d0

08008828 <__libc_init_array>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	4d0d      	ldr	r5, [pc, #52]	; (8008860 <__libc_init_array+0x38>)
 800882c:	4c0d      	ldr	r4, [pc, #52]	; (8008864 <__libc_init_array+0x3c>)
 800882e:	1b64      	subs	r4, r4, r5
 8008830:	10a4      	asrs	r4, r4, #2
 8008832:	2600      	movs	r6, #0
 8008834:	42a6      	cmp	r6, r4
 8008836:	d109      	bne.n	800884c <__libc_init_array+0x24>
 8008838:	4d0b      	ldr	r5, [pc, #44]	; (8008868 <__libc_init_array+0x40>)
 800883a:	4c0c      	ldr	r4, [pc, #48]	; (800886c <__libc_init_array+0x44>)
 800883c:	f003 fc60 	bl	800c100 <_init>
 8008840:	1b64      	subs	r4, r4, r5
 8008842:	10a4      	asrs	r4, r4, #2
 8008844:	2600      	movs	r6, #0
 8008846:	42a6      	cmp	r6, r4
 8008848:	d105      	bne.n	8008856 <__libc_init_array+0x2e>
 800884a:	bd70      	pop	{r4, r5, r6, pc}
 800884c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008850:	4798      	blx	r3
 8008852:	3601      	adds	r6, #1
 8008854:	e7ee      	b.n	8008834 <__libc_init_array+0xc>
 8008856:	f855 3b04 	ldr.w	r3, [r5], #4
 800885a:	4798      	blx	r3
 800885c:	3601      	adds	r6, #1
 800885e:	e7f2      	b.n	8008846 <__libc_init_array+0x1e>
 8008860:	0800c638 	.word	0x0800c638
 8008864:	0800c638 	.word	0x0800c638
 8008868:	0800c638 	.word	0x0800c638
 800886c:	0800c63c 	.word	0x0800c63c

08008870 <__retarget_lock_init_recursive>:
 8008870:	4770      	bx	lr

08008872 <__retarget_lock_acquire_recursive>:
 8008872:	4770      	bx	lr

08008874 <__retarget_lock_release_recursive>:
 8008874:	4770      	bx	lr

08008876 <memcpy>:
 8008876:	440a      	add	r2, r1
 8008878:	4291      	cmp	r1, r2
 800887a:	f100 33ff 	add.w	r3, r0, #4294967295
 800887e:	d100      	bne.n	8008882 <memcpy+0xc>
 8008880:	4770      	bx	lr
 8008882:	b510      	push	{r4, lr}
 8008884:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008888:	f803 4f01 	strb.w	r4, [r3, #1]!
 800888c:	4291      	cmp	r1, r2
 800888e:	d1f9      	bne.n	8008884 <memcpy+0xe>
 8008890:	bd10      	pop	{r4, pc}
 8008892:	0000      	movs	r0, r0
 8008894:	0000      	movs	r0, r0
	...

08008898 <nan>:
 8008898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088a0 <nan+0x8>
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	00000000 	.word	0x00000000
 80088a4:	7ff80000 	.word	0x7ff80000

080088a8 <quorem>:
 80088a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	6903      	ldr	r3, [r0, #16]
 80088ae:	690c      	ldr	r4, [r1, #16]
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	4607      	mov	r7, r0
 80088b4:	db7e      	blt.n	80089b4 <quorem+0x10c>
 80088b6:	3c01      	subs	r4, #1
 80088b8:	f101 0814 	add.w	r8, r1, #20
 80088bc:	f100 0514 	add.w	r5, r0, #20
 80088c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088ce:	3301      	adds	r3, #1
 80088d0:	429a      	cmp	r2, r3
 80088d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088da:	fbb2 f6f3 	udiv	r6, r2, r3
 80088de:	d331      	bcc.n	8008944 <quorem+0x9c>
 80088e0:	f04f 0e00 	mov.w	lr, #0
 80088e4:	4640      	mov	r0, r8
 80088e6:	46ac      	mov	ip, r5
 80088e8:	46f2      	mov	sl, lr
 80088ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80088ee:	b293      	uxth	r3, r2
 80088f0:	fb06 e303 	mla	r3, r6, r3, lr
 80088f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088f8:	0c1a      	lsrs	r2, r3, #16
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	ebaa 0303 	sub.w	r3, sl, r3
 8008900:	f8dc a000 	ldr.w	sl, [ip]
 8008904:	fa13 f38a 	uxtah	r3, r3, sl
 8008908:	fb06 220e 	mla	r2, r6, lr, r2
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	9b00      	ldr	r3, [sp, #0]
 8008910:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008914:	b292      	uxth	r2, r2
 8008916:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800891a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800891e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008922:	4581      	cmp	r9, r0
 8008924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008928:	f84c 3b04 	str.w	r3, [ip], #4
 800892c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008930:	d2db      	bcs.n	80088ea <quorem+0x42>
 8008932:	f855 300b 	ldr.w	r3, [r5, fp]
 8008936:	b92b      	cbnz	r3, 8008944 <quorem+0x9c>
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	3b04      	subs	r3, #4
 800893c:	429d      	cmp	r5, r3
 800893e:	461a      	mov	r2, r3
 8008940:	d32c      	bcc.n	800899c <quorem+0xf4>
 8008942:	613c      	str	r4, [r7, #16]
 8008944:	4638      	mov	r0, r7
 8008946:	f001 fd59 	bl	800a3fc <__mcmp>
 800894a:	2800      	cmp	r0, #0
 800894c:	db22      	blt.n	8008994 <quorem+0xec>
 800894e:	3601      	adds	r6, #1
 8008950:	4629      	mov	r1, r5
 8008952:	2000      	movs	r0, #0
 8008954:	f858 2b04 	ldr.w	r2, [r8], #4
 8008958:	f8d1 c000 	ldr.w	ip, [r1]
 800895c:	b293      	uxth	r3, r2
 800895e:	1ac3      	subs	r3, r0, r3
 8008960:	0c12      	lsrs	r2, r2, #16
 8008962:	fa13 f38c 	uxtah	r3, r3, ip
 8008966:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800896a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800896e:	b29b      	uxth	r3, r3
 8008970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008974:	45c1      	cmp	r9, r8
 8008976:	f841 3b04 	str.w	r3, [r1], #4
 800897a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800897e:	d2e9      	bcs.n	8008954 <quorem+0xac>
 8008980:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008984:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008988:	b922      	cbnz	r2, 8008994 <quorem+0xec>
 800898a:	3b04      	subs	r3, #4
 800898c:	429d      	cmp	r5, r3
 800898e:	461a      	mov	r2, r3
 8008990:	d30a      	bcc.n	80089a8 <quorem+0x100>
 8008992:	613c      	str	r4, [r7, #16]
 8008994:	4630      	mov	r0, r6
 8008996:	b003      	add	sp, #12
 8008998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899c:	6812      	ldr	r2, [r2, #0]
 800899e:	3b04      	subs	r3, #4
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	d1ce      	bne.n	8008942 <quorem+0x9a>
 80089a4:	3c01      	subs	r4, #1
 80089a6:	e7c9      	b.n	800893c <quorem+0x94>
 80089a8:	6812      	ldr	r2, [r2, #0]
 80089aa:	3b04      	subs	r3, #4
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	d1f0      	bne.n	8008992 <quorem+0xea>
 80089b0:	3c01      	subs	r4, #1
 80089b2:	e7eb      	b.n	800898c <quorem+0xe4>
 80089b4:	2000      	movs	r0, #0
 80089b6:	e7ee      	b.n	8008996 <quorem+0xee>

080089b8 <_dtoa_r>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	ed2d 8b04 	vpush	{d8-d9}
 80089c0:	69c5      	ldr	r5, [r0, #28]
 80089c2:	b093      	sub	sp, #76	; 0x4c
 80089c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089c8:	ec57 6b10 	vmov	r6, r7, d0
 80089cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089d0:	9107      	str	r1, [sp, #28]
 80089d2:	4604      	mov	r4, r0
 80089d4:	920a      	str	r2, [sp, #40]	; 0x28
 80089d6:	930d      	str	r3, [sp, #52]	; 0x34
 80089d8:	b975      	cbnz	r5, 80089f8 <_dtoa_r+0x40>
 80089da:	2010      	movs	r0, #16
 80089dc:	f001 f982 	bl	8009ce4 <malloc>
 80089e0:	4602      	mov	r2, r0
 80089e2:	61e0      	str	r0, [r4, #28]
 80089e4:	b920      	cbnz	r0, 80089f0 <_dtoa_r+0x38>
 80089e6:	4bae      	ldr	r3, [pc, #696]	; (8008ca0 <_dtoa_r+0x2e8>)
 80089e8:	21ef      	movs	r1, #239	; 0xef
 80089ea:	48ae      	ldr	r0, [pc, #696]	; (8008ca4 <_dtoa_r+0x2ec>)
 80089ec:	f002 f92a 	bl	800ac44 <__assert_func>
 80089f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089f4:	6005      	str	r5, [r0, #0]
 80089f6:	60c5      	str	r5, [r0, #12]
 80089f8:	69e3      	ldr	r3, [r4, #28]
 80089fa:	6819      	ldr	r1, [r3, #0]
 80089fc:	b151      	cbz	r1, 8008a14 <_dtoa_r+0x5c>
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	604a      	str	r2, [r1, #4]
 8008a02:	2301      	movs	r3, #1
 8008a04:	4093      	lsls	r3, r2
 8008a06:	608b      	str	r3, [r1, #8]
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f001 fa71 	bl	8009ef0 <_Bfree>
 8008a0e:	69e3      	ldr	r3, [r4, #28]
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	1e3b      	subs	r3, r7, #0
 8008a16:	bfbb      	ittet	lt
 8008a18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a1c:	9303      	strlt	r3, [sp, #12]
 8008a1e:	2300      	movge	r3, #0
 8008a20:	2201      	movlt	r2, #1
 8008a22:	bfac      	ite	ge
 8008a24:	f8c8 3000 	strge.w	r3, [r8]
 8008a28:	f8c8 2000 	strlt.w	r2, [r8]
 8008a2c:	4b9e      	ldr	r3, [pc, #632]	; (8008ca8 <_dtoa_r+0x2f0>)
 8008a2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a32:	ea33 0308 	bics.w	r3, r3, r8
 8008a36:	d11b      	bne.n	8008a70 <_dtoa_r+0xb8>
 8008a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a44:	4333      	orrs	r3, r6
 8008a46:	f000 8593 	beq.w	8009570 <_dtoa_r+0xbb8>
 8008a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a4c:	b963      	cbnz	r3, 8008a68 <_dtoa_r+0xb0>
 8008a4e:	4b97      	ldr	r3, [pc, #604]	; (8008cac <_dtoa_r+0x2f4>)
 8008a50:	e027      	b.n	8008aa2 <_dtoa_r+0xea>
 8008a52:	4b97      	ldr	r3, [pc, #604]	; (8008cb0 <_dtoa_r+0x2f8>)
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	3308      	adds	r3, #8
 8008a58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	9800      	ldr	r0, [sp, #0]
 8008a5e:	b013      	add	sp, #76	; 0x4c
 8008a60:	ecbd 8b04 	vpop	{d8-d9}
 8008a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a68:	4b90      	ldr	r3, [pc, #576]	; (8008cac <_dtoa_r+0x2f4>)
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	3303      	adds	r3, #3
 8008a6e:	e7f3      	b.n	8008a58 <_dtoa_r+0xa0>
 8008a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a74:	2200      	movs	r2, #0
 8008a76:	ec51 0b17 	vmov	r0, r1, d7
 8008a7a:	eeb0 8a47 	vmov.f32	s16, s14
 8008a7e:	eef0 8a67 	vmov.f32	s17, s15
 8008a82:	2300      	movs	r3, #0
 8008a84:	f7f8 f820 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a88:	4681      	mov	r9, r0
 8008a8a:	b160      	cbz	r0, 8008aa6 <_dtoa_r+0xee>
 8008a8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a8e:	2301      	movs	r3, #1
 8008a90:	6013      	str	r3, [r2, #0]
 8008a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 8568 	beq.w	800956a <_dtoa_r+0xbb2>
 8008a9a:	4b86      	ldr	r3, [pc, #536]	; (8008cb4 <_dtoa_r+0x2fc>)
 8008a9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	e7da      	b.n	8008a5c <_dtoa_r+0xa4>
 8008aa6:	aa10      	add	r2, sp, #64	; 0x40
 8008aa8:	a911      	add	r1, sp, #68	; 0x44
 8008aaa:	4620      	mov	r0, r4
 8008aac:	eeb0 0a48 	vmov.f32	s0, s16
 8008ab0:	eef0 0a68 	vmov.f32	s1, s17
 8008ab4:	f001 fdb8 	bl	800a628 <__d2b>
 8008ab8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008abc:	4682      	mov	sl, r0
 8008abe:	2d00      	cmp	r5, #0
 8008ac0:	d07f      	beq.n	8008bc2 <_dtoa_r+0x20a>
 8008ac2:	ee18 3a90 	vmov	r3, s17
 8008ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ace:	ec51 0b18 	vmov	r0, r1, d8
 8008ad2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ada:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008ade:	4619      	mov	r1, r3
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4b75      	ldr	r3, [pc, #468]	; (8008cb8 <_dtoa_r+0x300>)
 8008ae4:	f7f7 fbd0 	bl	8000288 <__aeabi_dsub>
 8008ae8:	a367      	add	r3, pc, #412	; (adr r3, 8008c88 <_dtoa_r+0x2d0>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fd83 	bl	80005f8 <__aeabi_dmul>
 8008af2:	a367      	add	r3, pc, #412	; (adr r3, 8008c90 <_dtoa_r+0x2d8>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f7f7 fbc8 	bl	800028c <__adddf3>
 8008afc:	4606      	mov	r6, r0
 8008afe:	4628      	mov	r0, r5
 8008b00:	460f      	mov	r7, r1
 8008b02:	f7f7 fd0f 	bl	8000524 <__aeabi_i2d>
 8008b06:	a364      	add	r3, pc, #400	; (adr r3, 8008c98 <_dtoa_r+0x2e0>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f7f7 fd74 	bl	80005f8 <__aeabi_dmul>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f7f7 fbb8 	bl	800028c <__adddf3>
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	460f      	mov	r7, r1
 8008b20:	f7f8 f81a 	bl	8000b58 <__aeabi_d2iz>
 8008b24:	2200      	movs	r2, #0
 8008b26:	4683      	mov	fp, r0
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	f7f7 ffd5 	bl	8000adc <__aeabi_dcmplt>
 8008b32:	b148      	cbz	r0, 8008b48 <_dtoa_r+0x190>
 8008b34:	4658      	mov	r0, fp
 8008b36:	f7f7 fcf5 	bl	8000524 <__aeabi_i2d>
 8008b3a:	4632      	mov	r2, r6
 8008b3c:	463b      	mov	r3, r7
 8008b3e:	f7f7 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b42:	b908      	cbnz	r0, 8008b48 <_dtoa_r+0x190>
 8008b44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b48:	f1bb 0f16 	cmp.w	fp, #22
 8008b4c:	d857      	bhi.n	8008bfe <_dtoa_r+0x246>
 8008b4e:	4b5b      	ldr	r3, [pc, #364]	; (8008cbc <_dtoa_r+0x304>)
 8008b50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b58:	ec51 0b18 	vmov	r0, r1, d8
 8008b5c:	f7f7 ffbe 	bl	8000adc <__aeabi_dcmplt>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d04e      	beq.n	8008c02 <_dtoa_r+0x24a>
 8008b64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b68:	2300      	movs	r3, #0
 8008b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b6e:	1b5b      	subs	r3, r3, r5
 8008b70:	1e5a      	subs	r2, r3, #1
 8008b72:	bf45      	ittet	mi
 8008b74:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b78:	9305      	strmi	r3, [sp, #20]
 8008b7a:	2300      	movpl	r3, #0
 8008b7c:	2300      	movmi	r3, #0
 8008b7e:	9206      	str	r2, [sp, #24]
 8008b80:	bf54      	ite	pl
 8008b82:	9305      	strpl	r3, [sp, #20]
 8008b84:	9306      	strmi	r3, [sp, #24]
 8008b86:	f1bb 0f00 	cmp.w	fp, #0
 8008b8a:	db3c      	blt.n	8008c06 <_dtoa_r+0x24e>
 8008b8c:	9b06      	ldr	r3, [sp, #24]
 8008b8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008b92:	445b      	add	r3, fp
 8008b94:	9306      	str	r3, [sp, #24]
 8008b96:	2300      	movs	r3, #0
 8008b98:	9308      	str	r3, [sp, #32]
 8008b9a:	9b07      	ldr	r3, [sp, #28]
 8008b9c:	2b09      	cmp	r3, #9
 8008b9e:	d868      	bhi.n	8008c72 <_dtoa_r+0x2ba>
 8008ba0:	2b05      	cmp	r3, #5
 8008ba2:	bfc4      	itt	gt
 8008ba4:	3b04      	subgt	r3, #4
 8008ba6:	9307      	strgt	r3, [sp, #28]
 8008ba8:	9b07      	ldr	r3, [sp, #28]
 8008baa:	f1a3 0302 	sub.w	r3, r3, #2
 8008bae:	bfcc      	ite	gt
 8008bb0:	2500      	movgt	r5, #0
 8008bb2:	2501      	movle	r5, #1
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	f200 8085 	bhi.w	8008cc4 <_dtoa_r+0x30c>
 8008bba:	e8df f003 	tbb	[pc, r3]
 8008bbe:	3b2e      	.short	0x3b2e
 8008bc0:	5839      	.short	0x5839
 8008bc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008bc6:	441d      	add	r5, r3
 8008bc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008bcc:	2b20      	cmp	r3, #32
 8008bce:	bfc1      	itttt	gt
 8008bd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8008bd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008bdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008be0:	bfd6      	itet	le
 8008be2:	f1c3 0320 	rsble	r3, r3, #32
 8008be6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008bea:	fa06 f003 	lslle.w	r0, r6, r3
 8008bee:	f7f7 fc89 	bl	8000504 <__aeabi_ui2d>
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008bf8:	3d01      	subs	r5, #1
 8008bfa:	920e      	str	r2, [sp, #56]	; 0x38
 8008bfc:	e76f      	b.n	8008ade <_dtoa_r+0x126>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e7b3      	b.n	8008b6a <_dtoa_r+0x1b2>
 8008c02:	900c      	str	r0, [sp, #48]	; 0x30
 8008c04:	e7b2      	b.n	8008b6c <_dtoa_r+0x1b4>
 8008c06:	9b05      	ldr	r3, [sp, #20]
 8008c08:	eba3 030b 	sub.w	r3, r3, fp
 8008c0c:	9305      	str	r3, [sp, #20]
 8008c0e:	f1cb 0300 	rsb	r3, fp, #0
 8008c12:	9308      	str	r3, [sp, #32]
 8008c14:	2300      	movs	r3, #0
 8008c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c18:	e7bf      	b.n	8008b9a <_dtoa_r+0x1e2>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	dc52      	bgt.n	8008cca <_dtoa_r+0x312>
 8008c24:	2301      	movs	r3, #1
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	920a      	str	r2, [sp, #40]	; 0x28
 8008c2e:	e00b      	b.n	8008c48 <_dtoa_r+0x290>
 8008c30:	2301      	movs	r3, #1
 8008c32:	e7f3      	b.n	8008c1c <_dtoa_r+0x264>
 8008c34:	2300      	movs	r3, #0
 8008c36:	9309      	str	r3, [sp, #36]	; 0x24
 8008c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3a:	445b      	add	r3, fp
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	bfb8      	it	lt
 8008c46:	2301      	movlt	r3, #1
 8008c48:	69e0      	ldr	r0, [r4, #28]
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	f102 0614 	add.w	r6, r2, #20
 8008c52:	429e      	cmp	r6, r3
 8008c54:	d93d      	bls.n	8008cd2 <_dtoa_r+0x31a>
 8008c56:	6041      	str	r1, [r0, #4]
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f001 f909 	bl	8009e70 <_Balloc>
 8008c5e:	9000      	str	r0, [sp, #0]
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d139      	bne.n	8008cd8 <_dtoa_r+0x320>
 8008c64:	4b16      	ldr	r3, [pc, #88]	; (8008cc0 <_dtoa_r+0x308>)
 8008c66:	4602      	mov	r2, r0
 8008c68:	f240 11af 	movw	r1, #431	; 0x1af
 8008c6c:	e6bd      	b.n	80089ea <_dtoa_r+0x32>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e7e1      	b.n	8008c36 <_dtoa_r+0x27e>
 8008c72:	2501      	movs	r5, #1
 8008c74:	2300      	movs	r3, #0
 8008c76:	9307      	str	r3, [sp, #28]
 8008c78:	9509      	str	r5, [sp, #36]	; 0x24
 8008c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	2200      	movs	r2, #0
 8008c84:	2312      	movs	r3, #18
 8008c86:	e7d1      	b.n	8008c2c <_dtoa_r+0x274>
 8008c88:	636f4361 	.word	0x636f4361
 8008c8c:	3fd287a7 	.word	0x3fd287a7
 8008c90:	8b60c8b3 	.word	0x8b60c8b3
 8008c94:	3fc68a28 	.word	0x3fc68a28
 8008c98:	509f79fb 	.word	0x509f79fb
 8008c9c:	3fd34413 	.word	0x3fd34413
 8008ca0:	0800c271 	.word	0x0800c271
 8008ca4:	0800c288 	.word	0x0800c288
 8008ca8:	7ff00000 	.word	0x7ff00000
 8008cac:	0800c26d 	.word	0x0800c26d
 8008cb0:	0800c264 	.word	0x0800c264
 8008cb4:	0800c239 	.word	0x0800c239
 8008cb8:	3ff80000 	.word	0x3ff80000
 8008cbc:	0800c3d8 	.word	0x0800c3d8
 8008cc0:	0800c2e0 	.word	0x0800c2e0
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc8:	e7d7      	b.n	8008c7a <_dtoa_r+0x2c2>
 8008cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	e7ba      	b.n	8008c48 <_dtoa_r+0x290>
 8008cd2:	3101      	adds	r1, #1
 8008cd4:	0052      	lsls	r2, r2, #1
 8008cd6:	e7ba      	b.n	8008c4e <_dtoa_r+0x296>
 8008cd8:	69e3      	ldr	r3, [r4, #28]
 8008cda:	9a00      	ldr	r2, [sp, #0]
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	9b04      	ldr	r3, [sp, #16]
 8008ce0:	2b0e      	cmp	r3, #14
 8008ce2:	f200 80a8 	bhi.w	8008e36 <_dtoa_r+0x47e>
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	f000 80a5 	beq.w	8008e36 <_dtoa_r+0x47e>
 8008cec:	f1bb 0f00 	cmp.w	fp, #0
 8008cf0:	dd38      	ble.n	8008d64 <_dtoa_r+0x3ac>
 8008cf2:	4bc0      	ldr	r3, [pc, #768]	; (8008ff4 <_dtoa_r+0x63c>)
 8008cf4:	f00b 020f 	and.w	r2, fp, #15
 8008cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008d00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008d04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008d08:	d019      	beq.n	8008d3e <_dtoa_r+0x386>
 8008d0a:	4bbb      	ldr	r3, [pc, #748]	; (8008ff8 <_dtoa_r+0x640>)
 8008d0c:	ec51 0b18 	vmov	r0, r1, d8
 8008d10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d14:	f7f7 fd9a 	bl	800084c <__aeabi_ddiv>
 8008d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d1c:	f008 080f 	and.w	r8, r8, #15
 8008d20:	2503      	movs	r5, #3
 8008d22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008ff8 <_dtoa_r+0x640>
 8008d26:	f1b8 0f00 	cmp.w	r8, #0
 8008d2a:	d10a      	bne.n	8008d42 <_dtoa_r+0x38a>
 8008d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d30:	4632      	mov	r2, r6
 8008d32:	463b      	mov	r3, r7
 8008d34:	f7f7 fd8a 	bl	800084c <__aeabi_ddiv>
 8008d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d3c:	e02b      	b.n	8008d96 <_dtoa_r+0x3de>
 8008d3e:	2502      	movs	r5, #2
 8008d40:	e7ef      	b.n	8008d22 <_dtoa_r+0x36a>
 8008d42:	f018 0f01 	tst.w	r8, #1
 8008d46:	d008      	beq.n	8008d5a <_dtoa_r+0x3a2>
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d50:	f7f7 fc52 	bl	80005f8 <__aeabi_dmul>
 8008d54:	3501      	adds	r5, #1
 8008d56:	4606      	mov	r6, r0
 8008d58:	460f      	mov	r7, r1
 8008d5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d5e:	f109 0908 	add.w	r9, r9, #8
 8008d62:	e7e0      	b.n	8008d26 <_dtoa_r+0x36e>
 8008d64:	f000 809f 	beq.w	8008ea6 <_dtoa_r+0x4ee>
 8008d68:	f1cb 0600 	rsb	r6, fp, #0
 8008d6c:	4ba1      	ldr	r3, [pc, #644]	; (8008ff4 <_dtoa_r+0x63c>)
 8008d6e:	4fa2      	ldr	r7, [pc, #648]	; (8008ff8 <_dtoa_r+0x640>)
 8008d70:	f006 020f 	and.w	r2, r6, #15
 8008d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	ec51 0b18 	vmov	r0, r1, d8
 8008d80:	f7f7 fc3a 	bl	80005f8 <__aeabi_dmul>
 8008d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d88:	1136      	asrs	r6, r6, #4
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2502      	movs	r5, #2
 8008d8e:	2e00      	cmp	r6, #0
 8008d90:	d17e      	bne.n	8008e90 <_dtoa_r+0x4d8>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1d0      	bne.n	8008d38 <_dtoa_r+0x380>
 8008d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8084 	beq.w	8008eaa <_dtoa_r+0x4f2>
 8008da2:	4b96      	ldr	r3, [pc, #600]	; (8008ffc <_dtoa_r+0x644>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	4640      	mov	r0, r8
 8008da8:	4649      	mov	r1, r9
 8008daa:	f7f7 fe97 	bl	8000adc <__aeabi_dcmplt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d07b      	beq.n	8008eaa <_dtoa_r+0x4f2>
 8008db2:	9b04      	ldr	r3, [sp, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d078      	beq.n	8008eaa <_dtoa_r+0x4f2>
 8008db8:	9b01      	ldr	r3, [sp, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dd39      	ble.n	8008e32 <_dtoa_r+0x47a>
 8008dbe:	4b90      	ldr	r3, [pc, #576]	; (8009000 <_dtoa_r+0x648>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	f7f7 fc17 	bl	80005f8 <__aeabi_dmul>
 8008dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dce:	9e01      	ldr	r6, [sp, #4]
 8008dd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008dda:	4628      	mov	r0, r5
 8008ddc:	f7f7 fba2 	bl	8000524 <__aeabi_i2d>
 8008de0:	4642      	mov	r2, r8
 8008de2:	464b      	mov	r3, r9
 8008de4:	f7f7 fc08 	bl	80005f8 <__aeabi_dmul>
 8008de8:	4b86      	ldr	r3, [pc, #536]	; (8009004 <_dtoa_r+0x64c>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	f7f7 fa4e 	bl	800028c <__adddf3>
 8008df0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df8:	9303      	str	r3, [sp, #12]
 8008dfa:	2e00      	cmp	r6, #0
 8008dfc:	d158      	bne.n	8008eb0 <_dtoa_r+0x4f8>
 8008dfe:	4b82      	ldr	r3, [pc, #520]	; (8009008 <_dtoa_r+0x650>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	4640      	mov	r0, r8
 8008e04:	4649      	mov	r1, r9
 8008e06:	f7f7 fa3f 	bl	8000288 <__aeabi_dsub>
 8008e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e0e:	4680      	mov	r8, r0
 8008e10:	4689      	mov	r9, r1
 8008e12:	f7f7 fe81 	bl	8000b18 <__aeabi_dcmpgt>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f040 8296 	bne.w	8009348 <_dtoa_r+0x990>
 8008e1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008e20:	4640      	mov	r0, r8
 8008e22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e26:	4649      	mov	r1, r9
 8008e28:	f7f7 fe58 	bl	8000adc <__aeabi_dcmplt>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	f040 8289 	bne.w	8009344 <_dtoa_r+0x98c>
 8008e32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f2c0 814e 	blt.w	80090da <_dtoa_r+0x722>
 8008e3e:	f1bb 0f0e 	cmp.w	fp, #14
 8008e42:	f300 814a 	bgt.w	80090da <_dtoa_r+0x722>
 8008e46:	4b6b      	ldr	r3, [pc, #428]	; (8008ff4 <_dtoa_r+0x63c>)
 8008e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f280 80dc 	bge.w	8009010 <_dtoa_r+0x658>
 8008e58:	9b04      	ldr	r3, [sp, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f300 80d8 	bgt.w	8009010 <_dtoa_r+0x658>
 8008e60:	f040 826f 	bne.w	8009342 <_dtoa_r+0x98a>
 8008e64:	4b68      	ldr	r3, [pc, #416]	; (8009008 <_dtoa_r+0x650>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	f7f7 fbc4 	bl	80005f8 <__aeabi_dmul>
 8008e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e74:	f7f7 fe46 	bl	8000b04 <__aeabi_dcmpge>
 8008e78:	9e04      	ldr	r6, [sp, #16]
 8008e7a:	4637      	mov	r7, r6
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f040 8245 	bne.w	800930c <_dtoa_r+0x954>
 8008e82:	9d00      	ldr	r5, [sp, #0]
 8008e84:	2331      	movs	r3, #49	; 0x31
 8008e86:	f805 3b01 	strb.w	r3, [r5], #1
 8008e8a:	f10b 0b01 	add.w	fp, fp, #1
 8008e8e:	e241      	b.n	8009314 <_dtoa_r+0x95c>
 8008e90:	07f2      	lsls	r2, r6, #31
 8008e92:	d505      	bpl.n	8008ea0 <_dtoa_r+0x4e8>
 8008e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e98:	f7f7 fbae 	bl	80005f8 <__aeabi_dmul>
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	1076      	asrs	r6, r6, #1
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	e773      	b.n	8008d8e <_dtoa_r+0x3d6>
 8008ea6:	2502      	movs	r5, #2
 8008ea8:	e775      	b.n	8008d96 <_dtoa_r+0x3de>
 8008eaa:	9e04      	ldr	r6, [sp, #16]
 8008eac:	465f      	mov	r7, fp
 8008eae:	e792      	b.n	8008dd6 <_dtoa_r+0x41e>
 8008eb0:	9900      	ldr	r1, [sp, #0]
 8008eb2:	4b50      	ldr	r3, [pc, #320]	; (8008ff4 <_dtoa_r+0x63c>)
 8008eb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008eb8:	4431      	add	r1, r6
 8008eba:	9102      	str	r1, [sp, #8]
 8008ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ebe:	eeb0 9a47 	vmov.f32	s18, s14
 8008ec2:	eef0 9a67 	vmov.f32	s19, s15
 8008ec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008eca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ece:	2900      	cmp	r1, #0
 8008ed0:	d044      	beq.n	8008f5c <_dtoa_r+0x5a4>
 8008ed2:	494e      	ldr	r1, [pc, #312]	; (800900c <_dtoa_r+0x654>)
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	f7f7 fcb9 	bl	800084c <__aeabi_ddiv>
 8008eda:	ec53 2b19 	vmov	r2, r3, d9
 8008ede:	f7f7 f9d3 	bl	8000288 <__aeabi_dsub>
 8008ee2:	9d00      	ldr	r5, [sp, #0]
 8008ee4:	ec41 0b19 	vmov	d9, r0, r1
 8008ee8:	4649      	mov	r1, r9
 8008eea:	4640      	mov	r0, r8
 8008eec:	f7f7 fe34 	bl	8000b58 <__aeabi_d2iz>
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	f7f7 fb17 	bl	8000524 <__aeabi_i2d>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4640      	mov	r0, r8
 8008efc:	4649      	mov	r1, r9
 8008efe:	f7f7 f9c3 	bl	8000288 <__aeabi_dsub>
 8008f02:	3630      	adds	r6, #48	; 0x30
 8008f04:	f805 6b01 	strb.w	r6, [r5], #1
 8008f08:	ec53 2b19 	vmov	r2, r3, d9
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	4689      	mov	r9, r1
 8008f10:	f7f7 fde4 	bl	8000adc <__aeabi_dcmplt>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	d164      	bne.n	8008fe2 <_dtoa_r+0x62a>
 8008f18:	4642      	mov	r2, r8
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	4937      	ldr	r1, [pc, #220]	; (8008ffc <_dtoa_r+0x644>)
 8008f1e:	2000      	movs	r0, #0
 8008f20:	f7f7 f9b2 	bl	8000288 <__aeabi_dsub>
 8008f24:	ec53 2b19 	vmov	r2, r3, d9
 8008f28:	f7f7 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f040 80b6 	bne.w	800909e <_dtoa_r+0x6e6>
 8008f32:	9b02      	ldr	r3, [sp, #8]
 8008f34:	429d      	cmp	r5, r3
 8008f36:	f43f af7c 	beq.w	8008e32 <_dtoa_r+0x47a>
 8008f3a:	4b31      	ldr	r3, [pc, #196]	; (8009000 <_dtoa_r+0x648>)
 8008f3c:	ec51 0b19 	vmov	r0, r1, d9
 8008f40:	2200      	movs	r2, #0
 8008f42:	f7f7 fb59 	bl	80005f8 <__aeabi_dmul>
 8008f46:	4b2e      	ldr	r3, [pc, #184]	; (8009000 <_dtoa_r+0x648>)
 8008f48:	ec41 0b19 	vmov	d9, r0, r1
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f7f7 fb51 	bl	80005f8 <__aeabi_dmul>
 8008f56:	4680      	mov	r8, r0
 8008f58:	4689      	mov	r9, r1
 8008f5a:	e7c5      	b.n	8008ee8 <_dtoa_r+0x530>
 8008f5c:	ec51 0b17 	vmov	r0, r1, d7
 8008f60:	f7f7 fb4a 	bl	80005f8 <__aeabi_dmul>
 8008f64:	9b02      	ldr	r3, [sp, #8]
 8008f66:	9d00      	ldr	r5, [sp, #0]
 8008f68:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f6a:	ec41 0b19 	vmov	d9, r0, r1
 8008f6e:	4649      	mov	r1, r9
 8008f70:	4640      	mov	r0, r8
 8008f72:	f7f7 fdf1 	bl	8000b58 <__aeabi_d2iz>
 8008f76:	4606      	mov	r6, r0
 8008f78:	f7f7 fad4 	bl	8000524 <__aeabi_i2d>
 8008f7c:	3630      	adds	r6, #48	; 0x30
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 f97f 	bl	8000288 <__aeabi_dsub>
 8008f8a:	f805 6b01 	strb.w	r6, [r5], #1
 8008f8e:	9b02      	ldr	r3, [sp, #8]
 8008f90:	429d      	cmp	r5, r3
 8008f92:	4680      	mov	r8, r0
 8008f94:	4689      	mov	r9, r1
 8008f96:	f04f 0200 	mov.w	r2, #0
 8008f9a:	d124      	bne.n	8008fe6 <_dtoa_r+0x62e>
 8008f9c:	4b1b      	ldr	r3, [pc, #108]	; (800900c <_dtoa_r+0x654>)
 8008f9e:	ec51 0b19 	vmov	r0, r1, d9
 8008fa2:	f7f7 f973 	bl	800028c <__adddf3>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4640      	mov	r0, r8
 8008fac:	4649      	mov	r1, r9
 8008fae:	f7f7 fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d173      	bne.n	800909e <_dtoa_r+0x6e6>
 8008fb6:	ec53 2b19 	vmov	r2, r3, d9
 8008fba:	4914      	ldr	r1, [pc, #80]	; (800900c <_dtoa_r+0x654>)
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	f7f7 f963 	bl	8000288 <__aeabi_dsub>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	4649      	mov	r1, r9
 8008fca:	f7f7 fd87 	bl	8000adc <__aeabi_dcmplt>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f af2f 	beq.w	8008e32 <_dtoa_r+0x47a>
 8008fd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fd6:	1e6b      	subs	r3, r5, #1
 8008fd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fde:	2b30      	cmp	r3, #48	; 0x30
 8008fe0:	d0f8      	beq.n	8008fd4 <_dtoa_r+0x61c>
 8008fe2:	46bb      	mov	fp, r7
 8008fe4:	e04a      	b.n	800907c <_dtoa_r+0x6c4>
 8008fe6:	4b06      	ldr	r3, [pc, #24]	; (8009000 <_dtoa_r+0x648>)
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	4680      	mov	r8, r0
 8008fee:	4689      	mov	r9, r1
 8008ff0:	e7bd      	b.n	8008f6e <_dtoa_r+0x5b6>
 8008ff2:	bf00      	nop
 8008ff4:	0800c3d8 	.word	0x0800c3d8
 8008ff8:	0800c3b0 	.word	0x0800c3b0
 8008ffc:	3ff00000 	.word	0x3ff00000
 8009000:	40240000 	.word	0x40240000
 8009004:	401c0000 	.word	0x401c0000
 8009008:	40140000 	.word	0x40140000
 800900c:	3fe00000 	.word	0x3fe00000
 8009010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009014:	9d00      	ldr	r5, [sp, #0]
 8009016:	4642      	mov	r2, r8
 8009018:	464b      	mov	r3, r9
 800901a:	4630      	mov	r0, r6
 800901c:	4639      	mov	r1, r7
 800901e:	f7f7 fc15 	bl	800084c <__aeabi_ddiv>
 8009022:	f7f7 fd99 	bl	8000b58 <__aeabi_d2iz>
 8009026:	9001      	str	r0, [sp, #4]
 8009028:	f7f7 fa7c 	bl	8000524 <__aeabi_i2d>
 800902c:	4642      	mov	r2, r8
 800902e:	464b      	mov	r3, r9
 8009030:	f7f7 fae2 	bl	80005f8 <__aeabi_dmul>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	f7f7 f924 	bl	8000288 <__aeabi_dsub>
 8009040:	9e01      	ldr	r6, [sp, #4]
 8009042:	9f04      	ldr	r7, [sp, #16]
 8009044:	3630      	adds	r6, #48	; 0x30
 8009046:	f805 6b01 	strb.w	r6, [r5], #1
 800904a:	9e00      	ldr	r6, [sp, #0]
 800904c:	1bae      	subs	r6, r5, r6
 800904e:	42b7      	cmp	r7, r6
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	d134      	bne.n	80090c0 <_dtoa_r+0x708>
 8009056:	f7f7 f919 	bl	800028c <__adddf3>
 800905a:	4642      	mov	r2, r8
 800905c:	464b      	mov	r3, r9
 800905e:	4606      	mov	r6, r0
 8009060:	460f      	mov	r7, r1
 8009062:	f7f7 fd59 	bl	8000b18 <__aeabi_dcmpgt>
 8009066:	b9c8      	cbnz	r0, 800909c <_dtoa_r+0x6e4>
 8009068:	4642      	mov	r2, r8
 800906a:	464b      	mov	r3, r9
 800906c:	4630      	mov	r0, r6
 800906e:	4639      	mov	r1, r7
 8009070:	f7f7 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009074:	b110      	cbz	r0, 800907c <_dtoa_r+0x6c4>
 8009076:	9b01      	ldr	r3, [sp, #4]
 8009078:	07db      	lsls	r3, r3, #31
 800907a:	d40f      	bmi.n	800909c <_dtoa_r+0x6e4>
 800907c:	4651      	mov	r1, sl
 800907e:	4620      	mov	r0, r4
 8009080:	f000 ff36 	bl	8009ef0 <_Bfree>
 8009084:	2300      	movs	r3, #0
 8009086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009088:	702b      	strb	r3, [r5, #0]
 800908a:	f10b 0301 	add.w	r3, fp, #1
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009092:	2b00      	cmp	r3, #0
 8009094:	f43f ace2 	beq.w	8008a5c <_dtoa_r+0xa4>
 8009098:	601d      	str	r5, [r3, #0]
 800909a:	e4df      	b.n	8008a5c <_dtoa_r+0xa4>
 800909c:	465f      	mov	r7, fp
 800909e:	462b      	mov	r3, r5
 80090a0:	461d      	mov	r5, r3
 80090a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090a6:	2a39      	cmp	r2, #57	; 0x39
 80090a8:	d106      	bne.n	80090b8 <_dtoa_r+0x700>
 80090aa:	9a00      	ldr	r2, [sp, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d1f7      	bne.n	80090a0 <_dtoa_r+0x6e8>
 80090b0:	9900      	ldr	r1, [sp, #0]
 80090b2:	2230      	movs	r2, #48	; 0x30
 80090b4:	3701      	adds	r7, #1
 80090b6:	700a      	strb	r2, [r1, #0]
 80090b8:	781a      	ldrb	r2, [r3, #0]
 80090ba:	3201      	adds	r2, #1
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e790      	b.n	8008fe2 <_dtoa_r+0x62a>
 80090c0:	4ba3      	ldr	r3, [pc, #652]	; (8009350 <_dtoa_r+0x998>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	f7f7 fa98 	bl	80005f8 <__aeabi_dmul>
 80090c8:	2200      	movs	r2, #0
 80090ca:	2300      	movs	r3, #0
 80090cc:	4606      	mov	r6, r0
 80090ce:	460f      	mov	r7, r1
 80090d0:	f7f7 fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d09e      	beq.n	8009016 <_dtoa_r+0x65e>
 80090d8:	e7d0      	b.n	800907c <_dtoa_r+0x6c4>
 80090da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090dc:	2a00      	cmp	r2, #0
 80090de:	f000 80ca 	beq.w	8009276 <_dtoa_r+0x8be>
 80090e2:	9a07      	ldr	r2, [sp, #28]
 80090e4:	2a01      	cmp	r2, #1
 80090e6:	f300 80ad 	bgt.w	8009244 <_dtoa_r+0x88c>
 80090ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090ec:	2a00      	cmp	r2, #0
 80090ee:	f000 80a5 	beq.w	800923c <_dtoa_r+0x884>
 80090f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090f6:	9e08      	ldr	r6, [sp, #32]
 80090f8:	9d05      	ldr	r5, [sp, #20]
 80090fa:	9a05      	ldr	r2, [sp, #20]
 80090fc:	441a      	add	r2, r3
 80090fe:	9205      	str	r2, [sp, #20]
 8009100:	9a06      	ldr	r2, [sp, #24]
 8009102:	2101      	movs	r1, #1
 8009104:	441a      	add	r2, r3
 8009106:	4620      	mov	r0, r4
 8009108:	9206      	str	r2, [sp, #24]
 800910a:	f000 fff1 	bl	800a0f0 <__i2b>
 800910e:	4607      	mov	r7, r0
 8009110:	b165      	cbz	r5, 800912c <_dtoa_r+0x774>
 8009112:	9b06      	ldr	r3, [sp, #24]
 8009114:	2b00      	cmp	r3, #0
 8009116:	dd09      	ble.n	800912c <_dtoa_r+0x774>
 8009118:	42ab      	cmp	r3, r5
 800911a:	9a05      	ldr	r2, [sp, #20]
 800911c:	bfa8      	it	ge
 800911e:	462b      	movge	r3, r5
 8009120:	1ad2      	subs	r2, r2, r3
 8009122:	9205      	str	r2, [sp, #20]
 8009124:	9a06      	ldr	r2, [sp, #24]
 8009126:	1aed      	subs	r5, r5, r3
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	9306      	str	r3, [sp, #24]
 800912c:	9b08      	ldr	r3, [sp, #32]
 800912e:	b1f3      	cbz	r3, 800916e <_dtoa_r+0x7b6>
 8009130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 80a3 	beq.w	800927e <_dtoa_r+0x8c6>
 8009138:	2e00      	cmp	r6, #0
 800913a:	dd10      	ble.n	800915e <_dtoa_r+0x7a6>
 800913c:	4639      	mov	r1, r7
 800913e:	4632      	mov	r2, r6
 8009140:	4620      	mov	r0, r4
 8009142:	f001 f895 	bl	800a270 <__pow5mult>
 8009146:	4652      	mov	r2, sl
 8009148:	4601      	mov	r1, r0
 800914a:	4607      	mov	r7, r0
 800914c:	4620      	mov	r0, r4
 800914e:	f000 ffe5 	bl	800a11c <__multiply>
 8009152:	4651      	mov	r1, sl
 8009154:	4680      	mov	r8, r0
 8009156:	4620      	mov	r0, r4
 8009158:	f000 feca 	bl	8009ef0 <_Bfree>
 800915c:	46c2      	mov	sl, r8
 800915e:	9b08      	ldr	r3, [sp, #32]
 8009160:	1b9a      	subs	r2, r3, r6
 8009162:	d004      	beq.n	800916e <_dtoa_r+0x7b6>
 8009164:	4651      	mov	r1, sl
 8009166:	4620      	mov	r0, r4
 8009168:	f001 f882 	bl	800a270 <__pow5mult>
 800916c:	4682      	mov	sl, r0
 800916e:	2101      	movs	r1, #1
 8009170:	4620      	mov	r0, r4
 8009172:	f000 ffbd 	bl	800a0f0 <__i2b>
 8009176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009178:	2b00      	cmp	r3, #0
 800917a:	4606      	mov	r6, r0
 800917c:	f340 8081 	ble.w	8009282 <_dtoa_r+0x8ca>
 8009180:	461a      	mov	r2, r3
 8009182:	4601      	mov	r1, r0
 8009184:	4620      	mov	r0, r4
 8009186:	f001 f873 	bl	800a270 <__pow5mult>
 800918a:	9b07      	ldr	r3, [sp, #28]
 800918c:	2b01      	cmp	r3, #1
 800918e:	4606      	mov	r6, r0
 8009190:	dd7a      	ble.n	8009288 <_dtoa_r+0x8d0>
 8009192:	f04f 0800 	mov.w	r8, #0
 8009196:	6933      	ldr	r3, [r6, #16]
 8009198:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800919c:	6918      	ldr	r0, [r3, #16]
 800919e:	f000 ff59 	bl	800a054 <__hi0bits>
 80091a2:	f1c0 0020 	rsb	r0, r0, #32
 80091a6:	9b06      	ldr	r3, [sp, #24]
 80091a8:	4418      	add	r0, r3
 80091aa:	f010 001f 	ands.w	r0, r0, #31
 80091ae:	f000 8094 	beq.w	80092da <_dtoa_r+0x922>
 80091b2:	f1c0 0320 	rsb	r3, r0, #32
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	f340 8085 	ble.w	80092c6 <_dtoa_r+0x90e>
 80091bc:	9b05      	ldr	r3, [sp, #20]
 80091be:	f1c0 001c 	rsb	r0, r0, #28
 80091c2:	4403      	add	r3, r0
 80091c4:	9305      	str	r3, [sp, #20]
 80091c6:	9b06      	ldr	r3, [sp, #24]
 80091c8:	4403      	add	r3, r0
 80091ca:	4405      	add	r5, r0
 80091cc:	9306      	str	r3, [sp, #24]
 80091ce:	9b05      	ldr	r3, [sp, #20]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dd05      	ble.n	80091e0 <_dtoa_r+0x828>
 80091d4:	4651      	mov	r1, sl
 80091d6:	461a      	mov	r2, r3
 80091d8:	4620      	mov	r0, r4
 80091da:	f001 f8a3 	bl	800a324 <__lshift>
 80091de:	4682      	mov	sl, r0
 80091e0:	9b06      	ldr	r3, [sp, #24]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dd05      	ble.n	80091f2 <_dtoa_r+0x83a>
 80091e6:	4631      	mov	r1, r6
 80091e8:	461a      	mov	r2, r3
 80091ea:	4620      	mov	r0, r4
 80091ec:	f001 f89a 	bl	800a324 <__lshift>
 80091f0:	4606      	mov	r6, r0
 80091f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d072      	beq.n	80092de <_dtoa_r+0x926>
 80091f8:	4631      	mov	r1, r6
 80091fa:	4650      	mov	r0, sl
 80091fc:	f001 f8fe 	bl	800a3fc <__mcmp>
 8009200:	2800      	cmp	r0, #0
 8009202:	da6c      	bge.n	80092de <_dtoa_r+0x926>
 8009204:	2300      	movs	r3, #0
 8009206:	4651      	mov	r1, sl
 8009208:	220a      	movs	r2, #10
 800920a:	4620      	mov	r0, r4
 800920c:	f000 fe92 	bl	8009f34 <__multadd>
 8009210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009212:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009216:	4682      	mov	sl, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 81b0 	beq.w	800957e <_dtoa_r+0xbc6>
 800921e:	2300      	movs	r3, #0
 8009220:	4639      	mov	r1, r7
 8009222:	220a      	movs	r2, #10
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fe85 	bl	8009f34 <__multadd>
 800922a:	9b01      	ldr	r3, [sp, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	4607      	mov	r7, r0
 8009230:	f300 8096 	bgt.w	8009360 <_dtoa_r+0x9a8>
 8009234:	9b07      	ldr	r3, [sp, #28]
 8009236:	2b02      	cmp	r3, #2
 8009238:	dc59      	bgt.n	80092ee <_dtoa_r+0x936>
 800923a:	e091      	b.n	8009360 <_dtoa_r+0x9a8>
 800923c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800923e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009242:	e758      	b.n	80090f6 <_dtoa_r+0x73e>
 8009244:	9b04      	ldr	r3, [sp, #16]
 8009246:	1e5e      	subs	r6, r3, #1
 8009248:	9b08      	ldr	r3, [sp, #32]
 800924a:	42b3      	cmp	r3, r6
 800924c:	bfbf      	itttt	lt
 800924e:	9b08      	ldrlt	r3, [sp, #32]
 8009250:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009252:	9608      	strlt	r6, [sp, #32]
 8009254:	1af3      	sublt	r3, r6, r3
 8009256:	bfb4      	ite	lt
 8009258:	18d2      	addlt	r2, r2, r3
 800925a:	1b9e      	subge	r6, r3, r6
 800925c:	9b04      	ldr	r3, [sp, #16]
 800925e:	bfbc      	itt	lt
 8009260:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009262:	2600      	movlt	r6, #0
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfb7      	itett	lt
 8009268:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800926c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009270:	1a9d      	sublt	r5, r3, r2
 8009272:	2300      	movlt	r3, #0
 8009274:	e741      	b.n	80090fa <_dtoa_r+0x742>
 8009276:	9e08      	ldr	r6, [sp, #32]
 8009278:	9d05      	ldr	r5, [sp, #20]
 800927a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800927c:	e748      	b.n	8009110 <_dtoa_r+0x758>
 800927e:	9a08      	ldr	r2, [sp, #32]
 8009280:	e770      	b.n	8009164 <_dtoa_r+0x7ac>
 8009282:	9b07      	ldr	r3, [sp, #28]
 8009284:	2b01      	cmp	r3, #1
 8009286:	dc19      	bgt.n	80092bc <_dtoa_r+0x904>
 8009288:	9b02      	ldr	r3, [sp, #8]
 800928a:	b9bb      	cbnz	r3, 80092bc <_dtoa_r+0x904>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009292:	b99b      	cbnz	r3, 80092bc <_dtoa_r+0x904>
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800929a:	0d1b      	lsrs	r3, r3, #20
 800929c:	051b      	lsls	r3, r3, #20
 800929e:	b183      	cbz	r3, 80092c2 <_dtoa_r+0x90a>
 80092a0:	9b05      	ldr	r3, [sp, #20]
 80092a2:	3301      	adds	r3, #1
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	9b06      	ldr	r3, [sp, #24]
 80092a8:	3301      	adds	r3, #1
 80092aa:	9306      	str	r3, [sp, #24]
 80092ac:	f04f 0801 	mov.w	r8, #1
 80092b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f47f af6f 	bne.w	8009196 <_dtoa_r+0x7de>
 80092b8:	2001      	movs	r0, #1
 80092ba:	e774      	b.n	80091a6 <_dtoa_r+0x7ee>
 80092bc:	f04f 0800 	mov.w	r8, #0
 80092c0:	e7f6      	b.n	80092b0 <_dtoa_r+0x8f8>
 80092c2:	4698      	mov	r8, r3
 80092c4:	e7f4      	b.n	80092b0 <_dtoa_r+0x8f8>
 80092c6:	d082      	beq.n	80091ce <_dtoa_r+0x816>
 80092c8:	9a05      	ldr	r2, [sp, #20]
 80092ca:	331c      	adds	r3, #28
 80092cc:	441a      	add	r2, r3
 80092ce:	9205      	str	r2, [sp, #20]
 80092d0:	9a06      	ldr	r2, [sp, #24]
 80092d2:	441a      	add	r2, r3
 80092d4:	441d      	add	r5, r3
 80092d6:	9206      	str	r2, [sp, #24]
 80092d8:	e779      	b.n	80091ce <_dtoa_r+0x816>
 80092da:	4603      	mov	r3, r0
 80092dc:	e7f4      	b.n	80092c8 <_dtoa_r+0x910>
 80092de:	9b04      	ldr	r3, [sp, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	dc37      	bgt.n	8009354 <_dtoa_r+0x99c>
 80092e4:	9b07      	ldr	r3, [sp, #28]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	dd34      	ble.n	8009354 <_dtoa_r+0x99c>
 80092ea:	9b04      	ldr	r3, [sp, #16]
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	b963      	cbnz	r3, 800930c <_dtoa_r+0x954>
 80092f2:	4631      	mov	r1, r6
 80092f4:	2205      	movs	r2, #5
 80092f6:	4620      	mov	r0, r4
 80092f8:	f000 fe1c 	bl	8009f34 <__multadd>
 80092fc:	4601      	mov	r1, r0
 80092fe:	4606      	mov	r6, r0
 8009300:	4650      	mov	r0, sl
 8009302:	f001 f87b 	bl	800a3fc <__mcmp>
 8009306:	2800      	cmp	r0, #0
 8009308:	f73f adbb 	bgt.w	8008e82 <_dtoa_r+0x4ca>
 800930c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800930e:	9d00      	ldr	r5, [sp, #0]
 8009310:	ea6f 0b03 	mvn.w	fp, r3
 8009314:	f04f 0800 	mov.w	r8, #0
 8009318:	4631      	mov	r1, r6
 800931a:	4620      	mov	r0, r4
 800931c:	f000 fde8 	bl	8009ef0 <_Bfree>
 8009320:	2f00      	cmp	r7, #0
 8009322:	f43f aeab 	beq.w	800907c <_dtoa_r+0x6c4>
 8009326:	f1b8 0f00 	cmp.w	r8, #0
 800932a:	d005      	beq.n	8009338 <_dtoa_r+0x980>
 800932c:	45b8      	cmp	r8, r7
 800932e:	d003      	beq.n	8009338 <_dtoa_r+0x980>
 8009330:	4641      	mov	r1, r8
 8009332:	4620      	mov	r0, r4
 8009334:	f000 fddc 	bl	8009ef0 <_Bfree>
 8009338:	4639      	mov	r1, r7
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fdd8 	bl	8009ef0 <_Bfree>
 8009340:	e69c      	b.n	800907c <_dtoa_r+0x6c4>
 8009342:	2600      	movs	r6, #0
 8009344:	4637      	mov	r7, r6
 8009346:	e7e1      	b.n	800930c <_dtoa_r+0x954>
 8009348:	46bb      	mov	fp, r7
 800934a:	4637      	mov	r7, r6
 800934c:	e599      	b.n	8008e82 <_dtoa_r+0x4ca>
 800934e:	bf00      	nop
 8009350:	40240000 	.word	0x40240000
 8009354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 80c8 	beq.w	80094ec <_dtoa_r+0xb34>
 800935c:	9b04      	ldr	r3, [sp, #16]
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	2d00      	cmp	r5, #0
 8009362:	dd05      	ble.n	8009370 <_dtoa_r+0x9b8>
 8009364:	4639      	mov	r1, r7
 8009366:	462a      	mov	r2, r5
 8009368:	4620      	mov	r0, r4
 800936a:	f000 ffdb 	bl	800a324 <__lshift>
 800936e:	4607      	mov	r7, r0
 8009370:	f1b8 0f00 	cmp.w	r8, #0
 8009374:	d05b      	beq.n	800942e <_dtoa_r+0xa76>
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	4620      	mov	r0, r4
 800937a:	f000 fd79 	bl	8009e70 <_Balloc>
 800937e:	4605      	mov	r5, r0
 8009380:	b928      	cbnz	r0, 800938e <_dtoa_r+0x9d6>
 8009382:	4b83      	ldr	r3, [pc, #524]	; (8009590 <_dtoa_r+0xbd8>)
 8009384:	4602      	mov	r2, r0
 8009386:	f240 21ef 	movw	r1, #751	; 0x2ef
 800938a:	f7ff bb2e 	b.w	80089ea <_dtoa_r+0x32>
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	3202      	adds	r2, #2
 8009392:	0092      	lsls	r2, r2, #2
 8009394:	f107 010c 	add.w	r1, r7, #12
 8009398:	300c      	adds	r0, #12
 800939a:	f7ff fa6c 	bl	8008876 <memcpy>
 800939e:	2201      	movs	r2, #1
 80093a0:	4629      	mov	r1, r5
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 ffbe 	bl	800a324 <__lshift>
 80093a8:	9b00      	ldr	r3, [sp, #0]
 80093aa:	3301      	adds	r3, #1
 80093ac:	9304      	str	r3, [sp, #16]
 80093ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093b2:	4413      	add	r3, r2
 80093b4:	9308      	str	r3, [sp, #32]
 80093b6:	9b02      	ldr	r3, [sp, #8]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	46b8      	mov	r8, r7
 80093be:	9306      	str	r3, [sp, #24]
 80093c0:	4607      	mov	r7, r0
 80093c2:	9b04      	ldr	r3, [sp, #16]
 80093c4:	4631      	mov	r1, r6
 80093c6:	3b01      	subs	r3, #1
 80093c8:	4650      	mov	r0, sl
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	f7ff fa6c 	bl	80088a8 <quorem>
 80093d0:	4641      	mov	r1, r8
 80093d2:	9002      	str	r0, [sp, #8]
 80093d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093d8:	4650      	mov	r0, sl
 80093da:	f001 f80f 	bl	800a3fc <__mcmp>
 80093de:	463a      	mov	r2, r7
 80093e0:	9005      	str	r0, [sp, #20]
 80093e2:	4631      	mov	r1, r6
 80093e4:	4620      	mov	r0, r4
 80093e6:	f001 f825 	bl	800a434 <__mdiff>
 80093ea:	68c2      	ldr	r2, [r0, #12]
 80093ec:	4605      	mov	r5, r0
 80093ee:	bb02      	cbnz	r2, 8009432 <_dtoa_r+0xa7a>
 80093f0:	4601      	mov	r1, r0
 80093f2:	4650      	mov	r0, sl
 80093f4:	f001 f802 	bl	800a3fc <__mcmp>
 80093f8:	4602      	mov	r2, r0
 80093fa:	4629      	mov	r1, r5
 80093fc:	4620      	mov	r0, r4
 80093fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009400:	f000 fd76 	bl	8009ef0 <_Bfree>
 8009404:	9b07      	ldr	r3, [sp, #28]
 8009406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009408:	9d04      	ldr	r5, [sp, #16]
 800940a:	ea43 0102 	orr.w	r1, r3, r2
 800940e:	9b06      	ldr	r3, [sp, #24]
 8009410:	4319      	orrs	r1, r3
 8009412:	d110      	bne.n	8009436 <_dtoa_r+0xa7e>
 8009414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009418:	d029      	beq.n	800946e <_dtoa_r+0xab6>
 800941a:	9b05      	ldr	r3, [sp, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	dd02      	ble.n	8009426 <_dtoa_r+0xa6e>
 8009420:	9b02      	ldr	r3, [sp, #8]
 8009422:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009426:	9b01      	ldr	r3, [sp, #4]
 8009428:	f883 9000 	strb.w	r9, [r3]
 800942c:	e774      	b.n	8009318 <_dtoa_r+0x960>
 800942e:	4638      	mov	r0, r7
 8009430:	e7ba      	b.n	80093a8 <_dtoa_r+0x9f0>
 8009432:	2201      	movs	r2, #1
 8009434:	e7e1      	b.n	80093fa <_dtoa_r+0xa42>
 8009436:	9b05      	ldr	r3, [sp, #20]
 8009438:	2b00      	cmp	r3, #0
 800943a:	db04      	blt.n	8009446 <_dtoa_r+0xa8e>
 800943c:	9907      	ldr	r1, [sp, #28]
 800943e:	430b      	orrs	r3, r1
 8009440:	9906      	ldr	r1, [sp, #24]
 8009442:	430b      	orrs	r3, r1
 8009444:	d120      	bne.n	8009488 <_dtoa_r+0xad0>
 8009446:	2a00      	cmp	r2, #0
 8009448:	dded      	ble.n	8009426 <_dtoa_r+0xa6e>
 800944a:	4651      	mov	r1, sl
 800944c:	2201      	movs	r2, #1
 800944e:	4620      	mov	r0, r4
 8009450:	f000 ff68 	bl	800a324 <__lshift>
 8009454:	4631      	mov	r1, r6
 8009456:	4682      	mov	sl, r0
 8009458:	f000 ffd0 	bl	800a3fc <__mcmp>
 800945c:	2800      	cmp	r0, #0
 800945e:	dc03      	bgt.n	8009468 <_dtoa_r+0xab0>
 8009460:	d1e1      	bne.n	8009426 <_dtoa_r+0xa6e>
 8009462:	f019 0f01 	tst.w	r9, #1
 8009466:	d0de      	beq.n	8009426 <_dtoa_r+0xa6e>
 8009468:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800946c:	d1d8      	bne.n	8009420 <_dtoa_r+0xa68>
 800946e:	9a01      	ldr	r2, [sp, #4]
 8009470:	2339      	movs	r3, #57	; 0x39
 8009472:	7013      	strb	r3, [r2, #0]
 8009474:	462b      	mov	r3, r5
 8009476:	461d      	mov	r5, r3
 8009478:	3b01      	subs	r3, #1
 800947a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800947e:	2a39      	cmp	r2, #57	; 0x39
 8009480:	d06c      	beq.n	800955c <_dtoa_r+0xba4>
 8009482:	3201      	adds	r2, #1
 8009484:	701a      	strb	r2, [r3, #0]
 8009486:	e747      	b.n	8009318 <_dtoa_r+0x960>
 8009488:	2a00      	cmp	r2, #0
 800948a:	dd07      	ble.n	800949c <_dtoa_r+0xae4>
 800948c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009490:	d0ed      	beq.n	800946e <_dtoa_r+0xab6>
 8009492:	9a01      	ldr	r2, [sp, #4]
 8009494:	f109 0301 	add.w	r3, r9, #1
 8009498:	7013      	strb	r3, [r2, #0]
 800949a:	e73d      	b.n	8009318 <_dtoa_r+0x960>
 800949c:	9b04      	ldr	r3, [sp, #16]
 800949e:	9a08      	ldr	r2, [sp, #32]
 80094a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d043      	beq.n	8009530 <_dtoa_r+0xb78>
 80094a8:	4651      	mov	r1, sl
 80094aa:	2300      	movs	r3, #0
 80094ac:	220a      	movs	r2, #10
 80094ae:	4620      	mov	r0, r4
 80094b0:	f000 fd40 	bl	8009f34 <__multadd>
 80094b4:	45b8      	cmp	r8, r7
 80094b6:	4682      	mov	sl, r0
 80094b8:	f04f 0300 	mov.w	r3, #0
 80094bc:	f04f 020a 	mov.w	r2, #10
 80094c0:	4641      	mov	r1, r8
 80094c2:	4620      	mov	r0, r4
 80094c4:	d107      	bne.n	80094d6 <_dtoa_r+0xb1e>
 80094c6:	f000 fd35 	bl	8009f34 <__multadd>
 80094ca:	4680      	mov	r8, r0
 80094cc:	4607      	mov	r7, r0
 80094ce:	9b04      	ldr	r3, [sp, #16]
 80094d0:	3301      	adds	r3, #1
 80094d2:	9304      	str	r3, [sp, #16]
 80094d4:	e775      	b.n	80093c2 <_dtoa_r+0xa0a>
 80094d6:	f000 fd2d 	bl	8009f34 <__multadd>
 80094da:	4639      	mov	r1, r7
 80094dc:	4680      	mov	r8, r0
 80094de:	2300      	movs	r3, #0
 80094e0:	220a      	movs	r2, #10
 80094e2:	4620      	mov	r0, r4
 80094e4:	f000 fd26 	bl	8009f34 <__multadd>
 80094e8:	4607      	mov	r7, r0
 80094ea:	e7f0      	b.n	80094ce <_dtoa_r+0xb16>
 80094ec:	9b04      	ldr	r3, [sp, #16]
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	9d00      	ldr	r5, [sp, #0]
 80094f2:	4631      	mov	r1, r6
 80094f4:	4650      	mov	r0, sl
 80094f6:	f7ff f9d7 	bl	80088a8 <quorem>
 80094fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094fe:	9b00      	ldr	r3, [sp, #0]
 8009500:	f805 9b01 	strb.w	r9, [r5], #1
 8009504:	1aea      	subs	r2, r5, r3
 8009506:	9b01      	ldr	r3, [sp, #4]
 8009508:	4293      	cmp	r3, r2
 800950a:	dd07      	ble.n	800951c <_dtoa_r+0xb64>
 800950c:	4651      	mov	r1, sl
 800950e:	2300      	movs	r3, #0
 8009510:	220a      	movs	r2, #10
 8009512:	4620      	mov	r0, r4
 8009514:	f000 fd0e 	bl	8009f34 <__multadd>
 8009518:	4682      	mov	sl, r0
 800951a:	e7ea      	b.n	80094f2 <_dtoa_r+0xb3a>
 800951c:	9b01      	ldr	r3, [sp, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	bfc8      	it	gt
 8009522:	461d      	movgt	r5, r3
 8009524:	9b00      	ldr	r3, [sp, #0]
 8009526:	bfd8      	it	le
 8009528:	2501      	movle	r5, #1
 800952a:	441d      	add	r5, r3
 800952c:	f04f 0800 	mov.w	r8, #0
 8009530:	4651      	mov	r1, sl
 8009532:	2201      	movs	r2, #1
 8009534:	4620      	mov	r0, r4
 8009536:	f000 fef5 	bl	800a324 <__lshift>
 800953a:	4631      	mov	r1, r6
 800953c:	4682      	mov	sl, r0
 800953e:	f000 ff5d 	bl	800a3fc <__mcmp>
 8009542:	2800      	cmp	r0, #0
 8009544:	dc96      	bgt.n	8009474 <_dtoa_r+0xabc>
 8009546:	d102      	bne.n	800954e <_dtoa_r+0xb96>
 8009548:	f019 0f01 	tst.w	r9, #1
 800954c:	d192      	bne.n	8009474 <_dtoa_r+0xabc>
 800954e:	462b      	mov	r3, r5
 8009550:	461d      	mov	r5, r3
 8009552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009556:	2a30      	cmp	r2, #48	; 0x30
 8009558:	d0fa      	beq.n	8009550 <_dtoa_r+0xb98>
 800955a:	e6dd      	b.n	8009318 <_dtoa_r+0x960>
 800955c:	9a00      	ldr	r2, [sp, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d189      	bne.n	8009476 <_dtoa_r+0xabe>
 8009562:	f10b 0b01 	add.w	fp, fp, #1
 8009566:	2331      	movs	r3, #49	; 0x31
 8009568:	e796      	b.n	8009498 <_dtoa_r+0xae0>
 800956a:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <_dtoa_r+0xbdc>)
 800956c:	f7ff ba99 	b.w	8008aa2 <_dtoa_r+0xea>
 8009570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009572:	2b00      	cmp	r3, #0
 8009574:	f47f aa6d 	bne.w	8008a52 <_dtoa_r+0x9a>
 8009578:	4b07      	ldr	r3, [pc, #28]	; (8009598 <_dtoa_r+0xbe0>)
 800957a:	f7ff ba92 	b.w	8008aa2 <_dtoa_r+0xea>
 800957e:	9b01      	ldr	r3, [sp, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	dcb5      	bgt.n	80094f0 <_dtoa_r+0xb38>
 8009584:	9b07      	ldr	r3, [sp, #28]
 8009586:	2b02      	cmp	r3, #2
 8009588:	f73f aeb1 	bgt.w	80092ee <_dtoa_r+0x936>
 800958c:	e7b0      	b.n	80094f0 <_dtoa_r+0xb38>
 800958e:	bf00      	nop
 8009590:	0800c2e0 	.word	0x0800c2e0
 8009594:	0800c238 	.word	0x0800c238
 8009598:	0800c264 	.word	0x0800c264

0800959c <_free_r>:
 800959c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800959e:	2900      	cmp	r1, #0
 80095a0:	d044      	beq.n	800962c <_free_r+0x90>
 80095a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095a6:	9001      	str	r0, [sp, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f1a1 0404 	sub.w	r4, r1, #4
 80095ae:	bfb8      	it	lt
 80095b0:	18e4      	addlt	r4, r4, r3
 80095b2:	f000 fc51 	bl	8009e58 <__malloc_lock>
 80095b6:	4a1e      	ldr	r2, [pc, #120]	; (8009630 <_free_r+0x94>)
 80095b8:	9801      	ldr	r0, [sp, #4]
 80095ba:	6813      	ldr	r3, [r2, #0]
 80095bc:	b933      	cbnz	r3, 80095cc <_free_r+0x30>
 80095be:	6063      	str	r3, [r4, #4]
 80095c0:	6014      	str	r4, [r2, #0]
 80095c2:	b003      	add	sp, #12
 80095c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095c8:	f000 bc4c 	b.w	8009e64 <__malloc_unlock>
 80095cc:	42a3      	cmp	r3, r4
 80095ce:	d908      	bls.n	80095e2 <_free_r+0x46>
 80095d0:	6825      	ldr	r5, [r4, #0]
 80095d2:	1961      	adds	r1, r4, r5
 80095d4:	428b      	cmp	r3, r1
 80095d6:	bf01      	itttt	eq
 80095d8:	6819      	ldreq	r1, [r3, #0]
 80095da:	685b      	ldreq	r3, [r3, #4]
 80095dc:	1949      	addeq	r1, r1, r5
 80095de:	6021      	streq	r1, [r4, #0]
 80095e0:	e7ed      	b.n	80095be <_free_r+0x22>
 80095e2:	461a      	mov	r2, r3
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	b10b      	cbz	r3, 80095ec <_free_r+0x50>
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	d9fa      	bls.n	80095e2 <_free_r+0x46>
 80095ec:	6811      	ldr	r1, [r2, #0]
 80095ee:	1855      	adds	r5, r2, r1
 80095f0:	42a5      	cmp	r5, r4
 80095f2:	d10b      	bne.n	800960c <_free_r+0x70>
 80095f4:	6824      	ldr	r4, [r4, #0]
 80095f6:	4421      	add	r1, r4
 80095f8:	1854      	adds	r4, r2, r1
 80095fa:	42a3      	cmp	r3, r4
 80095fc:	6011      	str	r1, [r2, #0]
 80095fe:	d1e0      	bne.n	80095c2 <_free_r+0x26>
 8009600:	681c      	ldr	r4, [r3, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	6053      	str	r3, [r2, #4]
 8009606:	440c      	add	r4, r1
 8009608:	6014      	str	r4, [r2, #0]
 800960a:	e7da      	b.n	80095c2 <_free_r+0x26>
 800960c:	d902      	bls.n	8009614 <_free_r+0x78>
 800960e:	230c      	movs	r3, #12
 8009610:	6003      	str	r3, [r0, #0]
 8009612:	e7d6      	b.n	80095c2 <_free_r+0x26>
 8009614:	6825      	ldr	r5, [r4, #0]
 8009616:	1961      	adds	r1, r4, r5
 8009618:	428b      	cmp	r3, r1
 800961a:	bf04      	itt	eq
 800961c:	6819      	ldreq	r1, [r3, #0]
 800961e:	685b      	ldreq	r3, [r3, #4]
 8009620:	6063      	str	r3, [r4, #4]
 8009622:	bf04      	itt	eq
 8009624:	1949      	addeq	r1, r1, r5
 8009626:	6021      	streq	r1, [r4, #0]
 8009628:	6054      	str	r4, [r2, #4]
 800962a:	e7ca      	b.n	80095c2 <_free_r+0x26>
 800962c:	b003      	add	sp, #12
 800962e:	bd30      	pop	{r4, r5, pc}
 8009630:	20000588 	.word	0x20000588

08009634 <rshift>:
 8009634:	6903      	ldr	r3, [r0, #16]
 8009636:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800963a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800963e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009642:	f100 0414 	add.w	r4, r0, #20
 8009646:	dd45      	ble.n	80096d4 <rshift+0xa0>
 8009648:	f011 011f 	ands.w	r1, r1, #31
 800964c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009650:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009654:	d10c      	bne.n	8009670 <rshift+0x3c>
 8009656:	f100 0710 	add.w	r7, r0, #16
 800965a:	4629      	mov	r1, r5
 800965c:	42b1      	cmp	r1, r6
 800965e:	d334      	bcc.n	80096ca <rshift+0x96>
 8009660:	1a9b      	subs	r3, r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	1eea      	subs	r2, r5, #3
 8009666:	4296      	cmp	r6, r2
 8009668:	bf38      	it	cc
 800966a:	2300      	movcc	r3, #0
 800966c:	4423      	add	r3, r4
 800966e:	e015      	b.n	800969c <rshift+0x68>
 8009670:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009674:	f1c1 0820 	rsb	r8, r1, #32
 8009678:	40cf      	lsrs	r7, r1
 800967a:	f105 0e04 	add.w	lr, r5, #4
 800967e:	46a1      	mov	r9, r4
 8009680:	4576      	cmp	r6, lr
 8009682:	46f4      	mov	ip, lr
 8009684:	d815      	bhi.n	80096b2 <rshift+0x7e>
 8009686:	1a9a      	subs	r2, r3, r2
 8009688:	0092      	lsls	r2, r2, #2
 800968a:	3a04      	subs	r2, #4
 800968c:	3501      	adds	r5, #1
 800968e:	42ae      	cmp	r6, r5
 8009690:	bf38      	it	cc
 8009692:	2200      	movcc	r2, #0
 8009694:	18a3      	adds	r3, r4, r2
 8009696:	50a7      	str	r7, [r4, r2]
 8009698:	b107      	cbz	r7, 800969c <rshift+0x68>
 800969a:	3304      	adds	r3, #4
 800969c:	1b1a      	subs	r2, r3, r4
 800969e:	42a3      	cmp	r3, r4
 80096a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80096a4:	bf08      	it	eq
 80096a6:	2300      	moveq	r3, #0
 80096a8:	6102      	str	r2, [r0, #16]
 80096aa:	bf08      	it	eq
 80096ac:	6143      	streq	r3, [r0, #20]
 80096ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096b2:	f8dc c000 	ldr.w	ip, [ip]
 80096b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80096ba:	ea4c 0707 	orr.w	r7, ip, r7
 80096be:	f849 7b04 	str.w	r7, [r9], #4
 80096c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80096c6:	40cf      	lsrs	r7, r1
 80096c8:	e7da      	b.n	8009680 <rshift+0x4c>
 80096ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80096ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80096d2:	e7c3      	b.n	800965c <rshift+0x28>
 80096d4:	4623      	mov	r3, r4
 80096d6:	e7e1      	b.n	800969c <rshift+0x68>

080096d8 <__hexdig_fun>:
 80096d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80096dc:	2b09      	cmp	r3, #9
 80096de:	d802      	bhi.n	80096e6 <__hexdig_fun+0xe>
 80096e0:	3820      	subs	r0, #32
 80096e2:	b2c0      	uxtb	r0, r0
 80096e4:	4770      	bx	lr
 80096e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80096ea:	2b05      	cmp	r3, #5
 80096ec:	d801      	bhi.n	80096f2 <__hexdig_fun+0x1a>
 80096ee:	3847      	subs	r0, #71	; 0x47
 80096f0:	e7f7      	b.n	80096e2 <__hexdig_fun+0xa>
 80096f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	d801      	bhi.n	80096fe <__hexdig_fun+0x26>
 80096fa:	3827      	subs	r0, #39	; 0x27
 80096fc:	e7f1      	b.n	80096e2 <__hexdig_fun+0xa>
 80096fe:	2000      	movs	r0, #0
 8009700:	4770      	bx	lr
	...

08009704 <__gethex>:
 8009704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009708:	4617      	mov	r7, r2
 800970a:	680a      	ldr	r2, [r1, #0]
 800970c:	b085      	sub	sp, #20
 800970e:	f102 0b02 	add.w	fp, r2, #2
 8009712:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009716:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800971a:	4681      	mov	r9, r0
 800971c:	468a      	mov	sl, r1
 800971e:	9302      	str	r3, [sp, #8]
 8009720:	32fe      	adds	r2, #254	; 0xfe
 8009722:	eb02 030b 	add.w	r3, r2, fp
 8009726:	46d8      	mov	r8, fp
 8009728:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	2830      	cmp	r0, #48	; 0x30
 8009730:	d0f7      	beq.n	8009722 <__gethex+0x1e>
 8009732:	f7ff ffd1 	bl	80096d8 <__hexdig_fun>
 8009736:	4604      	mov	r4, r0
 8009738:	2800      	cmp	r0, #0
 800973a:	d138      	bne.n	80097ae <__gethex+0xaa>
 800973c:	49a7      	ldr	r1, [pc, #668]	; (80099dc <__gethex+0x2d8>)
 800973e:	2201      	movs	r2, #1
 8009740:	4640      	mov	r0, r8
 8009742:	f7fe fff9 	bl	8008738 <strncmp>
 8009746:	4606      	mov	r6, r0
 8009748:	2800      	cmp	r0, #0
 800974a:	d169      	bne.n	8009820 <__gethex+0x11c>
 800974c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009750:	465d      	mov	r5, fp
 8009752:	f7ff ffc1 	bl	80096d8 <__hexdig_fun>
 8009756:	2800      	cmp	r0, #0
 8009758:	d064      	beq.n	8009824 <__gethex+0x120>
 800975a:	465a      	mov	r2, fp
 800975c:	7810      	ldrb	r0, [r2, #0]
 800975e:	2830      	cmp	r0, #48	; 0x30
 8009760:	4690      	mov	r8, r2
 8009762:	f102 0201 	add.w	r2, r2, #1
 8009766:	d0f9      	beq.n	800975c <__gethex+0x58>
 8009768:	f7ff ffb6 	bl	80096d8 <__hexdig_fun>
 800976c:	2301      	movs	r3, #1
 800976e:	fab0 f480 	clz	r4, r0
 8009772:	0964      	lsrs	r4, r4, #5
 8009774:	465e      	mov	r6, fp
 8009776:	9301      	str	r3, [sp, #4]
 8009778:	4642      	mov	r2, r8
 800977a:	4615      	mov	r5, r2
 800977c:	3201      	adds	r2, #1
 800977e:	7828      	ldrb	r0, [r5, #0]
 8009780:	f7ff ffaa 	bl	80096d8 <__hexdig_fun>
 8009784:	2800      	cmp	r0, #0
 8009786:	d1f8      	bne.n	800977a <__gethex+0x76>
 8009788:	4994      	ldr	r1, [pc, #592]	; (80099dc <__gethex+0x2d8>)
 800978a:	2201      	movs	r2, #1
 800978c:	4628      	mov	r0, r5
 800978e:	f7fe ffd3 	bl	8008738 <strncmp>
 8009792:	b978      	cbnz	r0, 80097b4 <__gethex+0xb0>
 8009794:	b946      	cbnz	r6, 80097a8 <__gethex+0xa4>
 8009796:	1c6e      	adds	r6, r5, #1
 8009798:	4632      	mov	r2, r6
 800979a:	4615      	mov	r5, r2
 800979c:	3201      	adds	r2, #1
 800979e:	7828      	ldrb	r0, [r5, #0]
 80097a0:	f7ff ff9a 	bl	80096d8 <__hexdig_fun>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d1f8      	bne.n	800979a <__gethex+0x96>
 80097a8:	1b73      	subs	r3, r6, r5
 80097aa:	009e      	lsls	r6, r3, #2
 80097ac:	e004      	b.n	80097b8 <__gethex+0xb4>
 80097ae:	2400      	movs	r4, #0
 80097b0:	4626      	mov	r6, r4
 80097b2:	e7e1      	b.n	8009778 <__gethex+0x74>
 80097b4:	2e00      	cmp	r6, #0
 80097b6:	d1f7      	bne.n	80097a8 <__gethex+0xa4>
 80097b8:	782b      	ldrb	r3, [r5, #0]
 80097ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097be:	2b50      	cmp	r3, #80	; 0x50
 80097c0:	d13d      	bne.n	800983e <__gethex+0x13a>
 80097c2:	786b      	ldrb	r3, [r5, #1]
 80097c4:	2b2b      	cmp	r3, #43	; 0x2b
 80097c6:	d02f      	beq.n	8009828 <__gethex+0x124>
 80097c8:	2b2d      	cmp	r3, #45	; 0x2d
 80097ca:	d031      	beq.n	8009830 <__gethex+0x12c>
 80097cc:	1c69      	adds	r1, r5, #1
 80097ce:	f04f 0b00 	mov.w	fp, #0
 80097d2:	7808      	ldrb	r0, [r1, #0]
 80097d4:	f7ff ff80 	bl	80096d8 <__hexdig_fun>
 80097d8:	1e42      	subs	r2, r0, #1
 80097da:	b2d2      	uxtb	r2, r2
 80097dc:	2a18      	cmp	r2, #24
 80097de:	d82e      	bhi.n	800983e <__gethex+0x13a>
 80097e0:	f1a0 0210 	sub.w	r2, r0, #16
 80097e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097e8:	f7ff ff76 	bl	80096d8 <__hexdig_fun>
 80097ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80097f0:	fa5f fc8c 	uxtb.w	ip, ip
 80097f4:	f1bc 0f18 	cmp.w	ip, #24
 80097f8:	d91d      	bls.n	8009836 <__gethex+0x132>
 80097fa:	f1bb 0f00 	cmp.w	fp, #0
 80097fe:	d000      	beq.n	8009802 <__gethex+0xfe>
 8009800:	4252      	negs	r2, r2
 8009802:	4416      	add	r6, r2
 8009804:	f8ca 1000 	str.w	r1, [sl]
 8009808:	b1dc      	cbz	r4, 8009842 <__gethex+0x13e>
 800980a:	9b01      	ldr	r3, [sp, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	bf14      	ite	ne
 8009810:	f04f 0800 	movne.w	r8, #0
 8009814:	f04f 0806 	moveq.w	r8, #6
 8009818:	4640      	mov	r0, r8
 800981a:	b005      	add	sp, #20
 800981c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009820:	4645      	mov	r5, r8
 8009822:	4626      	mov	r6, r4
 8009824:	2401      	movs	r4, #1
 8009826:	e7c7      	b.n	80097b8 <__gethex+0xb4>
 8009828:	f04f 0b00 	mov.w	fp, #0
 800982c:	1ca9      	adds	r1, r5, #2
 800982e:	e7d0      	b.n	80097d2 <__gethex+0xce>
 8009830:	f04f 0b01 	mov.w	fp, #1
 8009834:	e7fa      	b.n	800982c <__gethex+0x128>
 8009836:	230a      	movs	r3, #10
 8009838:	fb03 0002 	mla	r0, r3, r2, r0
 800983c:	e7d0      	b.n	80097e0 <__gethex+0xdc>
 800983e:	4629      	mov	r1, r5
 8009840:	e7e0      	b.n	8009804 <__gethex+0x100>
 8009842:	eba5 0308 	sub.w	r3, r5, r8
 8009846:	3b01      	subs	r3, #1
 8009848:	4621      	mov	r1, r4
 800984a:	2b07      	cmp	r3, #7
 800984c:	dc0a      	bgt.n	8009864 <__gethex+0x160>
 800984e:	4648      	mov	r0, r9
 8009850:	f000 fb0e 	bl	8009e70 <_Balloc>
 8009854:	4604      	mov	r4, r0
 8009856:	b940      	cbnz	r0, 800986a <__gethex+0x166>
 8009858:	4b61      	ldr	r3, [pc, #388]	; (80099e0 <__gethex+0x2dc>)
 800985a:	4602      	mov	r2, r0
 800985c:	21e4      	movs	r1, #228	; 0xe4
 800985e:	4861      	ldr	r0, [pc, #388]	; (80099e4 <__gethex+0x2e0>)
 8009860:	f001 f9f0 	bl	800ac44 <__assert_func>
 8009864:	3101      	adds	r1, #1
 8009866:	105b      	asrs	r3, r3, #1
 8009868:	e7ef      	b.n	800984a <__gethex+0x146>
 800986a:	f100 0a14 	add.w	sl, r0, #20
 800986e:	2300      	movs	r3, #0
 8009870:	495a      	ldr	r1, [pc, #360]	; (80099dc <__gethex+0x2d8>)
 8009872:	f8cd a004 	str.w	sl, [sp, #4]
 8009876:	469b      	mov	fp, r3
 8009878:	45a8      	cmp	r8, r5
 800987a:	d342      	bcc.n	8009902 <__gethex+0x1fe>
 800987c:	9801      	ldr	r0, [sp, #4]
 800987e:	f840 bb04 	str.w	fp, [r0], #4
 8009882:	eba0 000a 	sub.w	r0, r0, sl
 8009886:	1080      	asrs	r0, r0, #2
 8009888:	6120      	str	r0, [r4, #16]
 800988a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800988e:	4658      	mov	r0, fp
 8009890:	f000 fbe0 	bl	800a054 <__hi0bits>
 8009894:	683d      	ldr	r5, [r7, #0]
 8009896:	eba8 0000 	sub.w	r0, r8, r0
 800989a:	42a8      	cmp	r0, r5
 800989c:	dd59      	ble.n	8009952 <__gethex+0x24e>
 800989e:	eba0 0805 	sub.w	r8, r0, r5
 80098a2:	4641      	mov	r1, r8
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 ff6f 	bl	800a788 <__any_on>
 80098aa:	4683      	mov	fp, r0
 80098ac:	b1b8      	cbz	r0, 80098de <__gethex+0x1da>
 80098ae:	f108 33ff 	add.w	r3, r8, #4294967295
 80098b2:	1159      	asrs	r1, r3, #5
 80098b4:	f003 021f 	and.w	r2, r3, #31
 80098b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80098bc:	f04f 0b01 	mov.w	fp, #1
 80098c0:	fa0b f202 	lsl.w	r2, fp, r2
 80098c4:	420a      	tst	r2, r1
 80098c6:	d00a      	beq.n	80098de <__gethex+0x1da>
 80098c8:	455b      	cmp	r3, fp
 80098ca:	dd06      	ble.n	80098da <__gethex+0x1d6>
 80098cc:	f1a8 0102 	sub.w	r1, r8, #2
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 ff59 	bl	800a788 <__any_on>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d138      	bne.n	800994c <__gethex+0x248>
 80098da:	f04f 0b02 	mov.w	fp, #2
 80098de:	4641      	mov	r1, r8
 80098e0:	4620      	mov	r0, r4
 80098e2:	f7ff fea7 	bl	8009634 <rshift>
 80098e6:	4446      	add	r6, r8
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	42b3      	cmp	r3, r6
 80098ec:	da41      	bge.n	8009972 <__gethex+0x26e>
 80098ee:	4621      	mov	r1, r4
 80098f0:	4648      	mov	r0, r9
 80098f2:	f000 fafd 	bl	8009ef0 <_Bfree>
 80098f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098f8:	2300      	movs	r3, #0
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009900:	e78a      	b.n	8009818 <__gethex+0x114>
 8009902:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009906:	2a2e      	cmp	r2, #46	; 0x2e
 8009908:	d014      	beq.n	8009934 <__gethex+0x230>
 800990a:	2b20      	cmp	r3, #32
 800990c:	d106      	bne.n	800991c <__gethex+0x218>
 800990e:	9b01      	ldr	r3, [sp, #4]
 8009910:	f843 bb04 	str.w	fp, [r3], #4
 8009914:	f04f 0b00 	mov.w	fp, #0
 8009918:	9301      	str	r3, [sp, #4]
 800991a:	465b      	mov	r3, fp
 800991c:	7828      	ldrb	r0, [r5, #0]
 800991e:	9303      	str	r3, [sp, #12]
 8009920:	f7ff feda 	bl	80096d8 <__hexdig_fun>
 8009924:	9b03      	ldr	r3, [sp, #12]
 8009926:	f000 000f 	and.w	r0, r0, #15
 800992a:	4098      	lsls	r0, r3
 800992c:	ea4b 0b00 	orr.w	fp, fp, r0
 8009930:	3304      	adds	r3, #4
 8009932:	e7a1      	b.n	8009878 <__gethex+0x174>
 8009934:	45a8      	cmp	r8, r5
 8009936:	d8e8      	bhi.n	800990a <__gethex+0x206>
 8009938:	2201      	movs	r2, #1
 800993a:	4628      	mov	r0, r5
 800993c:	9303      	str	r3, [sp, #12]
 800993e:	f7fe fefb 	bl	8008738 <strncmp>
 8009942:	4926      	ldr	r1, [pc, #152]	; (80099dc <__gethex+0x2d8>)
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	2800      	cmp	r0, #0
 8009948:	d1df      	bne.n	800990a <__gethex+0x206>
 800994a:	e795      	b.n	8009878 <__gethex+0x174>
 800994c:	f04f 0b03 	mov.w	fp, #3
 8009950:	e7c5      	b.n	80098de <__gethex+0x1da>
 8009952:	da0b      	bge.n	800996c <__gethex+0x268>
 8009954:	eba5 0800 	sub.w	r8, r5, r0
 8009958:	4621      	mov	r1, r4
 800995a:	4642      	mov	r2, r8
 800995c:	4648      	mov	r0, r9
 800995e:	f000 fce1 	bl	800a324 <__lshift>
 8009962:	eba6 0608 	sub.w	r6, r6, r8
 8009966:	4604      	mov	r4, r0
 8009968:	f100 0a14 	add.w	sl, r0, #20
 800996c:	f04f 0b00 	mov.w	fp, #0
 8009970:	e7ba      	b.n	80098e8 <__gethex+0x1e4>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	42b3      	cmp	r3, r6
 8009976:	dd73      	ble.n	8009a60 <__gethex+0x35c>
 8009978:	1b9e      	subs	r6, r3, r6
 800997a:	42b5      	cmp	r5, r6
 800997c:	dc34      	bgt.n	80099e8 <__gethex+0x2e4>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b02      	cmp	r3, #2
 8009982:	d023      	beq.n	80099cc <__gethex+0x2c8>
 8009984:	2b03      	cmp	r3, #3
 8009986:	d025      	beq.n	80099d4 <__gethex+0x2d0>
 8009988:	2b01      	cmp	r3, #1
 800998a:	d115      	bne.n	80099b8 <__gethex+0x2b4>
 800998c:	42b5      	cmp	r5, r6
 800998e:	d113      	bne.n	80099b8 <__gethex+0x2b4>
 8009990:	2d01      	cmp	r5, #1
 8009992:	d10b      	bne.n	80099ac <__gethex+0x2a8>
 8009994:	9a02      	ldr	r2, [sp, #8]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	2301      	movs	r3, #1
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	f8ca 3000 	str.w	r3, [sl]
 80099a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099a4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80099a8:	601c      	str	r4, [r3, #0]
 80099aa:	e735      	b.n	8009818 <__gethex+0x114>
 80099ac:	1e69      	subs	r1, r5, #1
 80099ae:	4620      	mov	r0, r4
 80099b0:	f000 feea 	bl	800a788 <__any_on>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d1ed      	bne.n	8009994 <__gethex+0x290>
 80099b8:	4621      	mov	r1, r4
 80099ba:	4648      	mov	r0, r9
 80099bc:	f000 fa98 	bl	8009ef0 <_Bfree>
 80099c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099c2:	2300      	movs	r3, #0
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80099ca:	e725      	b.n	8009818 <__gethex+0x114>
 80099cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1f2      	bne.n	80099b8 <__gethex+0x2b4>
 80099d2:	e7df      	b.n	8009994 <__gethex+0x290>
 80099d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1dc      	bne.n	8009994 <__gethex+0x290>
 80099da:	e7ed      	b.n	80099b8 <__gethex+0x2b4>
 80099dc:	0800c1d0 	.word	0x0800c1d0
 80099e0:	0800c2e0 	.word	0x0800c2e0
 80099e4:	0800c2f1 	.word	0x0800c2f1
 80099e8:	f106 38ff 	add.w	r8, r6, #4294967295
 80099ec:	f1bb 0f00 	cmp.w	fp, #0
 80099f0:	d133      	bne.n	8009a5a <__gethex+0x356>
 80099f2:	f1b8 0f00 	cmp.w	r8, #0
 80099f6:	d004      	beq.n	8009a02 <__gethex+0x2fe>
 80099f8:	4641      	mov	r1, r8
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 fec4 	bl	800a788 <__any_on>
 8009a00:	4683      	mov	fp, r0
 8009a02:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009a06:	2301      	movs	r3, #1
 8009a08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a0c:	f008 081f 	and.w	r8, r8, #31
 8009a10:	fa03 f308 	lsl.w	r3, r3, r8
 8009a14:	4213      	tst	r3, r2
 8009a16:	4631      	mov	r1, r6
 8009a18:	4620      	mov	r0, r4
 8009a1a:	bf18      	it	ne
 8009a1c:	f04b 0b02 	orrne.w	fp, fp, #2
 8009a20:	1bad      	subs	r5, r5, r6
 8009a22:	f7ff fe07 	bl	8009634 <rshift>
 8009a26:	687e      	ldr	r6, [r7, #4]
 8009a28:	f04f 0802 	mov.w	r8, #2
 8009a2c:	f1bb 0f00 	cmp.w	fp, #0
 8009a30:	d04a      	beq.n	8009ac8 <__gethex+0x3c4>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d016      	beq.n	8009a66 <__gethex+0x362>
 8009a38:	2b03      	cmp	r3, #3
 8009a3a:	d018      	beq.n	8009a6e <__gethex+0x36a>
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d109      	bne.n	8009a54 <__gethex+0x350>
 8009a40:	f01b 0f02 	tst.w	fp, #2
 8009a44:	d006      	beq.n	8009a54 <__gethex+0x350>
 8009a46:	f8da 3000 	ldr.w	r3, [sl]
 8009a4a:	ea4b 0b03 	orr.w	fp, fp, r3
 8009a4e:	f01b 0f01 	tst.w	fp, #1
 8009a52:	d10f      	bne.n	8009a74 <__gethex+0x370>
 8009a54:	f048 0810 	orr.w	r8, r8, #16
 8009a58:	e036      	b.n	8009ac8 <__gethex+0x3c4>
 8009a5a:	f04f 0b01 	mov.w	fp, #1
 8009a5e:	e7d0      	b.n	8009a02 <__gethex+0x2fe>
 8009a60:	f04f 0801 	mov.w	r8, #1
 8009a64:	e7e2      	b.n	8009a2c <__gethex+0x328>
 8009a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a68:	f1c3 0301 	rsb	r3, r3, #1
 8009a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0ef      	beq.n	8009a54 <__gethex+0x350>
 8009a74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a78:	f104 0214 	add.w	r2, r4, #20
 8009a7c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009a86:	2300      	movs	r3, #0
 8009a88:	4694      	mov	ip, r2
 8009a8a:	f852 1b04 	ldr.w	r1, [r2], #4
 8009a8e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009a92:	d01e      	beq.n	8009ad2 <__gethex+0x3ce>
 8009a94:	3101      	adds	r1, #1
 8009a96:	f8cc 1000 	str.w	r1, [ip]
 8009a9a:	f1b8 0f02 	cmp.w	r8, #2
 8009a9e:	f104 0214 	add.w	r2, r4, #20
 8009aa2:	d13d      	bne.n	8009b20 <__gethex+0x41c>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	42ab      	cmp	r3, r5
 8009aaa:	d10b      	bne.n	8009ac4 <__gethex+0x3c0>
 8009aac:	1169      	asrs	r1, r5, #5
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f005 051f 	and.w	r5, r5, #31
 8009ab4:	fa03 f505 	lsl.w	r5, r3, r5
 8009ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009abc:	421d      	tst	r5, r3
 8009abe:	bf18      	it	ne
 8009ac0:	f04f 0801 	movne.w	r8, #1
 8009ac4:	f048 0820 	orr.w	r8, r8, #32
 8009ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aca:	601c      	str	r4, [r3, #0]
 8009acc:	9b02      	ldr	r3, [sp, #8]
 8009ace:	601e      	str	r6, [r3, #0]
 8009ad0:	e6a2      	b.n	8009818 <__gethex+0x114>
 8009ad2:	4290      	cmp	r0, r2
 8009ad4:	f842 3c04 	str.w	r3, [r2, #-4]
 8009ad8:	d8d6      	bhi.n	8009a88 <__gethex+0x384>
 8009ada:	68a2      	ldr	r2, [r4, #8]
 8009adc:	4593      	cmp	fp, r2
 8009ade:	db17      	blt.n	8009b10 <__gethex+0x40c>
 8009ae0:	6861      	ldr	r1, [r4, #4]
 8009ae2:	4648      	mov	r0, r9
 8009ae4:	3101      	adds	r1, #1
 8009ae6:	f000 f9c3 	bl	8009e70 <_Balloc>
 8009aea:	4682      	mov	sl, r0
 8009aec:	b918      	cbnz	r0, 8009af6 <__gethex+0x3f2>
 8009aee:	4b1b      	ldr	r3, [pc, #108]	; (8009b5c <__gethex+0x458>)
 8009af0:	4602      	mov	r2, r0
 8009af2:	2184      	movs	r1, #132	; 0x84
 8009af4:	e6b3      	b.n	800985e <__gethex+0x15a>
 8009af6:	6922      	ldr	r2, [r4, #16]
 8009af8:	3202      	adds	r2, #2
 8009afa:	f104 010c 	add.w	r1, r4, #12
 8009afe:	0092      	lsls	r2, r2, #2
 8009b00:	300c      	adds	r0, #12
 8009b02:	f7fe feb8 	bl	8008876 <memcpy>
 8009b06:	4621      	mov	r1, r4
 8009b08:	4648      	mov	r0, r9
 8009b0a:	f000 f9f1 	bl	8009ef0 <_Bfree>
 8009b0e:	4654      	mov	r4, sl
 8009b10:	6922      	ldr	r2, [r4, #16]
 8009b12:	1c51      	adds	r1, r2, #1
 8009b14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009b18:	6121      	str	r1, [r4, #16]
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	6151      	str	r1, [r2, #20]
 8009b1e:	e7bc      	b.n	8009a9a <__gethex+0x396>
 8009b20:	6921      	ldr	r1, [r4, #16]
 8009b22:	4559      	cmp	r1, fp
 8009b24:	dd0b      	ble.n	8009b3e <__gethex+0x43a>
 8009b26:	2101      	movs	r1, #1
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7ff fd83 	bl	8009634 <rshift>
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	3601      	adds	r6, #1
 8009b32:	42b3      	cmp	r3, r6
 8009b34:	f6ff aedb 	blt.w	80098ee <__gethex+0x1ea>
 8009b38:	f04f 0801 	mov.w	r8, #1
 8009b3c:	e7c2      	b.n	8009ac4 <__gethex+0x3c0>
 8009b3e:	f015 051f 	ands.w	r5, r5, #31
 8009b42:	d0f9      	beq.n	8009b38 <__gethex+0x434>
 8009b44:	9b01      	ldr	r3, [sp, #4]
 8009b46:	441a      	add	r2, r3
 8009b48:	f1c5 0520 	rsb	r5, r5, #32
 8009b4c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009b50:	f000 fa80 	bl	800a054 <__hi0bits>
 8009b54:	42a8      	cmp	r0, r5
 8009b56:	dbe6      	blt.n	8009b26 <__gethex+0x422>
 8009b58:	e7ee      	b.n	8009b38 <__gethex+0x434>
 8009b5a:	bf00      	nop
 8009b5c:	0800c2e0 	.word	0x0800c2e0

08009b60 <L_shift>:
 8009b60:	f1c2 0208 	rsb	r2, r2, #8
 8009b64:	0092      	lsls	r2, r2, #2
 8009b66:	b570      	push	{r4, r5, r6, lr}
 8009b68:	f1c2 0620 	rsb	r6, r2, #32
 8009b6c:	6843      	ldr	r3, [r0, #4]
 8009b6e:	6804      	ldr	r4, [r0, #0]
 8009b70:	fa03 f506 	lsl.w	r5, r3, r6
 8009b74:	432c      	orrs	r4, r5
 8009b76:	40d3      	lsrs	r3, r2
 8009b78:	6004      	str	r4, [r0, #0]
 8009b7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b7e:	4288      	cmp	r0, r1
 8009b80:	d3f4      	bcc.n	8009b6c <L_shift+0xc>
 8009b82:	bd70      	pop	{r4, r5, r6, pc}

08009b84 <__match>:
 8009b84:	b530      	push	{r4, r5, lr}
 8009b86:	6803      	ldr	r3, [r0, #0]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b8e:	b914      	cbnz	r4, 8009b96 <__match+0x12>
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	2001      	movs	r0, #1
 8009b94:	bd30      	pop	{r4, r5, pc}
 8009b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b9e:	2d19      	cmp	r5, #25
 8009ba0:	bf98      	it	ls
 8009ba2:	3220      	addls	r2, #32
 8009ba4:	42a2      	cmp	r2, r4
 8009ba6:	d0f0      	beq.n	8009b8a <__match+0x6>
 8009ba8:	2000      	movs	r0, #0
 8009baa:	e7f3      	b.n	8009b94 <__match+0x10>

08009bac <__hexnan>:
 8009bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	680b      	ldr	r3, [r1, #0]
 8009bb2:	6801      	ldr	r1, [r0, #0]
 8009bb4:	115e      	asrs	r6, r3, #5
 8009bb6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009bba:	f013 031f 	ands.w	r3, r3, #31
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	bf18      	it	ne
 8009bc2:	3604      	addne	r6, #4
 8009bc4:	2500      	movs	r5, #0
 8009bc6:	1f37      	subs	r7, r6, #4
 8009bc8:	4682      	mov	sl, r0
 8009bca:	4690      	mov	r8, r2
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	f846 5c04 	str.w	r5, [r6, #-4]
 8009bd2:	46b9      	mov	r9, r7
 8009bd4:	463c      	mov	r4, r7
 8009bd6:	9502      	str	r5, [sp, #8]
 8009bd8:	46ab      	mov	fp, r5
 8009bda:	784a      	ldrb	r2, [r1, #1]
 8009bdc:	1c4b      	adds	r3, r1, #1
 8009bde:	9303      	str	r3, [sp, #12]
 8009be0:	b342      	cbz	r2, 8009c34 <__hexnan+0x88>
 8009be2:	4610      	mov	r0, r2
 8009be4:	9105      	str	r1, [sp, #20]
 8009be6:	9204      	str	r2, [sp, #16]
 8009be8:	f7ff fd76 	bl	80096d8 <__hexdig_fun>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d14f      	bne.n	8009c90 <__hexnan+0xe4>
 8009bf0:	9a04      	ldr	r2, [sp, #16]
 8009bf2:	9905      	ldr	r1, [sp, #20]
 8009bf4:	2a20      	cmp	r2, #32
 8009bf6:	d818      	bhi.n	8009c2a <__hexnan+0x7e>
 8009bf8:	9b02      	ldr	r3, [sp, #8]
 8009bfa:	459b      	cmp	fp, r3
 8009bfc:	dd13      	ble.n	8009c26 <__hexnan+0x7a>
 8009bfe:	454c      	cmp	r4, r9
 8009c00:	d206      	bcs.n	8009c10 <__hexnan+0x64>
 8009c02:	2d07      	cmp	r5, #7
 8009c04:	dc04      	bgt.n	8009c10 <__hexnan+0x64>
 8009c06:	462a      	mov	r2, r5
 8009c08:	4649      	mov	r1, r9
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f7ff ffa8 	bl	8009b60 <L_shift>
 8009c10:	4544      	cmp	r4, r8
 8009c12:	d950      	bls.n	8009cb6 <__hexnan+0x10a>
 8009c14:	2300      	movs	r3, #0
 8009c16:	f1a4 0904 	sub.w	r9, r4, #4
 8009c1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c1e:	f8cd b008 	str.w	fp, [sp, #8]
 8009c22:	464c      	mov	r4, r9
 8009c24:	461d      	mov	r5, r3
 8009c26:	9903      	ldr	r1, [sp, #12]
 8009c28:	e7d7      	b.n	8009bda <__hexnan+0x2e>
 8009c2a:	2a29      	cmp	r2, #41	; 0x29
 8009c2c:	d155      	bne.n	8009cda <__hexnan+0x12e>
 8009c2e:	3102      	adds	r1, #2
 8009c30:	f8ca 1000 	str.w	r1, [sl]
 8009c34:	f1bb 0f00 	cmp.w	fp, #0
 8009c38:	d04f      	beq.n	8009cda <__hexnan+0x12e>
 8009c3a:	454c      	cmp	r4, r9
 8009c3c:	d206      	bcs.n	8009c4c <__hexnan+0xa0>
 8009c3e:	2d07      	cmp	r5, #7
 8009c40:	dc04      	bgt.n	8009c4c <__hexnan+0xa0>
 8009c42:	462a      	mov	r2, r5
 8009c44:	4649      	mov	r1, r9
 8009c46:	4620      	mov	r0, r4
 8009c48:	f7ff ff8a 	bl	8009b60 <L_shift>
 8009c4c:	4544      	cmp	r4, r8
 8009c4e:	d934      	bls.n	8009cba <__hexnan+0x10e>
 8009c50:	f1a8 0204 	sub.w	r2, r8, #4
 8009c54:	4623      	mov	r3, r4
 8009c56:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c5e:	429f      	cmp	r7, r3
 8009c60:	d2f9      	bcs.n	8009c56 <__hexnan+0xaa>
 8009c62:	1b3b      	subs	r3, r7, r4
 8009c64:	f023 0303 	bic.w	r3, r3, #3
 8009c68:	3304      	adds	r3, #4
 8009c6a:	3e03      	subs	r6, #3
 8009c6c:	3401      	adds	r4, #1
 8009c6e:	42a6      	cmp	r6, r4
 8009c70:	bf38      	it	cc
 8009c72:	2304      	movcc	r3, #4
 8009c74:	4443      	add	r3, r8
 8009c76:	2200      	movs	r2, #0
 8009c78:	f843 2b04 	str.w	r2, [r3], #4
 8009c7c:	429f      	cmp	r7, r3
 8009c7e:	d2fb      	bcs.n	8009c78 <__hexnan+0xcc>
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	b91b      	cbnz	r3, 8009c8c <__hexnan+0xe0>
 8009c84:	4547      	cmp	r7, r8
 8009c86:	d126      	bne.n	8009cd6 <__hexnan+0x12a>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	2005      	movs	r0, #5
 8009c8e:	e025      	b.n	8009cdc <__hexnan+0x130>
 8009c90:	3501      	adds	r5, #1
 8009c92:	2d08      	cmp	r5, #8
 8009c94:	f10b 0b01 	add.w	fp, fp, #1
 8009c98:	dd06      	ble.n	8009ca8 <__hexnan+0xfc>
 8009c9a:	4544      	cmp	r4, r8
 8009c9c:	d9c3      	bls.n	8009c26 <__hexnan+0x7a>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ca4:	2501      	movs	r5, #1
 8009ca6:	3c04      	subs	r4, #4
 8009ca8:	6822      	ldr	r2, [r4, #0]
 8009caa:	f000 000f 	and.w	r0, r0, #15
 8009cae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009cb2:	6020      	str	r0, [r4, #0]
 8009cb4:	e7b7      	b.n	8009c26 <__hexnan+0x7a>
 8009cb6:	2508      	movs	r5, #8
 8009cb8:	e7b5      	b.n	8009c26 <__hexnan+0x7a>
 8009cba:	9b01      	ldr	r3, [sp, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0df      	beq.n	8009c80 <__hexnan+0xd4>
 8009cc0:	f1c3 0320 	rsb	r3, r3, #32
 8009cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc8:	40da      	lsrs	r2, r3
 8009cca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009cce:	4013      	ands	r3, r2
 8009cd0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009cd4:	e7d4      	b.n	8009c80 <__hexnan+0xd4>
 8009cd6:	3f04      	subs	r7, #4
 8009cd8:	e7d2      	b.n	8009c80 <__hexnan+0xd4>
 8009cda:	2004      	movs	r0, #4
 8009cdc:	b007      	add	sp, #28
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009ce4 <malloc>:
 8009ce4:	4b02      	ldr	r3, [pc, #8]	; (8009cf0 <malloc+0xc>)
 8009ce6:	4601      	mov	r1, r0
 8009ce8:	6818      	ldr	r0, [r3, #0]
 8009cea:	f000 b823 	b.w	8009d34 <_malloc_r>
 8009cee:	bf00      	nop
 8009cf0:	200001d0 	.word	0x200001d0

08009cf4 <sbrk_aligned>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	4e0e      	ldr	r6, [pc, #56]	; (8009d30 <sbrk_aligned+0x3c>)
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	6831      	ldr	r1, [r6, #0]
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	b911      	cbnz	r1, 8009d06 <sbrk_aligned+0x12>
 8009d00:	f000 ff90 	bl	800ac24 <_sbrk_r>
 8009d04:	6030      	str	r0, [r6, #0]
 8009d06:	4621      	mov	r1, r4
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f000 ff8b 	bl	800ac24 <_sbrk_r>
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	d00a      	beq.n	8009d28 <sbrk_aligned+0x34>
 8009d12:	1cc4      	adds	r4, r0, #3
 8009d14:	f024 0403 	bic.w	r4, r4, #3
 8009d18:	42a0      	cmp	r0, r4
 8009d1a:	d007      	beq.n	8009d2c <sbrk_aligned+0x38>
 8009d1c:	1a21      	subs	r1, r4, r0
 8009d1e:	4628      	mov	r0, r5
 8009d20:	f000 ff80 	bl	800ac24 <_sbrk_r>
 8009d24:	3001      	adds	r0, #1
 8009d26:	d101      	bne.n	8009d2c <sbrk_aligned+0x38>
 8009d28:	f04f 34ff 	mov.w	r4, #4294967295
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}
 8009d30:	2000058c 	.word	0x2000058c

08009d34 <_malloc_r>:
 8009d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d38:	1ccd      	adds	r5, r1, #3
 8009d3a:	f025 0503 	bic.w	r5, r5, #3
 8009d3e:	3508      	adds	r5, #8
 8009d40:	2d0c      	cmp	r5, #12
 8009d42:	bf38      	it	cc
 8009d44:	250c      	movcc	r5, #12
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	4607      	mov	r7, r0
 8009d4a:	db01      	blt.n	8009d50 <_malloc_r+0x1c>
 8009d4c:	42a9      	cmp	r1, r5
 8009d4e:	d905      	bls.n	8009d5c <_malloc_r+0x28>
 8009d50:	230c      	movs	r3, #12
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	2600      	movs	r6, #0
 8009d56:	4630      	mov	r0, r6
 8009d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e30 <_malloc_r+0xfc>
 8009d60:	f000 f87a 	bl	8009e58 <__malloc_lock>
 8009d64:	f8d8 3000 	ldr.w	r3, [r8]
 8009d68:	461c      	mov	r4, r3
 8009d6a:	bb5c      	cbnz	r4, 8009dc4 <_malloc_r+0x90>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	4638      	mov	r0, r7
 8009d70:	f7ff ffc0 	bl	8009cf4 <sbrk_aligned>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	4604      	mov	r4, r0
 8009d78:	d155      	bne.n	8009e26 <_malloc_r+0xf2>
 8009d7a:	f8d8 4000 	ldr.w	r4, [r8]
 8009d7e:	4626      	mov	r6, r4
 8009d80:	2e00      	cmp	r6, #0
 8009d82:	d145      	bne.n	8009e10 <_malloc_r+0xdc>
 8009d84:	2c00      	cmp	r4, #0
 8009d86:	d048      	beq.n	8009e1a <_malloc_r+0xe6>
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	eb04 0903 	add.w	r9, r4, r3
 8009d92:	f000 ff47 	bl	800ac24 <_sbrk_r>
 8009d96:	4581      	cmp	r9, r0
 8009d98:	d13f      	bne.n	8009e1a <_malloc_r+0xe6>
 8009d9a:	6821      	ldr	r1, [r4, #0]
 8009d9c:	1a6d      	subs	r5, r5, r1
 8009d9e:	4629      	mov	r1, r5
 8009da0:	4638      	mov	r0, r7
 8009da2:	f7ff ffa7 	bl	8009cf4 <sbrk_aligned>
 8009da6:	3001      	adds	r0, #1
 8009da8:	d037      	beq.n	8009e1a <_malloc_r+0xe6>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	442b      	add	r3, r5
 8009dae:	6023      	str	r3, [r4, #0]
 8009db0:	f8d8 3000 	ldr.w	r3, [r8]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d038      	beq.n	8009e2a <_malloc_r+0xf6>
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	42a2      	cmp	r2, r4
 8009dbc:	d12b      	bne.n	8009e16 <_malloc_r+0xe2>
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	605a      	str	r2, [r3, #4]
 8009dc2:	e00f      	b.n	8009de4 <_malloc_r+0xb0>
 8009dc4:	6822      	ldr	r2, [r4, #0]
 8009dc6:	1b52      	subs	r2, r2, r5
 8009dc8:	d41f      	bmi.n	8009e0a <_malloc_r+0xd6>
 8009dca:	2a0b      	cmp	r2, #11
 8009dcc:	d917      	bls.n	8009dfe <_malloc_r+0xca>
 8009dce:	1961      	adds	r1, r4, r5
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	6025      	str	r5, [r4, #0]
 8009dd4:	bf18      	it	ne
 8009dd6:	6059      	strne	r1, [r3, #4]
 8009dd8:	6863      	ldr	r3, [r4, #4]
 8009dda:	bf08      	it	eq
 8009ddc:	f8c8 1000 	streq.w	r1, [r8]
 8009de0:	5162      	str	r2, [r4, r5]
 8009de2:	604b      	str	r3, [r1, #4]
 8009de4:	4638      	mov	r0, r7
 8009de6:	f104 060b 	add.w	r6, r4, #11
 8009dea:	f000 f83b 	bl	8009e64 <__malloc_unlock>
 8009dee:	f026 0607 	bic.w	r6, r6, #7
 8009df2:	1d23      	adds	r3, r4, #4
 8009df4:	1af2      	subs	r2, r6, r3
 8009df6:	d0ae      	beq.n	8009d56 <_malloc_r+0x22>
 8009df8:	1b9b      	subs	r3, r3, r6
 8009dfa:	50a3      	str	r3, [r4, r2]
 8009dfc:	e7ab      	b.n	8009d56 <_malloc_r+0x22>
 8009dfe:	42a3      	cmp	r3, r4
 8009e00:	6862      	ldr	r2, [r4, #4]
 8009e02:	d1dd      	bne.n	8009dc0 <_malloc_r+0x8c>
 8009e04:	f8c8 2000 	str.w	r2, [r8]
 8009e08:	e7ec      	b.n	8009de4 <_malloc_r+0xb0>
 8009e0a:	4623      	mov	r3, r4
 8009e0c:	6864      	ldr	r4, [r4, #4]
 8009e0e:	e7ac      	b.n	8009d6a <_malloc_r+0x36>
 8009e10:	4634      	mov	r4, r6
 8009e12:	6876      	ldr	r6, [r6, #4]
 8009e14:	e7b4      	b.n	8009d80 <_malloc_r+0x4c>
 8009e16:	4613      	mov	r3, r2
 8009e18:	e7cc      	b.n	8009db4 <_malloc_r+0x80>
 8009e1a:	230c      	movs	r3, #12
 8009e1c:	603b      	str	r3, [r7, #0]
 8009e1e:	4638      	mov	r0, r7
 8009e20:	f000 f820 	bl	8009e64 <__malloc_unlock>
 8009e24:	e797      	b.n	8009d56 <_malloc_r+0x22>
 8009e26:	6025      	str	r5, [r4, #0]
 8009e28:	e7dc      	b.n	8009de4 <_malloc_r+0xb0>
 8009e2a:	605b      	str	r3, [r3, #4]
 8009e2c:	deff      	udf	#255	; 0xff
 8009e2e:	bf00      	nop
 8009e30:	20000588 	.word	0x20000588

08009e34 <__ascii_mbtowc>:
 8009e34:	b082      	sub	sp, #8
 8009e36:	b901      	cbnz	r1, 8009e3a <__ascii_mbtowc+0x6>
 8009e38:	a901      	add	r1, sp, #4
 8009e3a:	b142      	cbz	r2, 8009e4e <__ascii_mbtowc+0x1a>
 8009e3c:	b14b      	cbz	r3, 8009e52 <__ascii_mbtowc+0x1e>
 8009e3e:	7813      	ldrb	r3, [r2, #0]
 8009e40:	600b      	str	r3, [r1, #0]
 8009e42:	7812      	ldrb	r2, [r2, #0]
 8009e44:	1e10      	subs	r0, r2, #0
 8009e46:	bf18      	it	ne
 8009e48:	2001      	movne	r0, #1
 8009e4a:	b002      	add	sp, #8
 8009e4c:	4770      	bx	lr
 8009e4e:	4610      	mov	r0, r2
 8009e50:	e7fb      	b.n	8009e4a <__ascii_mbtowc+0x16>
 8009e52:	f06f 0001 	mvn.w	r0, #1
 8009e56:	e7f8      	b.n	8009e4a <__ascii_mbtowc+0x16>

08009e58 <__malloc_lock>:
 8009e58:	4801      	ldr	r0, [pc, #4]	; (8009e60 <__malloc_lock+0x8>)
 8009e5a:	f7fe bd0a 	b.w	8008872 <__retarget_lock_acquire_recursive>
 8009e5e:	bf00      	nop
 8009e60:	20000584 	.word	0x20000584

08009e64 <__malloc_unlock>:
 8009e64:	4801      	ldr	r0, [pc, #4]	; (8009e6c <__malloc_unlock+0x8>)
 8009e66:	f7fe bd05 	b.w	8008874 <__retarget_lock_release_recursive>
 8009e6a:	bf00      	nop
 8009e6c:	20000584 	.word	0x20000584

08009e70 <_Balloc>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	69c6      	ldr	r6, [r0, #28]
 8009e74:	4604      	mov	r4, r0
 8009e76:	460d      	mov	r5, r1
 8009e78:	b976      	cbnz	r6, 8009e98 <_Balloc+0x28>
 8009e7a:	2010      	movs	r0, #16
 8009e7c:	f7ff ff32 	bl	8009ce4 <malloc>
 8009e80:	4602      	mov	r2, r0
 8009e82:	61e0      	str	r0, [r4, #28]
 8009e84:	b920      	cbnz	r0, 8009e90 <_Balloc+0x20>
 8009e86:	4b18      	ldr	r3, [pc, #96]	; (8009ee8 <_Balloc+0x78>)
 8009e88:	4818      	ldr	r0, [pc, #96]	; (8009eec <_Balloc+0x7c>)
 8009e8a:	216b      	movs	r1, #107	; 0x6b
 8009e8c:	f000 feda 	bl	800ac44 <__assert_func>
 8009e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e94:	6006      	str	r6, [r0, #0]
 8009e96:	60c6      	str	r6, [r0, #12]
 8009e98:	69e6      	ldr	r6, [r4, #28]
 8009e9a:	68f3      	ldr	r3, [r6, #12]
 8009e9c:	b183      	cbz	r3, 8009ec0 <_Balloc+0x50>
 8009e9e:	69e3      	ldr	r3, [r4, #28]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ea6:	b9b8      	cbnz	r0, 8009ed8 <_Balloc+0x68>
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8009eae:	1d72      	adds	r2, r6, #5
 8009eb0:	0092      	lsls	r2, r2, #2
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f000 fee4 	bl	800ac80 <_calloc_r>
 8009eb8:	b160      	cbz	r0, 8009ed4 <_Balloc+0x64>
 8009eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ebe:	e00e      	b.n	8009ede <_Balloc+0x6e>
 8009ec0:	2221      	movs	r2, #33	; 0x21
 8009ec2:	2104      	movs	r1, #4
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 fedb 	bl	800ac80 <_calloc_r>
 8009eca:	69e3      	ldr	r3, [r4, #28]
 8009ecc:	60f0      	str	r0, [r6, #12]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e4      	bne.n	8009e9e <_Balloc+0x2e>
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	6802      	ldr	r2, [r0, #0]
 8009eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ee4:	e7f7      	b.n	8009ed6 <_Balloc+0x66>
 8009ee6:	bf00      	nop
 8009ee8:	0800c271 	.word	0x0800c271
 8009eec:	0800c351 	.word	0x0800c351

08009ef0 <_Bfree>:
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	69c6      	ldr	r6, [r0, #28]
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	b976      	cbnz	r6, 8009f18 <_Bfree+0x28>
 8009efa:	2010      	movs	r0, #16
 8009efc:	f7ff fef2 	bl	8009ce4 <malloc>
 8009f00:	4602      	mov	r2, r0
 8009f02:	61e8      	str	r0, [r5, #28]
 8009f04:	b920      	cbnz	r0, 8009f10 <_Bfree+0x20>
 8009f06:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <_Bfree+0x3c>)
 8009f08:	4809      	ldr	r0, [pc, #36]	; (8009f30 <_Bfree+0x40>)
 8009f0a:	218f      	movs	r1, #143	; 0x8f
 8009f0c:	f000 fe9a 	bl	800ac44 <__assert_func>
 8009f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f14:	6006      	str	r6, [r0, #0]
 8009f16:	60c6      	str	r6, [r0, #12]
 8009f18:	b13c      	cbz	r4, 8009f2a <_Bfree+0x3a>
 8009f1a:	69eb      	ldr	r3, [r5, #28]
 8009f1c:	6862      	ldr	r2, [r4, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f24:	6021      	str	r1, [r4, #0]
 8009f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	0800c271 	.word	0x0800c271
 8009f30:	0800c351 	.word	0x0800c351

08009f34 <__multadd>:
 8009f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	690d      	ldr	r5, [r1, #16]
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	461e      	mov	r6, r3
 8009f40:	f101 0c14 	add.w	ip, r1, #20
 8009f44:	2000      	movs	r0, #0
 8009f46:	f8dc 3000 	ldr.w	r3, [ip]
 8009f4a:	b299      	uxth	r1, r3
 8009f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8009f50:	0c1e      	lsrs	r6, r3, #16
 8009f52:	0c0b      	lsrs	r3, r1, #16
 8009f54:	fb02 3306 	mla	r3, r2, r6, r3
 8009f58:	b289      	uxth	r1, r1
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f60:	4285      	cmp	r5, r0
 8009f62:	f84c 1b04 	str.w	r1, [ip], #4
 8009f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f6a:	dcec      	bgt.n	8009f46 <__multadd+0x12>
 8009f6c:	b30e      	cbz	r6, 8009fb2 <__multadd+0x7e>
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	dc19      	bgt.n	8009fa8 <__multadd+0x74>
 8009f74:	6861      	ldr	r1, [r4, #4]
 8009f76:	4638      	mov	r0, r7
 8009f78:	3101      	adds	r1, #1
 8009f7a:	f7ff ff79 	bl	8009e70 <_Balloc>
 8009f7e:	4680      	mov	r8, r0
 8009f80:	b928      	cbnz	r0, 8009f8e <__multadd+0x5a>
 8009f82:	4602      	mov	r2, r0
 8009f84:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <__multadd+0x84>)
 8009f86:	480d      	ldr	r0, [pc, #52]	; (8009fbc <__multadd+0x88>)
 8009f88:	21ba      	movs	r1, #186	; 0xba
 8009f8a:	f000 fe5b 	bl	800ac44 <__assert_func>
 8009f8e:	6922      	ldr	r2, [r4, #16]
 8009f90:	3202      	adds	r2, #2
 8009f92:	f104 010c 	add.w	r1, r4, #12
 8009f96:	0092      	lsls	r2, r2, #2
 8009f98:	300c      	adds	r0, #12
 8009f9a:	f7fe fc6c 	bl	8008876 <memcpy>
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ffa5 	bl	8009ef0 <_Bfree>
 8009fa6:	4644      	mov	r4, r8
 8009fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fac:	3501      	adds	r5, #1
 8009fae:	615e      	str	r6, [r3, #20]
 8009fb0:	6125      	str	r5, [r4, #16]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb8:	0800c2e0 	.word	0x0800c2e0
 8009fbc:	0800c351 	.word	0x0800c351

08009fc0 <__s2b>:
 8009fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	4615      	mov	r5, r2
 8009fc8:	461f      	mov	r7, r3
 8009fca:	2209      	movs	r2, #9
 8009fcc:	3308      	adds	r3, #8
 8009fce:	4606      	mov	r6, r0
 8009fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	db09      	blt.n	8009ff0 <__s2b+0x30>
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f7ff ff47 	bl	8009e70 <_Balloc>
 8009fe2:	b940      	cbnz	r0, 8009ff6 <__s2b+0x36>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	4b19      	ldr	r3, [pc, #100]	; (800a04c <__s2b+0x8c>)
 8009fe8:	4819      	ldr	r0, [pc, #100]	; (800a050 <__s2b+0x90>)
 8009fea:	21d3      	movs	r1, #211	; 0xd3
 8009fec:	f000 fe2a 	bl	800ac44 <__assert_func>
 8009ff0:	0052      	lsls	r2, r2, #1
 8009ff2:	3101      	adds	r1, #1
 8009ff4:	e7f0      	b.n	8009fd8 <__s2b+0x18>
 8009ff6:	9b08      	ldr	r3, [sp, #32]
 8009ff8:	6143      	str	r3, [r0, #20]
 8009ffa:	2d09      	cmp	r5, #9
 8009ffc:	f04f 0301 	mov.w	r3, #1
 800a000:	6103      	str	r3, [r0, #16]
 800a002:	dd16      	ble.n	800a032 <__s2b+0x72>
 800a004:	f104 0909 	add.w	r9, r4, #9
 800a008:	46c8      	mov	r8, r9
 800a00a:	442c      	add	r4, r5
 800a00c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a010:	4601      	mov	r1, r0
 800a012:	3b30      	subs	r3, #48	; 0x30
 800a014:	220a      	movs	r2, #10
 800a016:	4630      	mov	r0, r6
 800a018:	f7ff ff8c 	bl	8009f34 <__multadd>
 800a01c:	45a0      	cmp	r8, r4
 800a01e:	d1f5      	bne.n	800a00c <__s2b+0x4c>
 800a020:	f1a5 0408 	sub.w	r4, r5, #8
 800a024:	444c      	add	r4, r9
 800a026:	1b2d      	subs	r5, r5, r4
 800a028:	1963      	adds	r3, r4, r5
 800a02a:	42bb      	cmp	r3, r7
 800a02c:	db04      	blt.n	800a038 <__s2b+0x78>
 800a02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a032:	340a      	adds	r4, #10
 800a034:	2509      	movs	r5, #9
 800a036:	e7f6      	b.n	800a026 <__s2b+0x66>
 800a038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a03c:	4601      	mov	r1, r0
 800a03e:	3b30      	subs	r3, #48	; 0x30
 800a040:	220a      	movs	r2, #10
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ff76 	bl	8009f34 <__multadd>
 800a048:	e7ee      	b.n	800a028 <__s2b+0x68>
 800a04a:	bf00      	nop
 800a04c:	0800c2e0 	.word	0x0800c2e0
 800a050:	0800c351 	.word	0x0800c351

0800a054 <__hi0bits>:
 800a054:	0c03      	lsrs	r3, r0, #16
 800a056:	041b      	lsls	r3, r3, #16
 800a058:	b9d3      	cbnz	r3, 800a090 <__hi0bits+0x3c>
 800a05a:	0400      	lsls	r0, r0, #16
 800a05c:	2310      	movs	r3, #16
 800a05e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a062:	bf04      	itt	eq
 800a064:	0200      	lsleq	r0, r0, #8
 800a066:	3308      	addeq	r3, #8
 800a068:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a06c:	bf04      	itt	eq
 800a06e:	0100      	lsleq	r0, r0, #4
 800a070:	3304      	addeq	r3, #4
 800a072:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a076:	bf04      	itt	eq
 800a078:	0080      	lsleq	r0, r0, #2
 800a07a:	3302      	addeq	r3, #2
 800a07c:	2800      	cmp	r0, #0
 800a07e:	db05      	blt.n	800a08c <__hi0bits+0x38>
 800a080:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a084:	f103 0301 	add.w	r3, r3, #1
 800a088:	bf08      	it	eq
 800a08a:	2320      	moveq	r3, #32
 800a08c:	4618      	mov	r0, r3
 800a08e:	4770      	bx	lr
 800a090:	2300      	movs	r3, #0
 800a092:	e7e4      	b.n	800a05e <__hi0bits+0xa>

0800a094 <__lo0bits>:
 800a094:	6803      	ldr	r3, [r0, #0]
 800a096:	f013 0207 	ands.w	r2, r3, #7
 800a09a:	d00c      	beq.n	800a0b6 <__lo0bits+0x22>
 800a09c:	07d9      	lsls	r1, r3, #31
 800a09e:	d422      	bmi.n	800a0e6 <__lo0bits+0x52>
 800a0a0:	079a      	lsls	r2, r3, #30
 800a0a2:	bf49      	itett	mi
 800a0a4:	085b      	lsrmi	r3, r3, #1
 800a0a6:	089b      	lsrpl	r3, r3, #2
 800a0a8:	6003      	strmi	r3, [r0, #0]
 800a0aa:	2201      	movmi	r2, #1
 800a0ac:	bf5c      	itt	pl
 800a0ae:	6003      	strpl	r3, [r0, #0]
 800a0b0:	2202      	movpl	r2, #2
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	4770      	bx	lr
 800a0b6:	b299      	uxth	r1, r3
 800a0b8:	b909      	cbnz	r1, 800a0be <__lo0bits+0x2a>
 800a0ba:	0c1b      	lsrs	r3, r3, #16
 800a0bc:	2210      	movs	r2, #16
 800a0be:	b2d9      	uxtb	r1, r3
 800a0c0:	b909      	cbnz	r1, 800a0c6 <__lo0bits+0x32>
 800a0c2:	3208      	adds	r2, #8
 800a0c4:	0a1b      	lsrs	r3, r3, #8
 800a0c6:	0719      	lsls	r1, r3, #28
 800a0c8:	bf04      	itt	eq
 800a0ca:	091b      	lsreq	r3, r3, #4
 800a0cc:	3204      	addeq	r2, #4
 800a0ce:	0799      	lsls	r1, r3, #30
 800a0d0:	bf04      	itt	eq
 800a0d2:	089b      	lsreq	r3, r3, #2
 800a0d4:	3202      	addeq	r2, #2
 800a0d6:	07d9      	lsls	r1, r3, #31
 800a0d8:	d403      	bmi.n	800a0e2 <__lo0bits+0x4e>
 800a0da:	085b      	lsrs	r3, r3, #1
 800a0dc:	f102 0201 	add.w	r2, r2, #1
 800a0e0:	d003      	beq.n	800a0ea <__lo0bits+0x56>
 800a0e2:	6003      	str	r3, [r0, #0]
 800a0e4:	e7e5      	b.n	800a0b2 <__lo0bits+0x1e>
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	e7e3      	b.n	800a0b2 <__lo0bits+0x1e>
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	e7e1      	b.n	800a0b2 <__lo0bits+0x1e>
	...

0800a0f0 <__i2b>:
 800a0f0:	b510      	push	{r4, lr}
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	f7ff febb 	bl	8009e70 <_Balloc>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	b928      	cbnz	r0, 800a10a <__i2b+0x1a>
 800a0fe:	4b05      	ldr	r3, [pc, #20]	; (800a114 <__i2b+0x24>)
 800a100:	4805      	ldr	r0, [pc, #20]	; (800a118 <__i2b+0x28>)
 800a102:	f240 1145 	movw	r1, #325	; 0x145
 800a106:	f000 fd9d 	bl	800ac44 <__assert_func>
 800a10a:	2301      	movs	r3, #1
 800a10c:	6144      	str	r4, [r0, #20]
 800a10e:	6103      	str	r3, [r0, #16]
 800a110:	bd10      	pop	{r4, pc}
 800a112:	bf00      	nop
 800a114:	0800c2e0 	.word	0x0800c2e0
 800a118:	0800c351 	.word	0x0800c351

0800a11c <__multiply>:
 800a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	4691      	mov	r9, r2
 800a122:	690a      	ldr	r2, [r1, #16]
 800a124:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a128:	429a      	cmp	r2, r3
 800a12a:	bfb8      	it	lt
 800a12c:	460b      	movlt	r3, r1
 800a12e:	460c      	mov	r4, r1
 800a130:	bfbc      	itt	lt
 800a132:	464c      	movlt	r4, r9
 800a134:	4699      	movlt	r9, r3
 800a136:	6927      	ldr	r7, [r4, #16]
 800a138:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a13c:	68a3      	ldr	r3, [r4, #8]
 800a13e:	6861      	ldr	r1, [r4, #4]
 800a140:	eb07 060a 	add.w	r6, r7, sl
 800a144:	42b3      	cmp	r3, r6
 800a146:	b085      	sub	sp, #20
 800a148:	bfb8      	it	lt
 800a14a:	3101      	addlt	r1, #1
 800a14c:	f7ff fe90 	bl	8009e70 <_Balloc>
 800a150:	b930      	cbnz	r0, 800a160 <__multiply+0x44>
 800a152:	4602      	mov	r2, r0
 800a154:	4b44      	ldr	r3, [pc, #272]	; (800a268 <__multiply+0x14c>)
 800a156:	4845      	ldr	r0, [pc, #276]	; (800a26c <__multiply+0x150>)
 800a158:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a15c:	f000 fd72 	bl	800ac44 <__assert_func>
 800a160:	f100 0514 	add.w	r5, r0, #20
 800a164:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a168:	462b      	mov	r3, r5
 800a16a:	2200      	movs	r2, #0
 800a16c:	4543      	cmp	r3, r8
 800a16e:	d321      	bcc.n	800a1b4 <__multiply+0x98>
 800a170:	f104 0314 	add.w	r3, r4, #20
 800a174:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a178:	f109 0314 	add.w	r3, r9, #20
 800a17c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a180:	9202      	str	r2, [sp, #8]
 800a182:	1b3a      	subs	r2, r7, r4
 800a184:	3a15      	subs	r2, #21
 800a186:	f022 0203 	bic.w	r2, r2, #3
 800a18a:	3204      	adds	r2, #4
 800a18c:	f104 0115 	add.w	r1, r4, #21
 800a190:	428f      	cmp	r7, r1
 800a192:	bf38      	it	cc
 800a194:	2204      	movcc	r2, #4
 800a196:	9201      	str	r2, [sp, #4]
 800a198:	9a02      	ldr	r2, [sp, #8]
 800a19a:	9303      	str	r3, [sp, #12]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d80c      	bhi.n	800a1ba <__multiply+0x9e>
 800a1a0:	2e00      	cmp	r6, #0
 800a1a2:	dd03      	ble.n	800a1ac <__multiply+0x90>
 800a1a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d05b      	beq.n	800a264 <__multiply+0x148>
 800a1ac:	6106      	str	r6, [r0, #16]
 800a1ae:	b005      	add	sp, #20
 800a1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b4:	f843 2b04 	str.w	r2, [r3], #4
 800a1b8:	e7d8      	b.n	800a16c <__multiply+0x50>
 800a1ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1be:	f1ba 0f00 	cmp.w	sl, #0
 800a1c2:	d024      	beq.n	800a20e <__multiply+0xf2>
 800a1c4:	f104 0e14 	add.w	lr, r4, #20
 800a1c8:	46a9      	mov	r9, r5
 800a1ca:	f04f 0c00 	mov.w	ip, #0
 800a1ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1d2:	f8d9 1000 	ldr.w	r1, [r9]
 800a1d6:	fa1f fb82 	uxth.w	fp, r2
 800a1da:	b289      	uxth	r1, r1
 800a1dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1e4:	f8d9 2000 	ldr.w	r2, [r9]
 800a1e8:	4461      	add	r1, ip
 800a1ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1f6:	b289      	uxth	r1, r1
 800a1f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1fc:	4577      	cmp	r7, lr
 800a1fe:	f849 1b04 	str.w	r1, [r9], #4
 800a202:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a206:	d8e2      	bhi.n	800a1ce <__multiply+0xb2>
 800a208:	9a01      	ldr	r2, [sp, #4]
 800a20a:	f845 c002 	str.w	ip, [r5, r2]
 800a20e:	9a03      	ldr	r2, [sp, #12]
 800a210:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a214:	3304      	adds	r3, #4
 800a216:	f1b9 0f00 	cmp.w	r9, #0
 800a21a:	d021      	beq.n	800a260 <__multiply+0x144>
 800a21c:	6829      	ldr	r1, [r5, #0]
 800a21e:	f104 0c14 	add.w	ip, r4, #20
 800a222:	46ae      	mov	lr, r5
 800a224:	f04f 0a00 	mov.w	sl, #0
 800a228:	f8bc b000 	ldrh.w	fp, [ip]
 800a22c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a230:	fb09 220b 	mla	r2, r9, fp, r2
 800a234:	4452      	add	r2, sl
 800a236:	b289      	uxth	r1, r1
 800a238:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a23c:	f84e 1b04 	str.w	r1, [lr], #4
 800a240:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a244:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a248:	f8be 1000 	ldrh.w	r1, [lr]
 800a24c:	fb09 110a 	mla	r1, r9, sl, r1
 800a250:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a254:	4567      	cmp	r7, ip
 800a256:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a25a:	d8e5      	bhi.n	800a228 <__multiply+0x10c>
 800a25c:	9a01      	ldr	r2, [sp, #4]
 800a25e:	50a9      	str	r1, [r5, r2]
 800a260:	3504      	adds	r5, #4
 800a262:	e799      	b.n	800a198 <__multiply+0x7c>
 800a264:	3e01      	subs	r6, #1
 800a266:	e79b      	b.n	800a1a0 <__multiply+0x84>
 800a268:	0800c2e0 	.word	0x0800c2e0
 800a26c:	0800c351 	.word	0x0800c351

0800a270 <__pow5mult>:
 800a270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a274:	4615      	mov	r5, r2
 800a276:	f012 0203 	ands.w	r2, r2, #3
 800a27a:	4606      	mov	r6, r0
 800a27c:	460f      	mov	r7, r1
 800a27e:	d007      	beq.n	800a290 <__pow5mult+0x20>
 800a280:	4c25      	ldr	r4, [pc, #148]	; (800a318 <__pow5mult+0xa8>)
 800a282:	3a01      	subs	r2, #1
 800a284:	2300      	movs	r3, #0
 800a286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a28a:	f7ff fe53 	bl	8009f34 <__multadd>
 800a28e:	4607      	mov	r7, r0
 800a290:	10ad      	asrs	r5, r5, #2
 800a292:	d03d      	beq.n	800a310 <__pow5mult+0xa0>
 800a294:	69f4      	ldr	r4, [r6, #28]
 800a296:	b97c      	cbnz	r4, 800a2b8 <__pow5mult+0x48>
 800a298:	2010      	movs	r0, #16
 800a29a:	f7ff fd23 	bl	8009ce4 <malloc>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	61f0      	str	r0, [r6, #28]
 800a2a2:	b928      	cbnz	r0, 800a2b0 <__pow5mult+0x40>
 800a2a4:	4b1d      	ldr	r3, [pc, #116]	; (800a31c <__pow5mult+0xac>)
 800a2a6:	481e      	ldr	r0, [pc, #120]	; (800a320 <__pow5mult+0xb0>)
 800a2a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a2ac:	f000 fcca 	bl	800ac44 <__assert_func>
 800a2b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2b4:	6004      	str	r4, [r0, #0]
 800a2b6:	60c4      	str	r4, [r0, #12]
 800a2b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a2bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2c0:	b94c      	cbnz	r4, 800a2d6 <__pow5mult+0x66>
 800a2c2:	f240 2171 	movw	r1, #625	; 0x271
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f7ff ff12 	bl	800a0f0 <__i2b>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	6003      	str	r3, [r0, #0]
 800a2d6:	f04f 0900 	mov.w	r9, #0
 800a2da:	07eb      	lsls	r3, r5, #31
 800a2dc:	d50a      	bpl.n	800a2f4 <__pow5mult+0x84>
 800a2de:	4639      	mov	r1, r7
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	f7ff ff1a 	bl	800a11c <__multiply>
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	4680      	mov	r8, r0
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	f7ff fdff 	bl	8009ef0 <_Bfree>
 800a2f2:	4647      	mov	r7, r8
 800a2f4:	106d      	asrs	r5, r5, #1
 800a2f6:	d00b      	beq.n	800a310 <__pow5mult+0xa0>
 800a2f8:	6820      	ldr	r0, [r4, #0]
 800a2fa:	b938      	cbnz	r0, 800a30c <__pow5mult+0x9c>
 800a2fc:	4622      	mov	r2, r4
 800a2fe:	4621      	mov	r1, r4
 800a300:	4630      	mov	r0, r6
 800a302:	f7ff ff0b 	bl	800a11c <__multiply>
 800a306:	6020      	str	r0, [r4, #0]
 800a308:	f8c0 9000 	str.w	r9, [r0]
 800a30c:	4604      	mov	r4, r0
 800a30e:	e7e4      	b.n	800a2da <__pow5mult+0x6a>
 800a310:	4638      	mov	r0, r7
 800a312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a316:	bf00      	nop
 800a318:	0800c4a0 	.word	0x0800c4a0
 800a31c:	0800c271 	.word	0x0800c271
 800a320:	0800c351 	.word	0x0800c351

0800a324 <__lshift>:
 800a324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a328:	460c      	mov	r4, r1
 800a32a:	6849      	ldr	r1, [r1, #4]
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a332:	68a3      	ldr	r3, [r4, #8]
 800a334:	4607      	mov	r7, r0
 800a336:	4691      	mov	r9, r2
 800a338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a33c:	f108 0601 	add.w	r6, r8, #1
 800a340:	42b3      	cmp	r3, r6
 800a342:	db0b      	blt.n	800a35c <__lshift+0x38>
 800a344:	4638      	mov	r0, r7
 800a346:	f7ff fd93 	bl	8009e70 <_Balloc>
 800a34a:	4605      	mov	r5, r0
 800a34c:	b948      	cbnz	r0, 800a362 <__lshift+0x3e>
 800a34e:	4602      	mov	r2, r0
 800a350:	4b28      	ldr	r3, [pc, #160]	; (800a3f4 <__lshift+0xd0>)
 800a352:	4829      	ldr	r0, [pc, #164]	; (800a3f8 <__lshift+0xd4>)
 800a354:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a358:	f000 fc74 	bl	800ac44 <__assert_func>
 800a35c:	3101      	adds	r1, #1
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	e7ee      	b.n	800a340 <__lshift+0x1c>
 800a362:	2300      	movs	r3, #0
 800a364:	f100 0114 	add.w	r1, r0, #20
 800a368:	f100 0210 	add.w	r2, r0, #16
 800a36c:	4618      	mov	r0, r3
 800a36e:	4553      	cmp	r3, sl
 800a370:	db33      	blt.n	800a3da <__lshift+0xb6>
 800a372:	6920      	ldr	r0, [r4, #16]
 800a374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a378:	f104 0314 	add.w	r3, r4, #20
 800a37c:	f019 091f 	ands.w	r9, r9, #31
 800a380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a384:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a388:	d02b      	beq.n	800a3e2 <__lshift+0xbe>
 800a38a:	f1c9 0e20 	rsb	lr, r9, #32
 800a38e:	468a      	mov	sl, r1
 800a390:	2200      	movs	r2, #0
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	fa00 f009 	lsl.w	r0, r0, r9
 800a398:	4310      	orrs	r0, r2
 800a39a:	f84a 0b04 	str.w	r0, [sl], #4
 800a39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a2:	459c      	cmp	ip, r3
 800a3a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3a8:	d8f3      	bhi.n	800a392 <__lshift+0x6e>
 800a3aa:	ebac 0304 	sub.w	r3, ip, r4
 800a3ae:	3b15      	subs	r3, #21
 800a3b0:	f023 0303 	bic.w	r3, r3, #3
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	f104 0015 	add.w	r0, r4, #21
 800a3ba:	4584      	cmp	ip, r0
 800a3bc:	bf38      	it	cc
 800a3be:	2304      	movcc	r3, #4
 800a3c0:	50ca      	str	r2, [r1, r3]
 800a3c2:	b10a      	cbz	r2, 800a3c8 <__lshift+0xa4>
 800a3c4:	f108 0602 	add.w	r6, r8, #2
 800a3c8:	3e01      	subs	r6, #1
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	612e      	str	r6, [r5, #16]
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	f7ff fd8e 	bl	8009ef0 <_Bfree>
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3de:	3301      	adds	r3, #1
 800a3e0:	e7c5      	b.n	800a36e <__lshift+0x4a>
 800a3e2:	3904      	subs	r1, #4
 800a3e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3ec:	459c      	cmp	ip, r3
 800a3ee:	d8f9      	bhi.n	800a3e4 <__lshift+0xc0>
 800a3f0:	e7ea      	b.n	800a3c8 <__lshift+0xa4>
 800a3f2:	bf00      	nop
 800a3f4:	0800c2e0 	.word	0x0800c2e0
 800a3f8:	0800c351 	.word	0x0800c351

0800a3fc <__mcmp>:
 800a3fc:	b530      	push	{r4, r5, lr}
 800a3fe:	6902      	ldr	r2, [r0, #16]
 800a400:	690c      	ldr	r4, [r1, #16]
 800a402:	1b12      	subs	r2, r2, r4
 800a404:	d10e      	bne.n	800a424 <__mcmp+0x28>
 800a406:	f100 0314 	add.w	r3, r0, #20
 800a40a:	3114      	adds	r1, #20
 800a40c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a410:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a414:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a418:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a41c:	42a5      	cmp	r5, r4
 800a41e:	d003      	beq.n	800a428 <__mcmp+0x2c>
 800a420:	d305      	bcc.n	800a42e <__mcmp+0x32>
 800a422:	2201      	movs	r2, #1
 800a424:	4610      	mov	r0, r2
 800a426:	bd30      	pop	{r4, r5, pc}
 800a428:	4283      	cmp	r3, r0
 800a42a:	d3f3      	bcc.n	800a414 <__mcmp+0x18>
 800a42c:	e7fa      	b.n	800a424 <__mcmp+0x28>
 800a42e:	f04f 32ff 	mov.w	r2, #4294967295
 800a432:	e7f7      	b.n	800a424 <__mcmp+0x28>

0800a434 <__mdiff>:
 800a434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	460c      	mov	r4, r1
 800a43a:	4606      	mov	r6, r0
 800a43c:	4611      	mov	r1, r2
 800a43e:	4620      	mov	r0, r4
 800a440:	4690      	mov	r8, r2
 800a442:	f7ff ffdb 	bl	800a3fc <__mcmp>
 800a446:	1e05      	subs	r5, r0, #0
 800a448:	d110      	bne.n	800a46c <__mdiff+0x38>
 800a44a:	4629      	mov	r1, r5
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff fd0f 	bl	8009e70 <_Balloc>
 800a452:	b930      	cbnz	r0, 800a462 <__mdiff+0x2e>
 800a454:	4b3a      	ldr	r3, [pc, #232]	; (800a540 <__mdiff+0x10c>)
 800a456:	4602      	mov	r2, r0
 800a458:	f240 2137 	movw	r1, #567	; 0x237
 800a45c:	4839      	ldr	r0, [pc, #228]	; (800a544 <__mdiff+0x110>)
 800a45e:	f000 fbf1 	bl	800ac44 <__assert_func>
 800a462:	2301      	movs	r3, #1
 800a464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46c:	bfa4      	itt	ge
 800a46e:	4643      	movge	r3, r8
 800a470:	46a0      	movge	r8, r4
 800a472:	4630      	mov	r0, r6
 800a474:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a478:	bfa6      	itte	ge
 800a47a:	461c      	movge	r4, r3
 800a47c:	2500      	movge	r5, #0
 800a47e:	2501      	movlt	r5, #1
 800a480:	f7ff fcf6 	bl	8009e70 <_Balloc>
 800a484:	b920      	cbnz	r0, 800a490 <__mdiff+0x5c>
 800a486:	4b2e      	ldr	r3, [pc, #184]	; (800a540 <__mdiff+0x10c>)
 800a488:	4602      	mov	r2, r0
 800a48a:	f240 2145 	movw	r1, #581	; 0x245
 800a48e:	e7e5      	b.n	800a45c <__mdiff+0x28>
 800a490:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a494:	6926      	ldr	r6, [r4, #16]
 800a496:	60c5      	str	r5, [r0, #12]
 800a498:	f104 0914 	add.w	r9, r4, #20
 800a49c:	f108 0514 	add.w	r5, r8, #20
 800a4a0:	f100 0e14 	add.w	lr, r0, #20
 800a4a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4ac:	f108 0210 	add.w	r2, r8, #16
 800a4b0:	46f2      	mov	sl, lr
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4bc:	fa11 f88b 	uxtah	r8, r1, fp
 800a4c0:	b299      	uxth	r1, r3
 800a4c2:	0c1b      	lsrs	r3, r3, #16
 800a4c4:	eba8 0801 	sub.w	r8, r8, r1
 800a4c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4d0:	fa1f f888 	uxth.w	r8, r8
 800a4d4:	1419      	asrs	r1, r3, #16
 800a4d6:	454e      	cmp	r6, r9
 800a4d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4dc:	f84a 3b04 	str.w	r3, [sl], #4
 800a4e0:	d8e8      	bhi.n	800a4b4 <__mdiff+0x80>
 800a4e2:	1b33      	subs	r3, r6, r4
 800a4e4:	3b15      	subs	r3, #21
 800a4e6:	f023 0303 	bic.w	r3, r3, #3
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	3415      	adds	r4, #21
 800a4ee:	42a6      	cmp	r6, r4
 800a4f0:	bf38      	it	cc
 800a4f2:	2304      	movcc	r3, #4
 800a4f4:	441d      	add	r5, r3
 800a4f6:	4473      	add	r3, lr
 800a4f8:	469e      	mov	lr, r3
 800a4fa:	462e      	mov	r6, r5
 800a4fc:	4566      	cmp	r6, ip
 800a4fe:	d30e      	bcc.n	800a51e <__mdiff+0xea>
 800a500:	f10c 0203 	add.w	r2, ip, #3
 800a504:	1b52      	subs	r2, r2, r5
 800a506:	f022 0203 	bic.w	r2, r2, #3
 800a50a:	3d03      	subs	r5, #3
 800a50c:	45ac      	cmp	ip, r5
 800a50e:	bf38      	it	cc
 800a510:	2200      	movcc	r2, #0
 800a512:	4413      	add	r3, r2
 800a514:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a518:	b17a      	cbz	r2, 800a53a <__mdiff+0x106>
 800a51a:	6107      	str	r7, [r0, #16]
 800a51c:	e7a4      	b.n	800a468 <__mdiff+0x34>
 800a51e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a522:	fa11 f288 	uxtah	r2, r1, r8
 800a526:	1414      	asrs	r4, r2, #16
 800a528:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a52c:	b292      	uxth	r2, r2
 800a52e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a532:	f84e 2b04 	str.w	r2, [lr], #4
 800a536:	1421      	asrs	r1, r4, #16
 800a538:	e7e0      	b.n	800a4fc <__mdiff+0xc8>
 800a53a:	3f01      	subs	r7, #1
 800a53c:	e7ea      	b.n	800a514 <__mdiff+0xe0>
 800a53e:	bf00      	nop
 800a540:	0800c2e0 	.word	0x0800c2e0
 800a544:	0800c351 	.word	0x0800c351

0800a548 <__ulp>:
 800a548:	b082      	sub	sp, #8
 800a54a:	ed8d 0b00 	vstr	d0, [sp]
 800a54e:	9a01      	ldr	r2, [sp, #4]
 800a550:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <__ulp+0x48>)
 800a552:	4013      	ands	r3, r2
 800a554:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dc08      	bgt.n	800a56e <__ulp+0x26>
 800a55c:	425b      	negs	r3, r3
 800a55e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a562:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a566:	da04      	bge.n	800a572 <__ulp+0x2a>
 800a568:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a56c:	4113      	asrs	r3, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	e008      	b.n	800a584 <__ulp+0x3c>
 800a572:	f1a2 0314 	sub.w	r3, r2, #20
 800a576:	2b1e      	cmp	r3, #30
 800a578:	bfda      	itte	le
 800a57a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a57e:	40da      	lsrle	r2, r3
 800a580:	2201      	movgt	r2, #1
 800a582:	2300      	movs	r3, #0
 800a584:	4619      	mov	r1, r3
 800a586:	4610      	mov	r0, r2
 800a588:	ec41 0b10 	vmov	d0, r0, r1
 800a58c:	b002      	add	sp, #8
 800a58e:	4770      	bx	lr
 800a590:	7ff00000 	.word	0x7ff00000

0800a594 <__b2d>:
 800a594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a598:	6906      	ldr	r6, [r0, #16]
 800a59a:	f100 0814 	add.w	r8, r0, #20
 800a59e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a5a2:	1f37      	subs	r7, r6, #4
 800a5a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	f7ff fd53 	bl	800a054 <__hi0bits>
 800a5ae:	f1c0 0320 	rsb	r3, r0, #32
 800a5b2:	280a      	cmp	r0, #10
 800a5b4:	600b      	str	r3, [r1, #0]
 800a5b6:	491b      	ldr	r1, [pc, #108]	; (800a624 <__b2d+0x90>)
 800a5b8:	dc15      	bgt.n	800a5e6 <__b2d+0x52>
 800a5ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5be:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5c2:	45b8      	cmp	r8, r7
 800a5c4:	ea43 0501 	orr.w	r5, r3, r1
 800a5c8:	bf34      	ite	cc
 800a5ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5ce:	2300      	movcs	r3, #0
 800a5d0:	3015      	adds	r0, #21
 800a5d2:	fa02 f000 	lsl.w	r0, r2, r0
 800a5d6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a5da:	4303      	orrs	r3, r0
 800a5dc:	461c      	mov	r4, r3
 800a5de:	ec45 4b10 	vmov	d0, r4, r5
 800a5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e6:	45b8      	cmp	r8, r7
 800a5e8:	bf3a      	itte	cc
 800a5ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5ee:	f1a6 0708 	subcc.w	r7, r6, #8
 800a5f2:	2300      	movcs	r3, #0
 800a5f4:	380b      	subs	r0, #11
 800a5f6:	d012      	beq.n	800a61e <__b2d+0x8a>
 800a5f8:	f1c0 0120 	rsb	r1, r0, #32
 800a5fc:	fa23 f401 	lsr.w	r4, r3, r1
 800a600:	4082      	lsls	r2, r0
 800a602:	4322      	orrs	r2, r4
 800a604:	4547      	cmp	r7, r8
 800a606:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a60a:	bf8c      	ite	hi
 800a60c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a610:	2200      	movls	r2, #0
 800a612:	4083      	lsls	r3, r0
 800a614:	40ca      	lsrs	r2, r1
 800a616:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a61a:	4313      	orrs	r3, r2
 800a61c:	e7de      	b.n	800a5dc <__b2d+0x48>
 800a61e:	ea42 0501 	orr.w	r5, r2, r1
 800a622:	e7db      	b.n	800a5dc <__b2d+0x48>
 800a624:	3ff00000 	.word	0x3ff00000

0800a628 <__d2b>:
 800a628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a62c:	460f      	mov	r7, r1
 800a62e:	2101      	movs	r1, #1
 800a630:	ec59 8b10 	vmov	r8, r9, d0
 800a634:	4616      	mov	r6, r2
 800a636:	f7ff fc1b 	bl	8009e70 <_Balloc>
 800a63a:	4604      	mov	r4, r0
 800a63c:	b930      	cbnz	r0, 800a64c <__d2b+0x24>
 800a63e:	4602      	mov	r2, r0
 800a640:	4b24      	ldr	r3, [pc, #144]	; (800a6d4 <__d2b+0xac>)
 800a642:	4825      	ldr	r0, [pc, #148]	; (800a6d8 <__d2b+0xb0>)
 800a644:	f240 310f 	movw	r1, #783	; 0x30f
 800a648:	f000 fafc 	bl	800ac44 <__assert_func>
 800a64c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a654:	bb2d      	cbnz	r5, 800a6a2 <__d2b+0x7a>
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	f1b8 0300 	subs.w	r3, r8, #0
 800a65c:	d026      	beq.n	800a6ac <__d2b+0x84>
 800a65e:	4668      	mov	r0, sp
 800a660:	9300      	str	r3, [sp, #0]
 800a662:	f7ff fd17 	bl	800a094 <__lo0bits>
 800a666:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a66a:	b1e8      	cbz	r0, 800a6a8 <__d2b+0x80>
 800a66c:	f1c0 0320 	rsb	r3, r0, #32
 800a670:	fa02 f303 	lsl.w	r3, r2, r3
 800a674:	430b      	orrs	r3, r1
 800a676:	40c2      	lsrs	r2, r0
 800a678:	6163      	str	r3, [r4, #20]
 800a67a:	9201      	str	r2, [sp, #4]
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	61a3      	str	r3, [r4, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	bf14      	ite	ne
 800a684:	2202      	movne	r2, #2
 800a686:	2201      	moveq	r2, #1
 800a688:	6122      	str	r2, [r4, #16]
 800a68a:	b1bd      	cbz	r5, 800a6bc <__d2b+0x94>
 800a68c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a690:	4405      	add	r5, r0
 800a692:	603d      	str	r5, [r7, #0]
 800a694:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a698:	6030      	str	r0, [r6, #0]
 800a69a:	4620      	mov	r0, r4
 800a69c:	b003      	add	sp, #12
 800a69e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6a6:	e7d6      	b.n	800a656 <__d2b+0x2e>
 800a6a8:	6161      	str	r1, [r4, #20]
 800a6aa:	e7e7      	b.n	800a67c <__d2b+0x54>
 800a6ac:	a801      	add	r0, sp, #4
 800a6ae:	f7ff fcf1 	bl	800a094 <__lo0bits>
 800a6b2:	9b01      	ldr	r3, [sp, #4]
 800a6b4:	6163      	str	r3, [r4, #20]
 800a6b6:	3020      	adds	r0, #32
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	e7e5      	b.n	800a688 <__d2b+0x60>
 800a6bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6c4:	6038      	str	r0, [r7, #0]
 800a6c6:	6918      	ldr	r0, [r3, #16]
 800a6c8:	f7ff fcc4 	bl	800a054 <__hi0bits>
 800a6cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6d0:	e7e2      	b.n	800a698 <__d2b+0x70>
 800a6d2:	bf00      	nop
 800a6d4:	0800c2e0 	.word	0x0800c2e0
 800a6d8:	0800c351 	.word	0x0800c351

0800a6dc <__ratio>:
 800a6dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	4688      	mov	r8, r1
 800a6e2:	4669      	mov	r1, sp
 800a6e4:	4681      	mov	r9, r0
 800a6e6:	f7ff ff55 	bl	800a594 <__b2d>
 800a6ea:	a901      	add	r1, sp, #4
 800a6ec:	4640      	mov	r0, r8
 800a6ee:	ec55 4b10 	vmov	r4, r5, d0
 800a6f2:	f7ff ff4f 	bl	800a594 <__b2d>
 800a6f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6fe:	eba3 0c02 	sub.w	ip, r3, r2
 800a702:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a706:	1a9b      	subs	r3, r3, r2
 800a708:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a70c:	ec51 0b10 	vmov	r0, r1, d0
 800a710:	2b00      	cmp	r3, #0
 800a712:	bfd6      	itet	le
 800a714:	460a      	movle	r2, r1
 800a716:	462a      	movgt	r2, r5
 800a718:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a71c:	468b      	mov	fp, r1
 800a71e:	462f      	mov	r7, r5
 800a720:	bfd4      	ite	le
 800a722:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a726:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a72a:	4620      	mov	r0, r4
 800a72c:	ee10 2a10 	vmov	r2, s0
 800a730:	465b      	mov	r3, fp
 800a732:	4639      	mov	r1, r7
 800a734:	f7f6 f88a 	bl	800084c <__aeabi_ddiv>
 800a738:	ec41 0b10 	vmov	d0, r0, r1
 800a73c:	b003      	add	sp, #12
 800a73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a742 <__copybits>:
 800a742:	3901      	subs	r1, #1
 800a744:	b570      	push	{r4, r5, r6, lr}
 800a746:	1149      	asrs	r1, r1, #5
 800a748:	6914      	ldr	r4, [r2, #16]
 800a74a:	3101      	adds	r1, #1
 800a74c:	f102 0314 	add.w	r3, r2, #20
 800a750:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a754:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a758:	1f05      	subs	r5, r0, #4
 800a75a:	42a3      	cmp	r3, r4
 800a75c:	d30c      	bcc.n	800a778 <__copybits+0x36>
 800a75e:	1aa3      	subs	r3, r4, r2
 800a760:	3b11      	subs	r3, #17
 800a762:	f023 0303 	bic.w	r3, r3, #3
 800a766:	3211      	adds	r2, #17
 800a768:	42a2      	cmp	r2, r4
 800a76a:	bf88      	it	hi
 800a76c:	2300      	movhi	r3, #0
 800a76e:	4418      	add	r0, r3
 800a770:	2300      	movs	r3, #0
 800a772:	4288      	cmp	r0, r1
 800a774:	d305      	bcc.n	800a782 <__copybits+0x40>
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	f853 6b04 	ldr.w	r6, [r3], #4
 800a77c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a780:	e7eb      	b.n	800a75a <__copybits+0x18>
 800a782:	f840 3b04 	str.w	r3, [r0], #4
 800a786:	e7f4      	b.n	800a772 <__copybits+0x30>

0800a788 <__any_on>:
 800a788:	f100 0214 	add.w	r2, r0, #20
 800a78c:	6900      	ldr	r0, [r0, #16]
 800a78e:	114b      	asrs	r3, r1, #5
 800a790:	4298      	cmp	r0, r3
 800a792:	b510      	push	{r4, lr}
 800a794:	db11      	blt.n	800a7ba <__any_on+0x32>
 800a796:	dd0a      	ble.n	800a7ae <__any_on+0x26>
 800a798:	f011 011f 	ands.w	r1, r1, #31
 800a79c:	d007      	beq.n	800a7ae <__any_on+0x26>
 800a79e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7a2:	fa24 f001 	lsr.w	r0, r4, r1
 800a7a6:	fa00 f101 	lsl.w	r1, r0, r1
 800a7aa:	428c      	cmp	r4, r1
 800a7ac:	d10b      	bne.n	800a7c6 <__any_on+0x3e>
 800a7ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d803      	bhi.n	800a7be <__any_on+0x36>
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	bd10      	pop	{r4, pc}
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	e7f7      	b.n	800a7ae <__any_on+0x26>
 800a7be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7c2:	2900      	cmp	r1, #0
 800a7c4:	d0f5      	beq.n	800a7b2 <__any_on+0x2a>
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	e7f6      	b.n	800a7b8 <__any_on+0x30>

0800a7ca <__ascii_wctomb>:
 800a7ca:	b149      	cbz	r1, 800a7e0 <__ascii_wctomb+0x16>
 800a7cc:	2aff      	cmp	r2, #255	; 0xff
 800a7ce:	bf85      	ittet	hi
 800a7d0:	238a      	movhi	r3, #138	; 0x8a
 800a7d2:	6003      	strhi	r3, [r0, #0]
 800a7d4:	700a      	strbls	r2, [r1, #0]
 800a7d6:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7da:	bf98      	it	ls
 800a7dc:	2001      	movls	r0, #1
 800a7de:	4770      	bx	lr
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	4770      	bx	lr

0800a7e4 <__ssputs_r>:
 800a7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e8:	688e      	ldr	r6, [r1, #8]
 800a7ea:	461f      	mov	r7, r3
 800a7ec:	42be      	cmp	r6, r7
 800a7ee:	680b      	ldr	r3, [r1, #0]
 800a7f0:	4682      	mov	sl, r0
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	4690      	mov	r8, r2
 800a7f6:	d82c      	bhi.n	800a852 <__ssputs_r+0x6e>
 800a7f8:	898a      	ldrh	r2, [r1, #12]
 800a7fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7fe:	d026      	beq.n	800a84e <__ssputs_r+0x6a>
 800a800:	6965      	ldr	r5, [r4, #20]
 800a802:	6909      	ldr	r1, [r1, #16]
 800a804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a808:	eba3 0901 	sub.w	r9, r3, r1
 800a80c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a810:	1c7b      	adds	r3, r7, #1
 800a812:	444b      	add	r3, r9
 800a814:	106d      	asrs	r5, r5, #1
 800a816:	429d      	cmp	r5, r3
 800a818:	bf38      	it	cc
 800a81a:	461d      	movcc	r5, r3
 800a81c:	0553      	lsls	r3, r2, #21
 800a81e:	d527      	bpl.n	800a870 <__ssputs_r+0x8c>
 800a820:	4629      	mov	r1, r5
 800a822:	f7ff fa87 	bl	8009d34 <_malloc_r>
 800a826:	4606      	mov	r6, r0
 800a828:	b360      	cbz	r0, 800a884 <__ssputs_r+0xa0>
 800a82a:	6921      	ldr	r1, [r4, #16]
 800a82c:	464a      	mov	r2, r9
 800a82e:	f7fe f822 	bl	8008876 <memcpy>
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	6126      	str	r6, [r4, #16]
 800a840:	6165      	str	r5, [r4, #20]
 800a842:	444e      	add	r6, r9
 800a844:	eba5 0509 	sub.w	r5, r5, r9
 800a848:	6026      	str	r6, [r4, #0]
 800a84a:	60a5      	str	r5, [r4, #8]
 800a84c:	463e      	mov	r6, r7
 800a84e:	42be      	cmp	r6, r7
 800a850:	d900      	bls.n	800a854 <__ssputs_r+0x70>
 800a852:	463e      	mov	r6, r7
 800a854:	6820      	ldr	r0, [r4, #0]
 800a856:	4632      	mov	r2, r6
 800a858:	4641      	mov	r1, r8
 800a85a:	f000 f9c9 	bl	800abf0 <memmove>
 800a85e:	68a3      	ldr	r3, [r4, #8]
 800a860:	1b9b      	subs	r3, r3, r6
 800a862:	60a3      	str	r3, [r4, #8]
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	4433      	add	r3, r6
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	2000      	movs	r0, #0
 800a86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a870:	462a      	mov	r2, r5
 800a872:	f000 fa1b 	bl	800acac <_realloc_r>
 800a876:	4606      	mov	r6, r0
 800a878:	2800      	cmp	r0, #0
 800a87a:	d1e0      	bne.n	800a83e <__ssputs_r+0x5a>
 800a87c:	6921      	ldr	r1, [r4, #16]
 800a87e:	4650      	mov	r0, sl
 800a880:	f7fe fe8c 	bl	800959c <_free_r>
 800a884:	230c      	movs	r3, #12
 800a886:	f8ca 3000 	str.w	r3, [sl]
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a890:	81a3      	strh	r3, [r4, #12]
 800a892:	f04f 30ff 	mov.w	r0, #4294967295
 800a896:	e7e9      	b.n	800a86c <__ssputs_r+0x88>

0800a898 <_svfiprintf_r>:
 800a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	4698      	mov	r8, r3
 800a89e:	898b      	ldrh	r3, [r1, #12]
 800a8a0:	061b      	lsls	r3, r3, #24
 800a8a2:	b09d      	sub	sp, #116	; 0x74
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	460d      	mov	r5, r1
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	d50e      	bpl.n	800a8ca <_svfiprintf_r+0x32>
 800a8ac:	690b      	ldr	r3, [r1, #16]
 800a8ae:	b963      	cbnz	r3, 800a8ca <_svfiprintf_r+0x32>
 800a8b0:	2140      	movs	r1, #64	; 0x40
 800a8b2:	f7ff fa3f 	bl	8009d34 <_malloc_r>
 800a8b6:	6028      	str	r0, [r5, #0]
 800a8b8:	6128      	str	r0, [r5, #16]
 800a8ba:	b920      	cbnz	r0, 800a8c6 <_svfiprintf_r+0x2e>
 800a8bc:	230c      	movs	r3, #12
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c4:	e0d0      	b.n	800aa68 <_svfiprintf_r+0x1d0>
 800a8c6:	2340      	movs	r3, #64	; 0x40
 800a8c8:	616b      	str	r3, [r5, #20]
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ce:	2320      	movs	r3, #32
 800a8d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8d8:	2330      	movs	r3, #48	; 0x30
 800a8da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa80 <_svfiprintf_r+0x1e8>
 800a8de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8e2:	f04f 0901 	mov.w	r9, #1
 800a8e6:	4623      	mov	r3, r4
 800a8e8:	469a      	mov	sl, r3
 800a8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ee:	b10a      	cbz	r2, 800a8f4 <_svfiprintf_r+0x5c>
 800a8f0:	2a25      	cmp	r2, #37	; 0x25
 800a8f2:	d1f9      	bne.n	800a8e8 <_svfiprintf_r+0x50>
 800a8f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8f8:	d00b      	beq.n	800a912 <_svfiprintf_r+0x7a>
 800a8fa:	465b      	mov	r3, fp
 800a8fc:	4622      	mov	r2, r4
 800a8fe:	4629      	mov	r1, r5
 800a900:	4638      	mov	r0, r7
 800a902:	f7ff ff6f 	bl	800a7e4 <__ssputs_r>
 800a906:	3001      	adds	r0, #1
 800a908:	f000 80a9 	beq.w	800aa5e <_svfiprintf_r+0x1c6>
 800a90c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a90e:	445a      	add	r2, fp
 800a910:	9209      	str	r2, [sp, #36]	; 0x24
 800a912:	f89a 3000 	ldrb.w	r3, [sl]
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 80a1 	beq.w	800aa5e <_svfiprintf_r+0x1c6>
 800a91c:	2300      	movs	r3, #0
 800a91e:	f04f 32ff 	mov.w	r2, #4294967295
 800a922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a926:	f10a 0a01 	add.w	sl, sl, #1
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	9307      	str	r3, [sp, #28]
 800a92e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a932:	931a      	str	r3, [sp, #104]	; 0x68
 800a934:	4654      	mov	r4, sl
 800a936:	2205      	movs	r2, #5
 800a938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a93c:	4850      	ldr	r0, [pc, #320]	; (800aa80 <_svfiprintf_r+0x1e8>)
 800a93e:	f7f5 fc47 	bl	80001d0 <memchr>
 800a942:	9a04      	ldr	r2, [sp, #16]
 800a944:	b9d8      	cbnz	r0, 800a97e <_svfiprintf_r+0xe6>
 800a946:	06d0      	lsls	r0, r2, #27
 800a948:	bf44      	itt	mi
 800a94a:	2320      	movmi	r3, #32
 800a94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a950:	0711      	lsls	r1, r2, #28
 800a952:	bf44      	itt	mi
 800a954:	232b      	movmi	r3, #43	; 0x2b
 800a956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a95a:	f89a 3000 	ldrb.w	r3, [sl]
 800a95e:	2b2a      	cmp	r3, #42	; 0x2a
 800a960:	d015      	beq.n	800a98e <_svfiprintf_r+0xf6>
 800a962:	9a07      	ldr	r2, [sp, #28]
 800a964:	4654      	mov	r4, sl
 800a966:	2000      	movs	r0, #0
 800a968:	f04f 0c0a 	mov.w	ip, #10
 800a96c:	4621      	mov	r1, r4
 800a96e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a972:	3b30      	subs	r3, #48	; 0x30
 800a974:	2b09      	cmp	r3, #9
 800a976:	d94d      	bls.n	800aa14 <_svfiprintf_r+0x17c>
 800a978:	b1b0      	cbz	r0, 800a9a8 <_svfiprintf_r+0x110>
 800a97a:	9207      	str	r2, [sp, #28]
 800a97c:	e014      	b.n	800a9a8 <_svfiprintf_r+0x110>
 800a97e:	eba0 0308 	sub.w	r3, r0, r8
 800a982:	fa09 f303 	lsl.w	r3, r9, r3
 800a986:	4313      	orrs	r3, r2
 800a988:	9304      	str	r3, [sp, #16]
 800a98a:	46a2      	mov	sl, r4
 800a98c:	e7d2      	b.n	800a934 <_svfiprintf_r+0x9c>
 800a98e:	9b03      	ldr	r3, [sp, #12]
 800a990:	1d19      	adds	r1, r3, #4
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	9103      	str	r1, [sp, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	bfbb      	ittet	lt
 800a99a:	425b      	neglt	r3, r3
 800a99c:	f042 0202 	orrlt.w	r2, r2, #2
 800a9a0:	9307      	strge	r3, [sp, #28]
 800a9a2:	9307      	strlt	r3, [sp, #28]
 800a9a4:	bfb8      	it	lt
 800a9a6:	9204      	strlt	r2, [sp, #16]
 800a9a8:	7823      	ldrb	r3, [r4, #0]
 800a9aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a9ac:	d10c      	bne.n	800a9c8 <_svfiprintf_r+0x130>
 800a9ae:	7863      	ldrb	r3, [r4, #1]
 800a9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b2:	d134      	bne.n	800aa1e <_svfiprintf_r+0x186>
 800a9b4:	9b03      	ldr	r3, [sp, #12]
 800a9b6:	1d1a      	adds	r2, r3, #4
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	9203      	str	r2, [sp, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bfb8      	it	lt
 800a9c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9c4:	3402      	adds	r4, #2
 800a9c6:	9305      	str	r3, [sp, #20]
 800a9c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aa90 <_svfiprintf_r+0x1f8>
 800a9cc:	7821      	ldrb	r1, [r4, #0]
 800a9ce:	2203      	movs	r2, #3
 800a9d0:	4650      	mov	r0, sl
 800a9d2:	f7f5 fbfd 	bl	80001d0 <memchr>
 800a9d6:	b138      	cbz	r0, 800a9e8 <_svfiprintf_r+0x150>
 800a9d8:	9b04      	ldr	r3, [sp, #16]
 800a9da:	eba0 000a 	sub.w	r0, r0, sl
 800a9de:	2240      	movs	r2, #64	; 0x40
 800a9e0:	4082      	lsls	r2, r0
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	3401      	adds	r4, #1
 800a9e6:	9304      	str	r3, [sp, #16]
 800a9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ec:	4825      	ldr	r0, [pc, #148]	; (800aa84 <_svfiprintf_r+0x1ec>)
 800a9ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9f2:	2206      	movs	r2, #6
 800a9f4:	f7f5 fbec 	bl	80001d0 <memchr>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d038      	beq.n	800aa6e <_svfiprintf_r+0x1d6>
 800a9fc:	4b22      	ldr	r3, [pc, #136]	; (800aa88 <_svfiprintf_r+0x1f0>)
 800a9fe:	bb1b      	cbnz	r3, 800aa48 <_svfiprintf_r+0x1b0>
 800aa00:	9b03      	ldr	r3, [sp, #12]
 800aa02:	3307      	adds	r3, #7
 800aa04:	f023 0307 	bic.w	r3, r3, #7
 800aa08:	3308      	adds	r3, #8
 800aa0a:	9303      	str	r3, [sp, #12]
 800aa0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0e:	4433      	add	r3, r6
 800aa10:	9309      	str	r3, [sp, #36]	; 0x24
 800aa12:	e768      	b.n	800a8e6 <_svfiprintf_r+0x4e>
 800aa14:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa18:	460c      	mov	r4, r1
 800aa1a:	2001      	movs	r0, #1
 800aa1c:	e7a6      	b.n	800a96c <_svfiprintf_r+0xd4>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	3401      	adds	r4, #1
 800aa22:	9305      	str	r3, [sp, #20]
 800aa24:	4619      	mov	r1, r3
 800aa26:	f04f 0c0a 	mov.w	ip, #10
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa30:	3a30      	subs	r2, #48	; 0x30
 800aa32:	2a09      	cmp	r2, #9
 800aa34:	d903      	bls.n	800aa3e <_svfiprintf_r+0x1a6>
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0c6      	beq.n	800a9c8 <_svfiprintf_r+0x130>
 800aa3a:	9105      	str	r1, [sp, #20]
 800aa3c:	e7c4      	b.n	800a9c8 <_svfiprintf_r+0x130>
 800aa3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa42:	4604      	mov	r4, r0
 800aa44:	2301      	movs	r3, #1
 800aa46:	e7f0      	b.n	800aa2a <_svfiprintf_r+0x192>
 800aa48:	ab03      	add	r3, sp, #12
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <_svfiprintf_r+0x1f4>)
 800aa50:	a904      	add	r1, sp, #16
 800aa52:	4638      	mov	r0, r7
 800aa54:	f7fd f970 	bl	8007d38 <_printf_float>
 800aa58:	1c42      	adds	r2, r0, #1
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	d1d6      	bne.n	800aa0c <_svfiprintf_r+0x174>
 800aa5e:	89ab      	ldrh	r3, [r5, #12]
 800aa60:	065b      	lsls	r3, r3, #25
 800aa62:	f53f af2d 	bmi.w	800a8c0 <_svfiprintf_r+0x28>
 800aa66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa68:	b01d      	add	sp, #116	; 0x74
 800aa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6e:	ab03      	add	r3, sp, #12
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	462a      	mov	r2, r5
 800aa74:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <_svfiprintf_r+0x1f4>)
 800aa76:	a904      	add	r1, sp, #16
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f7fd fc01 	bl	8008280 <_printf_i>
 800aa7e:	e7eb      	b.n	800aa58 <_svfiprintf_r+0x1c0>
 800aa80:	0800c5ad 	.word	0x0800c5ad
 800aa84:	0800c5b7 	.word	0x0800c5b7
 800aa88:	08007d39 	.word	0x08007d39
 800aa8c:	0800a7e5 	.word	0x0800a7e5
 800aa90:	0800c5b3 	.word	0x0800c5b3

0800aa94 <__sflush_r>:
 800aa94:	898a      	ldrh	r2, [r1, #12]
 800aa96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	0710      	lsls	r0, r2, #28
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	d458      	bmi.n	800ab54 <__sflush_r+0xc0>
 800aaa2:	684b      	ldr	r3, [r1, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	dc05      	bgt.n	800aab4 <__sflush_r+0x20>
 800aaa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	dc02      	bgt.n	800aab4 <__sflush_r+0x20>
 800aaae:	2000      	movs	r0, #0
 800aab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aab6:	2e00      	cmp	r6, #0
 800aab8:	d0f9      	beq.n	800aaae <__sflush_r+0x1a>
 800aaba:	2300      	movs	r3, #0
 800aabc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aac0:	682f      	ldr	r7, [r5, #0]
 800aac2:	6a21      	ldr	r1, [r4, #32]
 800aac4:	602b      	str	r3, [r5, #0]
 800aac6:	d032      	beq.n	800ab2e <__sflush_r+0x9a>
 800aac8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	075a      	lsls	r2, r3, #29
 800aace:	d505      	bpl.n	800aadc <__sflush_r+0x48>
 800aad0:	6863      	ldr	r3, [r4, #4]
 800aad2:	1ac0      	subs	r0, r0, r3
 800aad4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aad6:	b10b      	cbz	r3, 800aadc <__sflush_r+0x48>
 800aad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aada:	1ac0      	subs	r0, r0, r3
 800aadc:	2300      	movs	r3, #0
 800aade:	4602      	mov	r2, r0
 800aae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aae2:	6a21      	ldr	r1, [r4, #32]
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b0      	blx	r6
 800aae8:	1c43      	adds	r3, r0, #1
 800aaea:	89a3      	ldrh	r3, [r4, #12]
 800aaec:	d106      	bne.n	800aafc <__sflush_r+0x68>
 800aaee:	6829      	ldr	r1, [r5, #0]
 800aaf0:	291d      	cmp	r1, #29
 800aaf2:	d82b      	bhi.n	800ab4c <__sflush_r+0xb8>
 800aaf4:	4a29      	ldr	r2, [pc, #164]	; (800ab9c <__sflush_r+0x108>)
 800aaf6:	410a      	asrs	r2, r1
 800aaf8:	07d6      	lsls	r6, r2, #31
 800aafa:	d427      	bmi.n	800ab4c <__sflush_r+0xb8>
 800aafc:	2200      	movs	r2, #0
 800aafe:	6062      	str	r2, [r4, #4]
 800ab00:	04d9      	lsls	r1, r3, #19
 800ab02:	6922      	ldr	r2, [r4, #16]
 800ab04:	6022      	str	r2, [r4, #0]
 800ab06:	d504      	bpl.n	800ab12 <__sflush_r+0x7e>
 800ab08:	1c42      	adds	r2, r0, #1
 800ab0a:	d101      	bne.n	800ab10 <__sflush_r+0x7c>
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	b903      	cbnz	r3, 800ab12 <__sflush_r+0x7e>
 800ab10:	6560      	str	r0, [r4, #84]	; 0x54
 800ab12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab14:	602f      	str	r7, [r5, #0]
 800ab16:	2900      	cmp	r1, #0
 800ab18:	d0c9      	beq.n	800aaae <__sflush_r+0x1a>
 800ab1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab1e:	4299      	cmp	r1, r3
 800ab20:	d002      	beq.n	800ab28 <__sflush_r+0x94>
 800ab22:	4628      	mov	r0, r5
 800ab24:	f7fe fd3a 	bl	800959c <_free_r>
 800ab28:	2000      	movs	r0, #0
 800ab2a:	6360      	str	r0, [r4, #52]	; 0x34
 800ab2c:	e7c0      	b.n	800aab0 <__sflush_r+0x1c>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	4628      	mov	r0, r5
 800ab32:	47b0      	blx	r6
 800ab34:	1c41      	adds	r1, r0, #1
 800ab36:	d1c8      	bne.n	800aaca <__sflush_r+0x36>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0c5      	beq.n	800aaca <__sflush_r+0x36>
 800ab3e:	2b1d      	cmp	r3, #29
 800ab40:	d001      	beq.n	800ab46 <__sflush_r+0xb2>
 800ab42:	2b16      	cmp	r3, #22
 800ab44:	d101      	bne.n	800ab4a <__sflush_r+0xb6>
 800ab46:	602f      	str	r7, [r5, #0]
 800ab48:	e7b1      	b.n	800aaae <__sflush_r+0x1a>
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab50:	81a3      	strh	r3, [r4, #12]
 800ab52:	e7ad      	b.n	800aab0 <__sflush_r+0x1c>
 800ab54:	690f      	ldr	r7, [r1, #16]
 800ab56:	2f00      	cmp	r7, #0
 800ab58:	d0a9      	beq.n	800aaae <__sflush_r+0x1a>
 800ab5a:	0793      	lsls	r3, r2, #30
 800ab5c:	680e      	ldr	r6, [r1, #0]
 800ab5e:	bf08      	it	eq
 800ab60:	694b      	ldreq	r3, [r1, #20]
 800ab62:	600f      	str	r7, [r1, #0]
 800ab64:	bf18      	it	ne
 800ab66:	2300      	movne	r3, #0
 800ab68:	eba6 0807 	sub.w	r8, r6, r7
 800ab6c:	608b      	str	r3, [r1, #8]
 800ab6e:	f1b8 0f00 	cmp.w	r8, #0
 800ab72:	dd9c      	ble.n	800aaae <__sflush_r+0x1a>
 800ab74:	6a21      	ldr	r1, [r4, #32]
 800ab76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab78:	4643      	mov	r3, r8
 800ab7a:	463a      	mov	r2, r7
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	47b0      	blx	r6
 800ab80:	2800      	cmp	r0, #0
 800ab82:	dc06      	bgt.n	800ab92 <__sflush_r+0xfe>
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab90:	e78e      	b.n	800aab0 <__sflush_r+0x1c>
 800ab92:	4407      	add	r7, r0
 800ab94:	eba8 0800 	sub.w	r8, r8, r0
 800ab98:	e7e9      	b.n	800ab6e <__sflush_r+0xda>
 800ab9a:	bf00      	nop
 800ab9c:	dfbffffe 	.word	0xdfbffffe

0800aba0 <_fflush_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	690b      	ldr	r3, [r1, #16]
 800aba4:	4605      	mov	r5, r0
 800aba6:	460c      	mov	r4, r1
 800aba8:	b913      	cbnz	r3, 800abb0 <_fflush_r+0x10>
 800abaa:	2500      	movs	r5, #0
 800abac:	4628      	mov	r0, r5
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	b118      	cbz	r0, 800abba <_fflush_r+0x1a>
 800abb2:	6a03      	ldr	r3, [r0, #32]
 800abb4:	b90b      	cbnz	r3, 800abba <_fflush_r+0x1a>
 800abb6:	f7fd fd11 	bl	80085dc <__sinit>
 800abba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0f3      	beq.n	800abaa <_fflush_r+0xa>
 800abc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abc4:	07d0      	lsls	r0, r2, #31
 800abc6:	d404      	bmi.n	800abd2 <_fflush_r+0x32>
 800abc8:	0599      	lsls	r1, r3, #22
 800abca:	d402      	bmi.n	800abd2 <_fflush_r+0x32>
 800abcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abce:	f7fd fe50 	bl	8008872 <__retarget_lock_acquire_recursive>
 800abd2:	4628      	mov	r0, r5
 800abd4:	4621      	mov	r1, r4
 800abd6:	f7ff ff5d 	bl	800aa94 <__sflush_r>
 800abda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abdc:	07da      	lsls	r2, r3, #31
 800abde:	4605      	mov	r5, r0
 800abe0:	d4e4      	bmi.n	800abac <_fflush_r+0xc>
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	059b      	lsls	r3, r3, #22
 800abe6:	d4e1      	bmi.n	800abac <_fflush_r+0xc>
 800abe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abea:	f7fd fe43 	bl	8008874 <__retarget_lock_release_recursive>
 800abee:	e7dd      	b.n	800abac <_fflush_r+0xc>

0800abf0 <memmove>:
 800abf0:	4288      	cmp	r0, r1
 800abf2:	b510      	push	{r4, lr}
 800abf4:	eb01 0402 	add.w	r4, r1, r2
 800abf8:	d902      	bls.n	800ac00 <memmove+0x10>
 800abfa:	4284      	cmp	r4, r0
 800abfc:	4623      	mov	r3, r4
 800abfe:	d807      	bhi.n	800ac10 <memmove+0x20>
 800ac00:	1e43      	subs	r3, r0, #1
 800ac02:	42a1      	cmp	r1, r4
 800ac04:	d008      	beq.n	800ac18 <memmove+0x28>
 800ac06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac0e:	e7f8      	b.n	800ac02 <memmove+0x12>
 800ac10:	4402      	add	r2, r0
 800ac12:	4601      	mov	r1, r0
 800ac14:	428a      	cmp	r2, r1
 800ac16:	d100      	bne.n	800ac1a <memmove+0x2a>
 800ac18:	bd10      	pop	{r4, pc}
 800ac1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac22:	e7f7      	b.n	800ac14 <memmove+0x24>

0800ac24 <_sbrk_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	4d06      	ldr	r5, [pc, #24]	; (800ac40 <_sbrk_r+0x1c>)
 800ac28:	2300      	movs	r3, #0
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	4608      	mov	r0, r1
 800ac2e:	602b      	str	r3, [r5, #0]
 800ac30:	f7f7 ff94 	bl	8002b5c <_sbrk>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d102      	bne.n	800ac3e <_sbrk_r+0x1a>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	b103      	cbz	r3, 800ac3e <_sbrk_r+0x1a>
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	20000580 	.word	0x20000580

0800ac44 <__assert_func>:
 800ac44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac46:	4614      	mov	r4, r2
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <__assert_func+0x2c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4605      	mov	r5, r0
 800ac50:	68d8      	ldr	r0, [r3, #12]
 800ac52:	b14c      	cbz	r4, 800ac68 <__assert_func+0x24>
 800ac54:	4b07      	ldr	r3, [pc, #28]	; (800ac74 <__assert_func+0x30>)
 800ac56:	9100      	str	r1, [sp, #0]
 800ac58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac5c:	4906      	ldr	r1, [pc, #24]	; (800ac78 <__assert_func+0x34>)
 800ac5e:	462b      	mov	r3, r5
 800ac60:	f000 f854 	bl	800ad0c <fiprintf>
 800ac64:	f000 f864 	bl	800ad30 <abort>
 800ac68:	4b04      	ldr	r3, [pc, #16]	; (800ac7c <__assert_func+0x38>)
 800ac6a:	461c      	mov	r4, r3
 800ac6c:	e7f3      	b.n	800ac56 <__assert_func+0x12>
 800ac6e:	bf00      	nop
 800ac70:	200001d0 	.word	0x200001d0
 800ac74:	0800c5be 	.word	0x0800c5be
 800ac78:	0800c5cb 	.word	0x0800c5cb
 800ac7c:	0800c5f9 	.word	0x0800c5f9

0800ac80 <_calloc_r>:
 800ac80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac82:	fba1 2402 	umull	r2, r4, r1, r2
 800ac86:	b94c      	cbnz	r4, 800ac9c <_calloc_r+0x1c>
 800ac88:	4611      	mov	r1, r2
 800ac8a:	9201      	str	r2, [sp, #4]
 800ac8c:	f7ff f852 	bl	8009d34 <_malloc_r>
 800ac90:	9a01      	ldr	r2, [sp, #4]
 800ac92:	4605      	mov	r5, r0
 800ac94:	b930      	cbnz	r0, 800aca4 <_calloc_r+0x24>
 800ac96:	4628      	mov	r0, r5
 800ac98:	b003      	add	sp, #12
 800ac9a:	bd30      	pop	{r4, r5, pc}
 800ac9c:	220c      	movs	r2, #12
 800ac9e:	6002      	str	r2, [r0, #0]
 800aca0:	2500      	movs	r5, #0
 800aca2:	e7f8      	b.n	800ac96 <_calloc_r+0x16>
 800aca4:	4621      	mov	r1, r4
 800aca6:	f7fd fd32 	bl	800870e <memset>
 800acaa:	e7f4      	b.n	800ac96 <_calloc_r+0x16>

0800acac <_realloc_r>:
 800acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb0:	4680      	mov	r8, r0
 800acb2:	4614      	mov	r4, r2
 800acb4:	460e      	mov	r6, r1
 800acb6:	b921      	cbnz	r1, 800acc2 <_realloc_r+0x16>
 800acb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acbc:	4611      	mov	r1, r2
 800acbe:	f7ff b839 	b.w	8009d34 <_malloc_r>
 800acc2:	b92a      	cbnz	r2, 800acd0 <_realloc_r+0x24>
 800acc4:	f7fe fc6a 	bl	800959c <_free_r>
 800acc8:	4625      	mov	r5, r4
 800acca:	4628      	mov	r0, r5
 800accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd0:	f000 f835 	bl	800ad3e <_malloc_usable_size_r>
 800acd4:	4284      	cmp	r4, r0
 800acd6:	4607      	mov	r7, r0
 800acd8:	d802      	bhi.n	800ace0 <_realloc_r+0x34>
 800acda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acde:	d812      	bhi.n	800ad06 <_realloc_r+0x5a>
 800ace0:	4621      	mov	r1, r4
 800ace2:	4640      	mov	r0, r8
 800ace4:	f7ff f826 	bl	8009d34 <_malloc_r>
 800ace8:	4605      	mov	r5, r0
 800acea:	2800      	cmp	r0, #0
 800acec:	d0ed      	beq.n	800acca <_realloc_r+0x1e>
 800acee:	42bc      	cmp	r4, r7
 800acf0:	4622      	mov	r2, r4
 800acf2:	4631      	mov	r1, r6
 800acf4:	bf28      	it	cs
 800acf6:	463a      	movcs	r2, r7
 800acf8:	f7fd fdbd 	bl	8008876 <memcpy>
 800acfc:	4631      	mov	r1, r6
 800acfe:	4640      	mov	r0, r8
 800ad00:	f7fe fc4c 	bl	800959c <_free_r>
 800ad04:	e7e1      	b.n	800acca <_realloc_r+0x1e>
 800ad06:	4635      	mov	r5, r6
 800ad08:	e7df      	b.n	800acca <_realloc_r+0x1e>
	...

0800ad0c <fiprintf>:
 800ad0c:	b40e      	push	{r1, r2, r3}
 800ad0e:	b503      	push	{r0, r1, lr}
 800ad10:	4601      	mov	r1, r0
 800ad12:	ab03      	add	r3, sp, #12
 800ad14:	4805      	ldr	r0, [pc, #20]	; (800ad2c <fiprintf+0x20>)
 800ad16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad1a:	6800      	ldr	r0, [r0, #0]
 800ad1c:	9301      	str	r3, [sp, #4]
 800ad1e:	f000 f83f 	bl	800ada0 <_vfiprintf_r>
 800ad22:	b002      	add	sp, #8
 800ad24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad28:	b003      	add	sp, #12
 800ad2a:	4770      	bx	lr
 800ad2c:	200001d0 	.word	0x200001d0

0800ad30 <abort>:
 800ad30:	b508      	push	{r3, lr}
 800ad32:	2006      	movs	r0, #6
 800ad34:	f000 fa0c 	bl	800b150 <raise>
 800ad38:	2001      	movs	r0, #1
 800ad3a:	f7f7 fe97 	bl	8002a6c <_exit>

0800ad3e <_malloc_usable_size_r>:
 800ad3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad42:	1f18      	subs	r0, r3, #4
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	bfbc      	itt	lt
 800ad48:	580b      	ldrlt	r3, [r1, r0]
 800ad4a:	18c0      	addlt	r0, r0, r3
 800ad4c:	4770      	bx	lr

0800ad4e <__sfputc_r>:
 800ad4e:	6893      	ldr	r3, [r2, #8]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	b410      	push	{r4}
 800ad56:	6093      	str	r3, [r2, #8]
 800ad58:	da08      	bge.n	800ad6c <__sfputc_r+0x1e>
 800ad5a:	6994      	ldr	r4, [r2, #24]
 800ad5c:	42a3      	cmp	r3, r4
 800ad5e:	db01      	blt.n	800ad64 <__sfputc_r+0x16>
 800ad60:	290a      	cmp	r1, #10
 800ad62:	d103      	bne.n	800ad6c <__sfputc_r+0x1e>
 800ad64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad68:	f000 b934 	b.w	800afd4 <__swbuf_r>
 800ad6c:	6813      	ldr	r3, [r2, #0]
 800ad6e:	1c58      	adds	r0, r3, #1
 800ad70:	6010      	str	r0, [r2, #0]
 800ad72:	7019      	strb	r1, [r3, #0]
 800ad74:	4608      	mov	r0, r1
 800ad76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <__sfputs_r>:
 800ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460f      	mov	r7, r1
 800ad82:	4614      	mov	r4, r2
 800ad84:	18d5      	adds	r5, r2, r3
 800ad86:	42ac      	cmp	r4, r5
 800ad88:	d101      	bne.n	800ad8e <__sfputs_r+0x12>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	e007      	b.n	800ad9e <__sfputs_r+0x22>
 800ad8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad92:	463a      	mov	r2, r7
 800ad94:	4630      	mov	r0, r6
 800ad96:	f7ff ffda 	bl	800ad4e <__sfputc_r>
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	d1f3      	bne.n	800ad86 <__sfputs_r+0xa>
 800ad9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ada0 <_vfiprintf_r>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	460d      	mov	r5, r1
 800ada6:	b09d      	sub	sp, #116	; 0x74
 800ada8:	4614      	mov	r4, r2
 800adaa:	4698      	mov	r8, r3
 800adac:	4606      	mov	r6, r0
 800adae:	b118      	cbz	r0, 800adb8 <_vfiprintf_r+0x18>
 800adb0:	6a03      	ldr	r3, [r0, #32]
 800adb2:	b90b      	cbnz	r3, 800adb8 <_vfiprintf_r+0x18>
 800adb4:	f7fd fc12 	bl	80085dc <__sinit>
 800adb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adba:	07d9      	lsls	r1, r3, #31
 800adbc:	d405      	bmi.n	800adca <_vfiprintf_r+0x2a>
 800adbe:	89ab      	ldrh	r3, [r5, #12]
 800adc0:	059a      	lsls	r2, r3, #22
 800adc2:	d402      	bmi.n	800adca <_vfiprintf_r+0x2a>
 800adc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adc6:	f7fd fd54 	bl	8008872 <__retarget_lock_acquire_recursive>
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	071b      	lsls	r3, r3, #28
 800adce:	d501      	bpl.n	800add4 <_vfiprintf_r+0x34>
 800add0:	692b      	ldr	r3, [r5, #16]
 800add2:	b99b      	cbnz	r3, 800adfc <_vfiprintf_r+0x5c>
 800add4:	4629      	mov	r1, r5
 800add6:	4630      	mov	r0, r6
 800add8:	f000 f93a 	bl	800b050 <__swsetup_r>
 800addc:	b170      	cbz	r0, 800adfc <_vfiprintf_r+0x5c>
 800adde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ade0:	07dc      	lsls	r4, r3, #31
 800ade2:	d504      	bpl.n	800adee <_vfiprintf_r+0x4e>
 800ade4:	f04f 30ff 	mov.w	r0, #4294967295
 800ade8:	b01d      	add	sp, #116	; 0x74
 800adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adee:	89ab      	ldrh	r3, [r5, #12]
 800adf0:	0598      	lsls	r0, r3, #22
 800adf2:	d4f7      	bmi.n	800ade4 <_vfiprintf_r+0x44>
 800adf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adf6:	f7fd fd3d 	bl	8008874 <__retarget_lock_release_recursive>
 800adfa:	e7f3      	b.n	800ade4 <_vfiprintf_r+0x44>
 800adfc:	2300      	movs	r3, #0
 800adfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ae00:	2320      	movs	r3, #32
 800ae02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae0a:	2330      	movs	r3, #48	; 0x30
 800ae0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800afc0 <_vfiprintf_r+0x220>
 800ae10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae14:	f04f 0901 	mov.w	r9, #1
 800ae18:	4623      	mov	r3, r4
 800ae1a:	469a      	mov	sl, r3
 800ae1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae20:	b10a      	cbz	r2, 800ae26 <_vfiprintf_r+0x86>
 800ae22:	2a25      	cmp	r2, #37	; 0x25
 800ae24:	d1f9      	bne.n	800ae1a <_vfiprintf_r+0x7a>
 800ae26:	ebba 0b04 	subs.w	fp, sl, r4
 800ae2a:	d00b      	beq.n	800ae44 <_vfiprintf_r+0xa4>
 800ae2c:	465b      	mov	r3, fp
 800ae2e:	4622      	mov	r2, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	4630      	mov	r0, r6
 800ae34:	f7ff ffa2 	bl	800ad7c <__sfputs_r>
 800ae38:	3001      	adds	r0, #1
 800ae3a:	f000 80a9 	beq.w	800af90 <_vfiprintf_r+0x1f0>
 800ae3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae40:	445a      	add	r2, fp
 800ae42:	9209      	str	r2, [sp, #36]	; 0x24
 800ae44:	f89a 3000 	ldrb.w	r3, [sl]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f000 80a1 	beq.w	800af90 <_vfiprintf_r+0x1f0>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f04f 32ff 	mov.w	r2, #4294967295
 800ae54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae58:	f10a 0a01 	add.w	sl, sl, #1
 800ae5c:	9304      	str	r3, [sp, #16]
 800ae5e:	9307      	str	r3, [sp, #28]
 800ae60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae64:	931a      	str	r3, [sp, #104]	; 0x68
 800ae66:	4654      	mov	r4, sl
 800ae68:	2205      	movs	r2, #5
 800ae6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae6e:	4854      	ldr	r0, [pc, #336]	; (800afc0 <_vfiprintf_r+0x220>)
 800ae70:	f7f5 f9ae 	bl	80001d0 <memchr>
 800ae74:	9a04      	ldr	r2, [sp, #16]
 800ae76:	b9d8      	cbnz	r0, 800aeb0 <_vfiprintf_r+0x110>
 800ae78:	06d1      	lsls	r1, r2, #27
 800ae7a:	bf44      	itt	mi
 800ae7c:	2320      	movmi	r3, #32
 800ae7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae82:	0713      	lsls	r3, r2, #28
 800ae84:	bf44      	itt	mi
 800ae86:	232b      	movmi	r3, #43	; 0x2b
 800ae88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae90:	2b2a      	cmp	r3, #42	; 0x2a
 800ae92:	d015      	beq.n	800aec0 <_vfiprintf_r+0x120>
 800ae94:	9a07      	ldr	r2, [sp, #28]
 800ae96:	4654      	mov	r4, sl
 800ae98:	2000      	movs	r0, #0
 800ae9a:	f04f 0c0a 	mov.w	ip, #10
 800ae9e:	4621      	mov	r1, r4
 800aea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aea4:	3b30      	subs	r3, #48	; 0x30
 800aea6:	2b09      	cmp	r3, #9
 800aea8:	d94d      	bls.n	800af46 <_vfiprintf_r+0x1a6>
 800aeaa:	b1b0      	cbz	r0, 800aeda <_vfiprintf_r+0x13a>
 800aeac:	9207      	str	r2, [sp, #28]
 800aeae:	e014      	b.n	800aeda <_vfiprintf_r+0x13a>
 800aeb0:	eba0 0308 	sub.w	r3, r0, r8
 800aeb4:	fa09 f303 	lsl.w	r3, r9, r3
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	9304      	str	r3, [sp, #16]
 800aebc:	46a2      	mov	sl, r4
 800aebe:	e7d2      	b.n	800ae66 <_vfiprintf_r+0xc6>
 800aec0:	9b03      	ldr	r3, [sp, #12]
 800aec2:	1d19      	adds	r1, r3, #4
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	9103      	str	r1, [sp, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bfbb      	ittet	lt
 800aecc:	425b      	neglt	r3, r3
 800aece:	f042 0202 	orrlt.w	r2, r2, #2
 800aed2:	9307      	strge	r3, [sp, #28]
 800aed4:	9307      	strlt	r3, [sp, #28]
 800aed6:	bfb8      	it	lt
 800aed8:	9204      	strlt	r2, [sp, #16]
 800aeda:	7823      	ldrb	r3, [r4, #0]
 800aedc:	2b2e      	cmp	r3, #46	; 0x2e
 800aede:	d10c      	bne.n	800aefa <_vfiprintf_r+0x15a>
 800aee0:	7863      	ldrb	r3, [r4, #1]
 800aee2:	2b2a      	cmp	r3, #42	; 0x2a
 800aee4:	d134      	bne.n	800af50 <_vfiprintf_r+0x1b0>
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	1d1a      	adds	r2, r3, #4
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	9203      	str	r2, [sp, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	bfb8      	it	lt
 800aef2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aef6:	3402      	adds	r4, #2
 800aef8:	9305      	str	r3, [sp, #20]
 800aefa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800afd0 <_vfiprintf_r+0x230>
 800aefe:	7821      	ldrb	r1, [r4, #0]
 800af00:	2203      	movs	r2, #3
 800af02:	4650      	mov	r0, sl
 800af04:	f7f5 f964 	bl	80001d0 <memchr>
 800af08:	b138      	cbz	r0, 800af1a <_vfiprintf_r+0x17a>
 800af0a:	9b04      	ldr	r3, [sp, #16]
 800af0c:	eba0 000a 	sub.w	r0, r0, sl
 800af10:	2240      	movs	r2, #64	; 0x40
 800af12:	4082      	lsls	r2, r0
 800af14:	4313      	orrs	r3, r2
 800af16:	3401      	adds	r4, #1
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1e:	4829      	ldr	r0, [pc, #164]	; (800afc4 <_vfiprintf_r+0x224>)
 800af20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af24:	2206      	movs	r2, #6
 800af26:	f7f5 f953 	bl	80001d0 <memchr>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d03f      	beq.n	800afae <_vfiprintf_r+0x20e>
 800af2e:	4b26      	ldr	r3, [pc, #152]	; (800afc8 <_vfiprintf_r+0x228>)
 800af30:	bb1b      	cbnz	r3, 800af7a <_vfiprintf_r+0x1da>
 800af32:	9b03      	ldr	r3, [sp, #12]
 800af34:	3307      	adds	r3, #7
 800af36:	f023 0307 	bic.w	r3, r3, #7
 800af3a:	3308      	adds	r3, #8
 800af3c:	9303      	str	r3, [sp, #12]
 800af3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af40:	443b      	add	r3, r7
 800af42:	9309      	str	r3, [sp, #36]	; 0x24
 800af44:	e768      	b.n	800ae18 <_vfiprintf_r+0x78>
 800af46:	fb0c 3202 	mla	r2, ip, r2, r3
 800af4a:	460c      	mov	r4, r1
 800af4c:	2001      	movs	r0, #1
 800af4e:	e7a6      	b.n	800ae9e <_vfiprintf_r+0xfe>
 800af50:	2300      	movs	r3, #0
 800af52:	3401      	adds	r4, #1
 800af54:	9305      	str	r3, [sp, #20]
 800af56:	4619      	mov	r1, r3
 800af58:	f04f 0c0a 	mov.w	ip, #10
 800af5c:	4620      	mov	r0, r4
 800af5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af62:	3a30      	subs	r2, #48	; 0x30
 800af64:	2a09      	cmp	r2, #9
 800af66:	d903      	bls.n	800af70 <_vfiprintf_r+0x1d0>
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d0c6      	beq.n	800aefa <_vfiprintf_r+0x15a>
 800af6c:	9105      	str	r1, [sp, #20]
 800af6e:	e7c4      	b.n	800aefa <_vfiprintf_r+0x15a>
 800af70:	fb0c 2101 	mla	r1, ip, r1, r2
 800af74:	4604      	mov	r4, r0
 800af76:	2301      	movs	r3, #1
 800af78:	e7f0      	b.n	800af5c <_vfiprintf_r+0x1bc>
 800af7a:	ab03      	add	r3, sp, #12
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	462a      	mov	r2, r5
 800af80:	4b12      	ldr	r3, [pc, #72]	; (800afcc <_vfiprintf_r+0x22c>)
 800af82:	a904      	add	r1, sp, #16
 800af84:	4630      	mov	r0, r6
 800af86:	f7fc fed7 	bl	8007d38 <_printf_float>
 800af8a:	4607      	mov	r7, r0
 800af8c:	1c78      	adds	r0, r7, #1
 800af8e:	d1d6      	bne.n	800af3e <_vfiprintf_r+0x19e>
 800af90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af92:	07d9      	lsls	r1, r3, #31
 800af94:	d405      	bmi.n	800afa2 <_vfiprintf_r+0x202>
 800af96:	89ab      	ldrh	r3, [r5, #12]
 800af98:	059a      	lsls	r2, r3, #22
 800af9a:	d402      	bmi.n	800afa2 <_vfiprintf_r+0x202>
 800af9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af9e:	f7fd fc69 	bl	8008874 <__retarget_lock_release_recursive>
 800afa2:	89ab      	ldrh	r3, [r5, #12]
 800afa4:	065b      	lsls	r3, r3, #25
 800afa6:	f53f af1d 	bmi.w	800ade4 <_vfiprintf_r+0x44>
 800afaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afac:	e71c      	b.n	800ade8 <_vfiprintf_r+0x48>
 800afae:	ab03      	add	r3, sp, #12
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	462a      	mov	r2, r5
 800afb4:	4b05      	ldr	r3, [pc, #20]	; (800afcc <_vfiprintf_r+0x22c>)
 800afb6:	a904      	add	r1, sp, #16
 800afb8:	4630      	mov	r0, r6
 800afba:	f7fd f961 	bl	8008280 <_printf_i>
 800afbe:	e7e4      	b.n	800af8a <_vfiprintf_r+0x1ea>
 800afc0:	0800c5ad 	.word	0x0800c5ad
 800afc4:	0800c5b7 	.word	0x0800c5b7
 800afc8:	08007d39 	.word	0x08007d39
 800afcc:	0800ad7d 	.word	0x0800ad7d
 800afd0:	0800c5b3 	.word	0x0800c5b3

0800afd4 <__swbuf_r>:
 800afd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd6:	460e      	mov	r6, r1
 800afd8:	4614      	mov	r4, r2
 800afda:	4605      	mov	r5, r0
 800afdc:	b118      	cbz	r0, 800afe6 <__swbuf_r+0x12>
 800afde:	6a03      	ldr	r3, [r0, #32]
 800afe0:	b90b      	cbnz	r3, 800afe6 <__swbuf_r+0x12>
 800afe2:	f7fd fafb 	bl	80085dc <__sinit>
 800afe6:	69a3      	ldr	r3, [r4, #24]
 800afe8:	60a3      	str	r3, [r4, #8]
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	071a      	lsls	r2, r3, #28
 800afee:	d525      	bpl.n	800b03c <__swbuf_r+0x68>
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	b31b      	cbz	r3, 800b03c <__swbuf_r+0x68>
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	6922      	ldr	r2, [r4, #16]
 800aff8:	1a98      	subs	r0, r3, r2
 800affa:	6963      	ldr	r3, [r4, #20]
 800affc:	b2f6      	uxtb	r6, r6
 800affe:	4283      	cmp	r3, r0
 800b000:	4637      	mov	r7, r6
 800b002:	dc04      	bgt.n	800b00e <__swbuf_r+0x3a>
 800b004:	4621      	mov	r1, r4
 800b006:	4628      	mov	r0, r5
 800b008:	f7ff fdca 	bl	800aba0 <_fflush_r>
 800b00c:	b9e0      	cbnz	r0, 800b048 <__swbuf_r+0x74>
 800b00e:	68a3      	ldr	r3, [r4, #8]
 800b010:	3b01      	subs	r3, #1
 800b012:	60a3      	str	r3, [r4, #8]
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	6022      	str	r2, [r4, #0]
 800b01a:	701e      	strb	r6, [r3, #0]
 800b01c:	6962      	ldr	r2, [r4, #20]
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	429a      	cmp	r2, r3
 800b022:	d004      	beq.n	800b02e <__swbuf_r+0x5a>
 800b024:	89a3      	ldrh	r3, [r4, #12]
 800b026:	07db      	lsls	r3, r3, #31
 800b028:	d506      	bpl.n	800b038 <__swbuf_r+0x64>
 800b02a:	2e0a      	cmp	r6, #10
 800b02c:	d104      	bne.n	800b038 <__swbuf_r+0x64>
 800b02e:	4621      	mov	r1, r4
 800b030:	4628      	mov	r0, r5
 800b032:	f7ff fdb5 	bl	800aba0 <_fflush_r>
 800b036:	b938      	cbnz	r0, 800b048 <__swbuf_r+0x74>
 800b038:	4638      	mov	r0, r7
 800b03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b03c:	4621      	mov	r1, r4
 800b03e:	4628      	mov	r0, r5
 800b040:	f000 f806 	bl	800b050 <__swsetup_r>
 800b044:	2800      	cmp	r0, #0
 800b046:	d0d5      	beq.n	800aff4 <__swbuf_r+0x20>
 800b048:	f04f 37ff 	mov.w	r7, #4294967295
 800b04c:	e7f4      	b.n	800b038 <__swbuf_r+0x64>
	...

0800b050 <__swsetup_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4b2a      	ldr	r3, [pc, #168]	; (800b0fc <__swsetup_r+0xac>)
 800b054:	4605      	mov	r5, r0
 800b056:	6818      	ldr	r0, [r3, #0]
 800b058:	460c      	mov	r4, r1
 800b05a:	b118      	cbz	r0, 800b064 <__swsetup_r+0x14>
 800b05c:	6a03      	ldr	r3, [r0, #32]
 800b05e:	b90b      	cbnz	r3, 800b064 <__swsetup_r+0x14>
 800b060:	f7fd fabc 	bl	80085dc <__sinit>
 800b064:	89a3      	ldrh	r3, [r4, #12]
 800b066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b06a:	0718      	lsls	r0, r3, #28
 800b06c:	d422      	bmi.n	800b0b4 <__swsetup_r+0x64>
 800b06e:	06d9      	lsls	r1, r3, #27
 800b070:	d407      	bmi.n	800b082 <__swsetup_r+0x32>
 800b072:	2309      	movs	r3, #9
 800b074:	602b      	str	r3, [r5, #0]
 800b076:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b07a:	81a3      	strh	r3, [r4, #12]
 800b07c:	f04f 30ff 	mov.w	r0, #4294967295
 800b080:	e034      	b.n	800b0ec <__swsetup_r+0x9c>
 800b082:	0758      	lsls	r0, r3, #29
 800b084:	d512      	bpl.n	800b0ac <__swsetup_r+0x5c>
 800b086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b088:	b141      	cbz	r1, 800b09c <__swsetup_r+0x4c>
 800b08a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b08e:	4299      	cmp	r1, r3
 800b090:	d002      	beq.n	800b098 <__swsetup_r+0x48>
 800b092:	4628      	mov	r0, r5
 800b094:	f7fe fa82 	bl	800959c <_free_r>
 800b098:	2300      	movs	r3, #0
 800b09a:	6363      	str	r3, [r4, #52]	; 0x34
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0a2:	81a3      	strh	r3, [r4, #12]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	6063      	str	r3, [r4, #4]
 800b0a8:	6923      	ldr	r3, [r4, #16]
 800b0aa:	6023      	str	r3, [r4, #0]
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f043 0308 	orr.w	r3, r3, #8
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	6923      	ldr	r3, [r4, #16]
 800b0b6:	b94b      	cbnz	r3, 800b0cc <__swsetup_r+0x7c>
 800b0b8:	89a3      	ldrh	r3, [r4, #12]
 800b0ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0c2:	d003      	beq.n	800b0cc <__swsetup_r+0x7c>
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f000 f884 	bl	800b1d4 <__smakebuf_r>
 800b0cc:	89a0      	ldrh	r0, [r4, #12]
 800b0ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0d2:	f010 0301 	ands.w	r3, r0, #1
 800b0d6:	d00a      	beq.n	800b0ee <__swsetup_r+0x9e>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	60a3      	str	r3, [r4, #8]
 800b0dc:	6963      	ldr	r3, [r4, #20]
 800b0de:	425b      	negs	r3, r3
 800b0e0:	61a3      	str	r3, [r4, #24]
 800b0e2:	6923      	ldr	r3, [r4, #16]
 800b0e4:	b943      	cbnz	r3, 800b0f8 <__swsetup_r+0xa8>
 800b0e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0ea:	d1c4      	bne.n	800b076 <__swsetup_r+0x26>
 800b0ec:	bd38      	pop	{r3, r4, r5, pc}
 800b0ee:	0781      	lsls	r1, r0, #30
 800b0f0:	bf58      	it	pl
 800b0f2:	6963      	ldrpl	r3, [r4, #20]
 800b0f4:	60a3      	str	r3, [r4, #8]
 800b0f6:	e7f4      	b.n	800b0e2 <__swsetup_r+0x92>
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	e7f7      	b.n	800b0ec <__swsetup_r+0x9c>
 800b0fc:	200001d0 	.word	0x200001d0

0800b100 <_raise_r>:
 800b100:	291f      	cmp	r1, #31
 800b102:	b538      	push	{r3, r4, r5, lr}
 800b104:	4604      	mov	r4, r0
 800b106:	460d      	mov	r5, r1
 800b108:	d904      	bls.n	800b114 <_raise_r+0x14>
 800b10a:	2316      	movs	r3, #22
 800b10c:	6003      	str	r3, [r0, #0]
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b116:	b112      	cbz	r2, 800b11e <_raise_r+0x1e>
 800b118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b11c:	b94b      	cbnz	r3, 800b132 <_raise_r+0x32>
 800b11e:	4620      	mov	r0, r4
 800b120:	f000 f830 	bl	800b184 <_getpid_r>
 800b124:	462a      	mov	r2, r5
 800b126:	4601      	mov	r1, r0
 800b128:	4620      	mov	r0, r4
 800b12a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b12e:	f000 b817 	b.w	800b160 <_kill_r>
 800b132:	2b01      	cmp	r3, #1
 800b134:	d00a      	beq.n	800b14c <_raise_r+0x4c>
 800b136:	1c59      	adds	r1, r3, #1
 800b138:	d103      	bne.n	800b142 <_raise_r+0x42>
 800b13a:	2316      	movs	r3, #22
 800b13c:	6003      	str	r3, [r0, #0]
 800b13e:	2001      	movs	r0, #1
 800b140:	e7e7      	b.n	800b112 <_raise_r+0x12>
 800b142:	2400      	movs	r4, #0
 800b144:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b148:	4628      	mov	r0, r5
 800b14a:	4798      	blx	r3
 800b14c:	2000      	movs	r0, #0
 800b14e:	e7e0      	b.n	800b112 <_raise_r+0x12>

0800b150 <raise>:
 800b150:	4b02      	ldr	r3, [pc, #8]	; (800b15c <raise+0xc>)
 800b152:	4601      	mov	r1, r0
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	f7ff bfd3 	b.w	800b100 <_raise_r>
 800b15a:	bf00      	nop
 800b15c:	200001d0 	.word	0x200001d0

0800b160 <_kill_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	4d07      	ldr	r5, [pc, #28]	; (800b180 <_kill_r+0x20>)
 800b164:	2300      	movs	r3, #0
 800b166:	4604      	mov	r4, r0
 800b168:	4608      	mov	r0, r1
 800b16a:	4611      	mov	r1, r2
 800b16c:	602b      	str	r3, [r5, #0]
 800b16e:	f7f7 fc6d 	bl	8002a4c <_kill>
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	d102      	bne.n	800b17c <_kill_r+0x1c>
 800b176:	682b      	ldr	r3, [r5, #0]
 800b178:	b103      	cbz	r3, 800b17c <_kill_r+0x1c>
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	bd38      	pop	{r3, r4, r5, pc}
 800b17e:	bf00      	nop
 800b180:	20000580 	.word	0x20000580

0800b184 <_getpid_r>:
 800b184:	f7f7 bc5a 	b.w	8002a3c <_getpid>

0800b188 <__swhatbuf_r>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	460c      	mov	r4, r1
 800b18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b190:	2900      	cmp	r1, #0
 800b192:	b096      	sub	sp, #88	; 0x58
 800b194:	4615      	mov	r5, r2
 800b196:	461e      	mov	r6, r3
 800b198:	da0d      	bge.n	800b1b6 <__swhatbuf_r+0x2e>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b1a0:	f04f 0100 	mov.w	r1, #0
 800b1a4:	bf0c      	ite	eq
 800b1a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b1aa:	2340      	movne	r3, #64	; 0x40
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	6031      	str	r1, [r6, #0]
 800b1b0:	602b      	str	r3, [r5, #0]
 800b1b2:	b016      	add	sp, #88	; 0x58
 800b1b4:	bd70      	pop	{r4, r5, r6, pc}
 800b1b6:	466a      	mov	r2, sp
 800b1b8:	f000 f848 	bl	800b24c <_fstat_r>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	dbec      	blt.n	800b19a <__swhatbuf_r+0x12>
 800b1c0:	9901      	ldr	r1, [sp, #4]
 800b1c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b1c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b1ca:	4259      	negs	r1, r3
 800b1cc:	4159      	adcs	r1, r3
 800b1ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1d2:	e7eb      	b.n	800b1ac <__swhatbuf_r+0x24>

0800b1d4 <__smakebuf_r>:
 800b1d4:	898b      	ldrh	r3, [r1, #12]
 800b1d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1d8:	079d      	lsls	r5, r3, #30
 800b1da:	4606      	mov	r6, r0
 800b1dc:	460c      	mov	r4, r1
 800b1de:	d507      	bpl.n	800b1f0 <__smakebuf_r+0x1c>
 800b1e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	6123      	str	r3, [r4, #16]
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	6163      	str	r3, [r4, #20]
 800b1ec:	b002      	add	sp, #8
 800b1ee:	bd70      	pop	{r4, r5, r6, pc}
 800b1f0:	ab01      	add	r3, sp, #4
 800b1f2:	466a      	mov	r2, sp
 800b1f4:	f7ff ffc8 	bl	800b188 <__swhatbuf_r>
 800b1f8:	9900      	ldr	r1, [sp, #0]
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	f7fe fd99 	bl	8009d34 <_malloc_r>
 800b202:	b948      	cbnz	r0, 800b218 <__smakebuf_r+0x44>
 800b204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b208:	059a      	lsls	r2, r3, #22
 800b20a:	d4ef      	bmi.n	800b1ec <__smakebuf_r+0x18>
 800b20c:	f023 0303 	bic.w	r3, r3, #3
 800b210:	f043 0302 	orr.w	r3, r3, #2
 800b214:	81a3      	strh	r3, [r4, #12]
 800b216:	e7e3      	b.n	800b1e0 <__smakebuf_r+0xc>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	6020      	str	r0, [r4, #0]
 800b21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b220:	81a3      	strh	r3, [r4, #12]
 800b222:	9b00      	ldr	r3, [sp, #0]
 800b224:	6163      	str	r3, [r4, #20]
 800b226:	9b01      	ldr	r3, [sp, #4]
 800b228:	6120      	str	r0, [r4, #16]
 800b22a:	b15b      	cbz	r3, 800b244 <__smakebuf_r+0x70>
 800b22c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b230:	4630      	mov	r0, r6
 800b232:	f000 f81d 	bl	800b270 <_isatty_r>
 800b236:	b128      	cbz	r0, 800b244 <__smakebuf_r+0x70>
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	f023 0303 	bic.w	r3, r3, #3
 800b23e:	f043 0301 	orr.w	r3, r3, #1
 800b242:	81a3      	strh	r3, [r4, #12]
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	431d      	orrs	r5, r3
 800b248:	81a5      	strh	r5, [r4, #12]
 800b24a:	e7cf      	b.n	800b1ec <__smakebuf_r+0x18>

0800b24c <_fstat_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	4d07      	ldr	r5, [pc, #28]	; (800b26c <_fstat_r+0x20>)
 800b250:	2300      	movs	r3, #0
 800b252:	4604      	mov	r4, r0
 800b254:	4608      	mov	r0, r1
 800b256:	4611      	mov	r1, r2
 800b258:	602b      	str	r3, [r5, #0]
 800b25a:	f7f7 fc56 	bl	8002b0a <_fstat>
 800b25e:	1c43      	adds	r3, r0, #1
 800b260:	d102      	bne.n	800b268 <_fstat_r+0x1c>
 800b262:	682b      	ldr	r3, [r5, #0]
 800b264:	b103      	cbz	r3, 800b268 <_fstat_r+0x1c>
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	bd38      	pop	{r3, r4, r5, pc}
 800b26a:	bf00      	nop
 800b26c:	20000580 	.word	0x20000580

0800b270 <_isatty_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d06      	ldr	r5, [pc, #24]	; (800b28c <_isatty_r+0x1c>)
 800b274:	2300      	movs	r3, #0
 800b276:	4604      	mov	r4, r0
 800b278:	4608      	mov	r0, r1
 800b27a:	602b      	str	r3, [r5, #0]
 800b27c:	f7f7 fc55 	bl	8002b2a <_isatty>
 800b280:	1c43      	adds	r3, r0, #1
 800b282:	d102      	bne.n	800b28a <_isatty_r+0x1a>
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	b103      	cbz	r3, 800b28a <_isatty_r+0x1a>
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
 800b28c:	20000580 	.word	0x20000580

0800b290 <pow>:
 800b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b292:	ed2d 8b02 	vpush	{d8}
 800b296:	eeb0 8a40 	vmov.f32	s16, s0
 800b29a:	eef0 8a60 	vmov.f32	s17, s1
 800b29e:	ec55 4b11 	vmov	r4, r5, d1
 800b2a2:	f000 f871 	bl	800b388 <__ieee754_pow>
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	462b      	mov	r3, r5
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	ec57 6b10 	vmov	r6, r7, d0
 800b2b2:	f7f5 fc3b 	bl	8000b2c <__aeabi_dcmpun>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d13b      	bne.n	800b332 <pow+0xa2>
 800b2ba:	ec51 0b18 	vmov	r0, r1, d8
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f7f5 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2c6:	b1b8      	cbz	r0, 800b2f8 <pow+0x68>
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	f7f5 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d146      	bne.n	800b366 <pow+0xd6>
 800b2d8:	ec45 4b10 	vmov	d0, r4, r5
 800b2dc:	f000 f848 	bl	800b370 <finite>
 800b2e0:	b338      	cbz	r0, 800b332 <pow+0xa2>
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 fbf7 	bl	8000adc <__aeabi_dcmplt>
 800b2ee:	b300      	cbz	r0, 800b332 <pow+0xa2>
 800b2f0:	f7fd fa94 	bl	800881c <__errno>
 800b2f4:	2322      	movs	r3, #34	; 0x22
 800b2f6:	e01b      	b.n	800b330 <pow+0xa0>
 800b2f8:	ec47 6b10 	vmov	d0, r6, r7
 800b2fc:	f000 f838 	bl	800b370 <finite>
 800b300:	b9e0      	cbnz	r0, 800b33c <pow+0xac>
 800b302:	eeb0 0a48 	vmov.f32	s0, s16
 800b306:	eef0 0a68 	vmov.f32	s1, s17
 800b30a:	f000 f831 	bl	800b370 <finite>
 800b30e:	b1a8      	cbz	r0, 800b33c <pow+0xac>
 800b310:	ec45 4b10 	vmov	d0, r4, r5
 800b314:	f000 f82c 	bl	800b370 <finite>
 800b318:	b180      	cbz	r0, 800b33c <pow+0xac>
 800b31a:	4632      	mov	r2, r6
 800b31c:	463b      	mov	r3, r7
 800b31e:	4630      	mov	r0, r6
 800b320:	4639      	mov	r1, r7
 800b322:	f7f5 fc03 	bl	8000b2c <__aeabi_dcmpun>
 800b326:	2800      	cmp	r0, #0
 800b328:	d0e2      	beq.n	800b2f0 <pow+0x60>
 800b32a:	f7fd fa77 	bl	800881c <__errno>
 800b32e:	2321      	movs	r3, #33	; 0x21
 800b330:	6003      	str	r3, [r0, #0]
 800b332:	ecbd 8b02 	vpop	{d8}
 800b336:	ec47 6b10 	vmov	d0, r6, r7
 800b33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b33c:	2200      	movs	r2, #0
 800b33e:	2300      	movs	r3, #0
 800b340:	4630      	mov	r0, r6
 800b342:	4639      	mov	r1, r7
 800b344:	f7f5 fbc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d0f2      	beq.n	800b332 <pow+0xa2>
 800b34c:	eeb0 0a48 	vmov.f32	s0, s16
 800b350:	eef0 0a68 	vmov.f32	s1, s17
 800b354:	f000 f80c 	bl	800b370 <finite>
 800b358:	2800      	cmp	r0, #0
 800b35a:	d0ea      	beq.n	800b332 <pow+0xa2>
 800b35c:	ec45 4b10 	vmov	d0, r4, r5
 800b360:	f000 f806 	bl	800b370 <finite>
 800b364:	e7c3      	b.n	800b2ee <pow+0x5e>
 800b366:	4f01      	ldr	r7, [pc, #4]	; (800b36c <pow+0xdc>)
 800b368:	2600      	movs	r6, #0
 800b36a:	e7e2      	b.n	800b332 <pow+0xa2>
 800b36c:	3ff00000 	.word	0x3ff00000

0800b370 <finite>:
 800b370:	b082      	sub	sp, #8
 800b372:	ed8d 0b00 	vstr	d0, [sp]
 800b376:	9801      	ldr	r0, [sp, #4]
 800b378:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b37c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b380:	0fc0      	lsrs	r0, r0, #31
 800b382:	b002      	add	sp, #8
 800b384:	4770      	bx	lr
	...

0800b388 <__ieee754_pow>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	ed2d 8b06 	vpush	{d8-d10}
 800b390:	b089      	sub	sp, #36	; 0x24
 800b392:	ed8d 1b00 	vstr	d1, [sp]
 800b396:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b39a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b39e:	ea58 0102 	orrs.w	r1, r8, r2
 800b3a2:	ec57 6b10 	vmov	r6, r7, d0
 800b3a6:	d115      	bne.n	800b3d4 <__ieee754_pow+0x4c>
 800b3a8:	19b3      	adds	r3, r6, r6
 800b3aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b3ae:	4152      	adcs	r2, r2
 800b3b0:	4299      	cmp	r1, r3
 800b3b2:	4b89      	ldr	r3, [pc, #548]	; (800b5d8 <__ieee754_pow+0x250>)
 800b3b4:	4193      	sbcs	r3, r2
 800b3b6:	f080 84d1 	bcs.w	800bd5c <__ieee754_pow+0x9d4>
 800b3ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3be:	4630      	mov	r0, r6
 800b3c0:	4639      	mov	r1, r7
 800b3c2:	f7f4 ff63 	bl	800028c <__adddf3>
 800b3c6:	ec41 0b10 	vmov	d0, r0, r1
 800b3ca:	b009      	add	sp, #36	; 0x24
 800b3cc:	ecbd 8b06 	vpop	{d8-d10}
 800b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d4:	4b81      	ldr	r3, [pc, #516]	; (800b5dc <__ieee754_pow+0x254>)
 800b3d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b3da:	429c      	cmp	r4, r3
 800b3dc:	ee10 aa10 	vmov	sl, s0
 800b3e0:	463d      	mov	r5, r7
 800b3e2:	dc06      	bgt.n	800b3f2 <__ieee754_pow+0x6a>
 800b3e4:	d101      	bne.n	800b3ea <__ieee754_pow+0x62>
 800b3e6:	2e00      	cmp	r6, #0
 800b3e8:	d1e7      	bne.n	800b3ba <__ieee754_pow+0x32>
 800b3ea:	4598      	cmp	r8, r3
 800b3ec:	dc01      	bgt.n	800b3f2 <__ieee754_pow+0x6a>
 800b3ee:	d10f      	bne.n	800b410 <__ieee754_pow+0x88>
 800b3f0:	b172      	cbz	r2, 800b410 <__ieee754_pow+0x88>
 800b3f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b3f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b3fa:	ea55 050a 	orrs.w	r5, r5, sl
 800b3fe:	d1dc      	bne.n	800b3ba <__ieee754_pow+0x32>
 800b400:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b404:	18db      	adds	r3, r3, r3
 800b406:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b40a:	4152      	adcs	r2, r2
 800b40c:	429d      	cmp	r5, r3
 800b40e:	e7d0      	b.n	800b3b2 <__ieee754_pow+0x2a>
 800b410:	2d00      	cmp	r5, #0
 800b412:	da3b      	bge.n	800b48c <__ieee754_pow+0x104>
 800b414:	4b72      	ldr	r3, [pc, #456]	; (800b5e0 <__ieee754_pow+0x258>)
 800b416:	4598      	cmp	r8, r3
 800b418:	dc51      	bgt.n	800b4be <__ieee754_pow+0x136>
 800b41a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b41e:	4598      	cmp	r8, r3
 800b420:	f340 84ab 	ble.w	800bd7a <__ieee754_pow+0x9f2>
 800b424:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b428:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b42c:	2b14      	cmp	r3, #20
 800b42e:	dd0f      	ble.n	800b450 <__ieee754_pow+0xc8>
 800b430:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b434:	fa22 f103 	lsr.w	r1, r2, r3
 800b438:	fa01 f303 	lsl.w	r3, r1, r3
 800b43c:	4293      	cmp	r3, r2
 800b43e:	f040 849c 	bne.w	800bd7a <__ieee754_pow+0x9f2>
 800b442:	f001 0101 	and.w	r1, r1, #1
 800b446:	f1c1 0302 	rsb	r3, r1, #2
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	b182      	cbz	r2, 800b470 <__ieee754_pow+0xe8>
 800b44e:	e05f      	b.n	800b510 <__ieee754_pow+0x188>
 800b450:	2a00      	cmp	r2, #0
 800b452:	d15b      	bne.n	800b50c <__ieee754_pow+0x184>
 800b454:	f1c3 0314 	rsb	r3, r3, #20
 800b458:	fa48 f103 	asr.w	r1, r8, r3
 800b45c:	fa01 f303 	lsl.w	r3, r1, r3
 800b460:	4543      	cmp	r3, r8
 800b462:	f040 8487 	bne.w	800bd74 <__ieee754_pow+0x9ec>
 800b466:	f001 0101 	and.w	r1, r1, #1
 800b46a:	f1c1 0302 	rsb	r3, r1, #2
 800b46e:	9304      	str	r3, [sp, #16]
 800b470:	4b5c      	ldr	r3, [pc, #368]	; (800b5e4 <__ieee754_pow+0x25c>)
 800b472:	4598      	cmp	r8, r3
 800b474:	d132      	bne.n	800b4dc <__ieee754_pow+0x154>
 800b476:	f1b9 0f00 	cmp.w	r9, #0
 800b47a:	f280 8477 	bge.w	800bd6c <__ieee754_pow+0x9e4>
 800b47e:	4959      	ldr	r1, [pc, #356]	; (800b5e4 <__ieee754_pow+0x25c>)
 800b480:	4632      	mov	r2, r6
 800b482:	463b      	mov	r3, r7
 800b484:	2000      	movs	r0, #0
 800b486:	f7f5 f9e1 	bl	800084c <__aeabi_ddiv>
 800b48a:	e79c      	b.n	800b3c6 <__ieee754_pow+0x3e>
 800b48c:	2300      	movs	r3, #0
 800b48e:	9304      	str	r3, [sp, #16]
 800b490:	2a00      	cmp	r2, #0
 800b492:	d13d      	bne.n	800b510 <__ieee754_pow+0x188>
 800b494:	4b51      	ldr	r3, [pc, #324]	; (800b5dc <__ieee754_pow+0x254>)
 800b496:	4598      	cmp	r8, r3
 800b498:	d1ea      	bne.n	800b470 <__ieee754_pow+0xe8>
 800b49a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b49e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b4a2:	ea53 030a 	orrs.w	r3, r3, sl
 800b4a6:	f000 8459 	beq.w	800bd5c <__ieee754_pow+0x9d4>
 800b4aa:	4b4f      	ldr	r3, [pc, #316]	; (800b5e8 <__ieee754_pow+0x260>)
 800b4ac:	429c      	cmp	r4, r3
 800b4ae:	dd08      	ble.n	800b4c2 <__ieee754_pow+0x13a>
 800b4b0:	f1b9 0f00 	cmp.w	r9, #0
 800b4b4:	f2c0 8456 	blt.w	800bd64 <__ieee754_pow+0x9dc>
 800b4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4bc:	e783      	b.n	800b3c6 <__ieee754_pow+0x3e>
 800b4be:	2302      	movs	r3, #2
 800b4c0:	e7e5      	b.n	800b48e <__ieee754_pow+0x106>
 800b4c2:	f1b9 0f00 	cmp.w	r9, #0
 800b4c6:	f04f 0000 	mov.w	r0, #0
 800b4ca:	f04f 0100 	mov.w	r1, #0
 800b4ce:	f6bf af7a 	bge.w	800b3c6 <__ieee754_pow+0x3e>
 800b4d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b4d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b4da:	e774      	b.n	800b3c6 <__ieee754_pow+0x3e>
 800b4dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b4e0:	d106      	bne.n	800b4f0 <__ieee754_pow+0x168>
 800b4e2:	4632      	mov	r2, r6
 800b4e4:	463b      	mov	r3, r7
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	f7f5 f885 	bl	80005f8 <__aeabi_dmul>
 800b4ee:	e76a      	b.n	800b3c6 <__ieee754_pow+0x3e>
 800b4f0:	4b3e      	ldr	r3, [pc, #248]	; (800b5ec <__ieee754_pow+0x264>)
 800b4f2:	4599      	cmp	r9, r3
 800b4f4:	d10c      	bne.n	800b510 <__ieee754_pow+0x188>
 800b4f6:	2d00      	cmp	r5, #0
 800b4f8:	db0a      	blt.n	800b510 <__ieee754_pow+0x188>
 800b4fa:	ec47 6b10 	vmov	d0, r6, r7
 800b4fe:	b009      	add	sp, #36	; 0x24
 800b500:	ecbd 8b06 	vpop	{d8-d10}
 800b504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b508:	f000 bd20 	b.w	800bf4c <__ieee754_sqrt>
 800b50c:	2300      	movs	r3, #0
 800b50e:	9304      	str	r3, [sp, #16]
 800b510:	ec47 6b10 	vmov	d0, r6, r7
 800b514:	f000 fc62 	bl	800bddc <fabs>
 800b518:	ec51 0b10 	vmov	r0, r1, d0
 800b51c:	f1ba 0f00 	cmp.w	sl, #0
 800b520:	d129      	bne.n	800b576 <__ieee754_pow+0x1ee>
 800b522:	b124      	cbz	r4, 800b52e <__ieee754_pow+0x1a6>
 800b524:	4b2f      	ldr	r3, [pc, #188]	; (800b5e4 <__ieee754_pow+0x25c>)
 800b526:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d123      	bne.n	800b576 <__ieee754_pow+0x1ee>
 800b52e:	f1b9 0f00 	cmp.w	r9, #0
 800b532:	da05      	bge.n	800b540 <__ieee754_pow+0x1b8>
 800b534:	4602      	mov	r2, r0
 800b536:	460b      	mov	r3, r1
 800b538:	2000      	movs	r0, #0
 800b53a:	492a      	ldr	r1, [pc, #168]	; (800b5e4 <__ieee754_pow+0x25c>)
 800b53c:	f7f5 f986 	bl	800084c <__aeabi_ddiv>
 800b540:	2d00      	cmp	r5, #0
 800b542:	f6bf af40 	bge.w	800b3c6 <__ieee754_pow+0x3e>
 800b546:	9b04      	ldr	r3, [sp, #16]
 800b548:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b54c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b550:	431c      	orrs	r4, r3
 800b552:	d108      	bne.n	800b566 <__ieee754_pow+0x1de>
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	4610      	mov	r0, r2
 800b55a:	4619      	mov	r1, r3
 800b55c:	f7f4 fe94 	bl	8000288 <__aeabi_dsub>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	e78f      	b.n	800b486 <__ieee754_pow+0xfe>
 800b566:	9b04      	ldr	r3, [sp, #16]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	f47f af2c 	bne.w	800b3c6 <__ieee754_pow+0x3e>
 800b56e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b572:	4619      	mov	r1, r3
 800b574:	e727      	b.n	800b3c6 <__ieee754_pow+0x3e>
 800b576:	0feb      	lsrs	r3, r5, #31
 800b578:	3b01      	subs	r3, #1
 800b57a:	9306      	str	r3, [sp, #24]
 800b57c:	9a06      	ldr	r2, [sp, #24]
 800b57e:	9b04      	ldr	r3, [sp, #16]
 800b580:	4313      	orrs	r3, r2
 800b582:	d102      	bne.n	800b58a <__ieee754_pow+0x202>
 800b584:	4632      	mov	r2, r6
 800b586:	463b      	mov	r3, r7
 800b588:	e7e6      	b.n	800b558 <__ieee754_pow+0x1d0>
 800b58a:	4b19      	ldr	r3, [pc, #100]	; (800b5f0 <__ieee754_pow+0x268>)
 800b58c:	4598      	cmp	r8, r3
 800b58e:	f340 80fb 	ble.w	800b788 <__ieee754_pow+0x400>
 800b592:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b596:	4598      	cmp	r8, r3
 800b598:	4b13      	ldr	r3, [pc, #76]	; (800b5e8 <__ieee754_pow+0x260>)
 800b59a:	dd0c      	ble.n	800b5b6 <__ieee754_pow+0x22e>
 800b59c:	429c      	cmp	r4, r3
 800b59e:	dc0f      	bgt.n	800b5c0 <__ieee754_pow+0x238>
 800b5a0:	f1b9 0f00 	cmp.w	r9, #0
 800b5a4:	da0f      	bge.n	800b5c6 <__ieee754_pow+0x23e>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	b009      	add	sp, #36	; 0x24
 800b5aa:	ecbd 8b06 	vpop	{d8-d10}
 800b5ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b2:	f000 bcc2 	b.w	800bf3a <__math_oflow>
 800b5b6:	429c      	cmp	r4, r3
 800b5b8:	dbf2      	blt.n	800b5a0 <__ieee754_pow+0x218>
 800b5ba:	4b0a      	ldr	r3, [pc, #40]	; (800b5e4 <__ieee754_pow+0x25c>)
 800b5bc:	429c      	cmp	r4, r3
 800b5be:	dd19      	ble.n	800b5f4 <__ieee754_pow+0x26c>
 800b5c0:	f1b9 0f00 	cmp.w	r9, #0
 800b5c4:	dcef      	bgt.n	800b5a6 <__ieee754_pow+0x21e>
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	b009      	add	sp, #36	; 0x24
 800b5ca:	ecbd 8b06 	vpop	{d8-d10}
 800b5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d2:	f000 bca9 	b.w	800bf28 <__math_uflow>
 800b5d6:	bf00      	nop
 800b5d8:	fff00000 	.word	0xfff00000
 800b5dc:	7ff00000 	.word	0x7ff00000
 800b5e0:	433fffff 	.word	0x433fffff
 800b5e4:	3ff00000 	.word	0x3ff00000
 800b5e8:	3fefffff 	.word	0x3fefffff
 800b5ec:	3fe00000 	.word	0x3fe00000
 800b5f0:	41e00000 	.word	0x41e00000
 800b5f4:	4b60      	ldr	r3, [pc, #384]	; (800b778 <__ieee754_pow+0x3f0>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f7f4 fe46 	bl	8000288 <__aeabi_dsub>
 800b5fc:	a354      	add	r3, pc, #336	; (adr r3, 800b750 <__ieee754_pow+0x3c8>)
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	4604      	mov	r4, r0
 800b604:	460d      	mov	r5, r1
 800b606:	f7f4 fff7 	bl	80005f8 <__aeabi_dmul>
 800b60a:	a353      	add	r3, pc, #332	; (adr r3, 800b758 <__ieee754_pow+0x3d0>)
 800b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b610:	4606      	mov	r6, r0
 800b612:	460f      	mov	r7, r1
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f4 ffee 	bl	80005f8 <__aeabi_dmul>
 800b61c:	4b57      	ldr	r3, [pc, #348]	; (800b77c <__ieee754_pow+0x3f4>)
 800b61e:	4682      	mov	sl, r0
 800b620:	468b      	mov	fp, r1
 800b622:	2200      	movs	r2, #0
 800b624:	4620      	mov	r0, r4
 800b626:	4629      	mov	r1, r5
 800b628:	f7f4 ffe6 	bl	80005f8 <__aeabi_dmul>
 800b62c:	4602      	mov	r2, r0
 800b62e:	460b      	mov	r3, r1
 800b630:	a14b      	add	r1, pc, #300	; (adr r1, 800b760 <__ieee754_pow+0x3d8>)
 800b632:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b636:	f7f4 fe27 	bl	8000288 <__aeabi_dsub>
 800b63a:	4622      	mov	r2, r4
 800b63c:	462b      	mov	r3, r5
 800b63e:	f7f4 ffdb 	bl	80005f8 <__aeabi_dmul>
 800b642:	4602      	mov	r2, r0
 800b644:	460b      	mov	r3, r1
 800b646:	2000      	movs	r0, #0
 800b648:	494d      	ldr	r1, [pc, #308]	; (800b780 <__ieee754_pow+0x3f8>)
 800b64a:	f7f4 fe1d 	bl	8000288 <__aeabi_dsub>
 800b64e:	4622      	mov	r2, r4
 800b650:	4680      	mov	r8, r0
 800b652:	4689      	mov	r9, r1
 800b654:	462b      	mov	r3, r5
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	f7f4 ffcd 	bl	80005f8 <__aeabi_dmul>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	4640      	mov	r0, r8
 800b664:	4649      	mov	r1, r9
 800b666:	f7f4 ffc7 	bl	80005f8 <__aeabi_dmul>
 800b66a:	a33f      	add	r3, pc, #252	; (adr r3, 800b768 <__ieee754_pow+0x3e0>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	f7f4 ffc2 	bl	80005f8 <__aeabi_dmul>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	4650      	mov	r0, sl
 800b67a:	4659      	mov	r1, fp
 800b67c:	f7f4 fe04 	bl	8000288 <__aeabi_dsub>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4680      	mov	r8, r0
 800b686:	4689      	mov	r9, r1
 800b688:	4630      	mov	r0, r6
 800b68a:	4639      	mov	r1, r7
 800b68c:	f7f4 fdfe 	bl	800028c <__adddf3>
 800b690:	2000      	movs	r0, #0
 800b692:	4632      	mov	r2, r6
 800b694:	463b      	mov	r3, r7
 800b696:	4604      	mov	r4, r0
 800b698:	460d      	mov	r5, r1
 800b69a:	f7f4 fdf5 	bl	8000288 <__aeabi_dsub>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	4640      	mov	r0, r8
 800b6a4:	4649      	mov	r1, r9
 800b6a6:	f7f4 fdef 	bl	8000288 <__aeabi_dsub>
 800b6aa:	9b04      	ldr	r3, [sp, #16]
 800b6ac:	9a06      	ldr	r2, [sp, #24]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	4682      	mov	sl, r0
 800b6b4:	468b      	mov	fp, r1
 800b6b6:	f040 81e7 	bne.w	800ba88 <__ieee754_pow+0x700>
 800b6ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b770 <__ieee754_pow+0x3e8>
 800b6be:	eeb0 8a47 	vmov.f32	s16, s14
 800b6c2:	eef0 8a67 	vmov.f32	s17, s15
 800b6c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b6ca:	2600      	movs	r6, #0
 800b6cc:	4632      	mov	r2, r6
 800b6ce:	463b      	mov	r3, r7
 800b6d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6d4:	f7f4 fdd8 	bl	8000288 <__aeabi_dsub>
 800b6d8:	4622      	mov	r2, r4
 800b6da:	462b      	mov	r3, r5
 800b6dc:	f7f4 ff8c 	bl	80005f8 <__aeabi_dmul>
 800b6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6e4:	4680      	mov	r8, r0
 800b6e6:	4689      	mov	r9, r1
 800b6e8:	4650      	mov	r0, sl
 800b6ea:	4659      	mov	r1, fp
 800b6ec:	f7f4 ff84 	bl	80005f8 <__aeabi_dmul>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4640      	mov	r0, r8
 800b6f6:	4649      	mov	r1, r9
 800b6f8:	f7f4 fdc8 	bl	800028c <__adddf3>
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	463b      	mov	r3, r7
 800b700:	4680      	mov	r8, r0
 800b702:	4689      	mov	r9, r1
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f4 ff76 	bl	80005f8 <__aeabi_dmul>
 800b70c:	460b      	mov	r3, r1
 800b70e:	4604      	mov	r4, r0
 800b710:	460d      	mov	r5, r1
 800b712:	4602      	mov	r2, r0
 800b714:	4649      	mov	r1, r9
 800b716:	4640      	mov	r0, r8
 800b718:	f7f4 fdb8 	bl	800028c <__adddf3>
 800b71c:	4b19      	ldr	r3, [pc, #100]	; (800b784 <__ieee754_pow+0x3fc>)
 800b71e:	4299      	cmp	r1, r3
 800b720:	ec45 4b19 	vmov	d9, r4, r5
 800b724:	4606      	mov	r6, r0
 800b726:	460f      	mov	r7, r1
 800b728:	468b      	mov	fp, r1
 800b72a:	f340 82f0 	ble.w	800bd0e <__ieee754_pow+0x986>
 800b72e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b732:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b736:	4303      	orrs	r3, r0
 800b738:	f000 81e4 	beq.w	800bb04 <__ieee754_pow+0x77c>
 800b73c:	ec51 0b18 	vmov	r0, r1, d8
 800b740:	2200      	movs	r2, #0
 800b742:	2300      	movs	r3, #0
 800b744:	f7f5 f9ca 	bl	8000adc <__aeabi_dcmplt>
 800b748:	3800      	subs	r0, #0
 800b74a:	bf18      	it	ne
 800b74c:	2001      	movne	r0, #1
 800b74e:	e72b      	b.n	800b5a8 <__ieee754_pow+0x220>
 800b750:	60000000 	.word	0x60000000
 800b754:	3ff71547 	.word	0x3ff71547
 800b758:	f85ddf44 	.word	0xf85ddf44
 800b75c:	3e54ae0b 	.word	0x3e54ae0b
 800b760:	55555555 	.word	0x55555555
 800b764:	3fd55555 	.word	0x3fd55555
 800b768:	652b82fe 	.word	0x652b82fe
 800b76c:	3ff71547 	.word	0x3ff71547
 800b770:	00000000 	.word	0x00000000
 800b774:	bff00000 	.word	0xbff00000
 800b778:	3ff00000 	.word	0x3ff00000
 800b77c:	3fd00000 	.word	0x3fd00000
 800b780:	3fe00000 	.word	0x3fe00000
 800b784:	408fffff 	.word	0x408fffff
 800b788:	4bd5      	ldr	r3, [pc, #852]	; (800bae0 <__ieee754_pow+0x758>)
 800b78a:	402b      	ands	r3, r5
 800b78c:	2200      	movs	r2, #0
 800b78e:	b92b      	cbnz	r3, 800b79c <__ieee754_pow+0x414>
 800b790:	4bd4      	ldr	r3, [pc, #848]	; (800bae4 <__ieee754_pow+0x75c>)
 800b792:	f7f4 ff31 	bl	80005f8 <__aeabi_dmul>
 800b796:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b79a:	460c      	mov	r4, r1
 800b79c:	1523      	asrs	r3, r4, #20
 800b79e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b7a2:	4413      	add	r3, r2
 800b7a4:	9305      	str	r3, [sp, #20]
 800b7a6:	4bd0      	ldr	r3, [pc, #832]	; (800bae8 <__ieee754_pow+0x760>)
 800b7a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b7ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b7b0:	429c      	cmp	r4, r3
 800b7b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b7b6:	dd08      	ble.n	800b7ca <__ieee754_pow+0x442>
 800b7b8:	4bcc      	ldr	r3, [pc, #816]	; (800baec <__ieee754_pow+0x764>)
 800b7ba:	429c      	cmp	r4, r3
 800b7bc:	f340 8162 	ble.w	800ba84 <__ieee754_pow+0x6fc>
 800b7c0:	9b05      	ldr	r3, [sp, #20]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	9305      	str	r3, [sp, #20]
 800b7c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b7ca:	2400      	movs	r4, #0
 800b7cc:	00e3      	lsls	r3, r4, #3
 800b7ce:	9307      	str	r3, [sp, #28]
 800b7d0:	4bc7      	ldr	r3, [pc, #796]	; (800baf0 <__ieee754_pow+0x768>)
 800b7d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7d6:	ed93 7b00 	vldr	d7, [r3]
 800b7da:	4629      	mov	r1, r5
 800b7dc:	ec53 2b17 	vmov	r2, r3, d7
 800b7e0:	eeb0 9a47 	vmov.f32	s18, s14
 800b7e4:	eef0 9a67 	vmov.f32	s19, s15
 800b7e8:	4682      	mov	sl, r0
 800b7ea:	f7f4 fd4d 	bl	8000288 <__aeabi_dsub>
 800b7ee:	4652      	mov	r2, sl
 800b7f0:	4606      	mov	r6, r0
 800b7f2:	460f      	mov	r7, r1
 800b7f4:	462b      	mov	r3, r5
 800b7f6:	ec51 0b19 	vmov	r0, r1, d9
 800b7fa:	f7f4 fd47 	bl	800028c <__adddf3>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	2000      	movs	r0, #0
 800b804:	49bb      	ldr	r1, [pc, #748]	; (800baf4 <__ieee754_pow+0x76c>)
 800b806:	f7f5 f821 	bl	800084c <__aeabi_ddiv>
 800b80a:	ec41 0b1a 	vmov	d10, r0, r1
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4630      	mov	r0, r6
 800b814:	4639      	mov	r1, r7
 800b816:	f7f4 feef 	bl	80005f8 <__aeabi_dmul>
 800b81a:	2300      	movs	r3, #0
 800b81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b820:	9302      	str	r3, [sp, #8]
 800b822:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b826:	46ab      	mov	fp, r5
 800b828:	106d      	asrs	r5, r5, #1
 800b82a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b82e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b832:	ec41 0b18 	vmov	d8, r0, r1
 800b836:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b83a:	2200      	movs	r2, #0
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	4614      	mov	r4, r2
 800b842:	461d      	mov	r5, r3
 800b844:	f7f4 fed8 	bl	80005f8 <__aeabi_dmul>
 800b848:	4602      	mov	r2, r0
 800b84a:	460b      	mov	r3, r1
 800b84c:	4630      	mov	r0, r6
 800b84e:	4639      	mov	r1, r7
 800b850:	f7f4 fd1a 	bl	8000288 <__aeabi_dsub>
 800b854:	ec53 2b19 	vmov	r2, r3, d9
 800b858:	4606      	mov	r6, r0
 800b85a:	460f      	mov	r7, r1
 800b85c:	4620      	mov	r0, r4
 800b85e:	4629      	mov	r1, r5
 800b860:	f7f4 fd12 	bl	8000288 <__aeabi_dsub>
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	4650      	mov	r0, sl
 800b86a:	4659      	mov	r1, fp
 800b86c:	f7f4 fd0c 	bl	8000288 <__aeabi_dsub>
 800b870:	4642      	mov	r2, r8
 800b872:	464b      	mov	r3, r9
 800b874:	f7f4 fec0 	bl	80005f8 <__aeabi_dmul>
 800b878:	4602      	mov	r2, r0
 800b87a:	460b      	mov	r3, r1
 800b87c:	4630      	mov	r0, r6
 800b87e:	4639      	mov	r1, r7
 800b880:	f7f4 fd02 	bl	8000288 <__aeabi_dsub>
 800b884:	ec53 2b1a 	vmov	r2, r3, d10
 800b888:	f7f4 feb6 	bl	80005f8 <__aeabi_dmul>
 800b88c:	ec53 2b18 	vmov	r2, r3, d8
 800b890:	ec41 0b19 	vmov	d9, r0, r1
 800b894:	ec51 0b18 	vmov	r0, r1, d8
 800b898:	f7f4 feae 	bl	80005f8 <__aeabi_dmul>
 800b89c:	a37c      	add	r3, pc, #496	; (adr r3, 800ba90 <__ieee754_pow+0x708>)
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	460d      	mov	r5, r1
 800b8a6:	f7f4 fea7 	bl	80005f8 <__aeabi_dmul>
 800b8aa:	a37b      	add	r3, pc, #492	; (adr r3, 800ba98 <__ieee754_pow+0x710>)
 800b8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b0:	f7f4 fcec 	bl	800028c <__adddf3>
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	f7f4 fe9e 	bl	80005f8 <__aeabi_dmul>
 800b8bc:	a378      	add	r3, pc, #480	; (adr r3, 800baa0 <__ieee754_pow+0x718>)
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	f7f4 fce3 	bl	800028c <__adddf3>
 800b8c6:	4622      	mov	r2, r4
 800b8c8:	462b      	mov	r3, r5
 800b8ca:	f7f4 fe95 	bl	80005f8 <__aeabi_dmul>
 800b8ce:	a376      	add	r3, pc, #472	; (adr r3, 800baa8 <__ieee754_pow+0x720>)
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f7f4 fcda 	bl	800028c <__adddf3>
 800b8d8:	4622      	mov	r2, r4
 800b8da:	462b      	mov	r3, r5
 800b8dc:	f7f4 fe8c 	bl	80005f8 <__aeabi_dmul>
 800b8e0:	a373      	add	r3, pc, #460	; (adr r3, 800bab0 <__ieee754_pow+0x728>)
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	f7f4 fcd1 	bl	800028c <__adddf3>
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	462b      	mov	r3, r5
 800b8ee:	f7f4 fe83 	bl	80005f8 <__aeabi_dmul>
 800b8f2:	a371      	add	r3, pc, #452	; (adr r3, 800bab8 <__ieee754_pow+0x730>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	f7f4 fcc8 	bl	800028c <__adddf3>
 800b8fc:	4622      	mov	r2, r4
 800b8fe:	4606      	mov	r6, r0
 800b900:	460f      	mov	r7, r1
 800b902:	462b      	mov	r3, r5
 800b904:	4620      	mov	r0, r4
 800b906:	4629      	mov	r1, r5
 800b908:	f7f4 fe76 	bl	80005f8 <__aeabi_dmul>
 800b90c:	4602      	mov	r2, r0
 800b90e:	460b      	mov	r3, r1
 800b910:	4630      	mov	r0, r6
 800b912:	4639      	mov	r1, r7
 800b914:	f7f4 fe70 	bl	80005f8 <__aeabi_dmul>
 800b918:	4642      	mov	r2, r8
 800b91a:	4604      	mov	r4, r0
 800b91c:	460d      	mov	r5, r1
 800b91e:	464b      	mov	r3, r9
 800b920:	ec51 0b18 	vmov	r0, r1, d8
 800b924:	f7f4 fcb2 	bl	800028c <__adddf3>
 800b928:	ec53 2b19 	vmov	r2, r3, d9
 800b92c:	f7f4 fe64 	bl	80005f8 <__aeabi_dmul>
 800b930:	4622      	mov	r2, r4
 800b932:	462b      	mov	r3, r5
 800b934:	f7f4 fcaa 	bl	800028c <__adddf3>
 800b938:	4642      	mov	r2, r8
 800b93a:	4682      	mov	sl, r0
 800b93c:	468b      	mov	fp, r1
 800b93e:	464b      	mov	r3, r9
 800b940:	4640      	mov	r0, r8
 800b942:	4649      	mov	r1, r9
 800b944:	f7f4 fe58 	bl	80005f8 <__aeabi_dmul>
 800b948:	4b6b      	ldr	r3, [pc, #428]	; (800baf8 <__ieee754_pow+0x770>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	4606      	mov	r6, r0
 800b94e:	460f      	mov	r7, r1
 800b950:	f7f4 fc9c 	bl	800028c <__adddf3>
 800b954:	4652      	mov	r2, sl
 800b956:	465b      	mov	r3, fp
 800b958:	f7f4 fc98 	bl	800028c <__adddf3>
 800b95c:	2000      	movs	r0, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	460d      	mov	r5, r1
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4640      	mov	r0, r8
 800b968:	4649      	mov	r1, r9
 800b96a:	f7f4 fe45 	bl	80005f8 <__aeabi_dmul>
 800b96e:	4b62      	ldr	r3, [pc, #392]	; (800baf8 <__ieee754_pow+0x770>)
 800b970:	4680      	mov	r8, r0
 800b972:	4689      	mov	r9, r1
 800b974:	2200      	movs	r2, #0
 800b976:	4620      	mov	r0, r4
 800b978:	4629      	mov	r1, r5
 800b97a:	f7f4 fc85 	bl	8000288 <__aeabi_dsub>
 800b97e:	4632      	mov	r2, r6
 800b980:	463b      	mov	r3, r7
 800b982:	f7f4 fc81 	bl	8000288 <__aeabi_dsub>
 800b986:	4602      	mov	r2, r0
 800b988:	460b      	mov	r3, r1
 800b98a:	4650      	mov	r0, sl
 800b98c:	4659      	mov	r1, fp
 800b98e:	f7f4 fc7b 	bl	8000288 <__aeabi_dsub>
 800b992:	ec53 2b18 	vmov	r2, r3, d8
 800b996:	f7f4 fe2f 	bl	80005f8 <__aeabi_dmul>
 800b99a:	4622      	mov	r2, r4
 800b99c:	4606      	mov	r6, r0
 800b99e:	460f      	mov	r7, r1
 800b9a0:	462b      	mov	r3, r5
 800b9a2:	ec51 0b19 	vmov	r0, r1, d9
 800b9a6:	f7f4 fe27 	bl	80005f8 <__aeabi_dmul>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	f7f4 fc6b 	bl	800028c <__adddf3>
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	460f      	mov	r7, r1
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4640      	mov	r0, r8
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	f7f4 fc63 	bl	800028c <__adddf3>
 800b9c6:	a33e      	add	r3, pc, #248	; (adr r3, 800bac0 <__ieee754_pow+0x738>)
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	460d      	mov	r5, r1
 800b9d2:	f7f4 fe11 	bl	80005f8 <__aeabi_dmul>
 800b9d6:	4642      	mov	r2, r8
 800b9d8:	ec41 0b18 	vmov	d8, r0, r1
 800b9dc:	464b      	mov	r3, r9
 800b9de:	4620      	mov	r0, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	f7f4 fc51 	bl	8000288 <__aeabi_dsub>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	f7f4 fc4b 	bl	8000288 <__aeabi_dsub>
 800b9f2:	a335      	add	r3, pc, #212	; (adr r3, 800bac8 <__ieee754_pow+0x740>)
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	f7f4 fdfe 	bl	80005f8 <__aeabi_dmul>
 800b9fc:	a334      	add	r3, pc, #208	; (adr r3, 800bad0 <__ieee754_pow+0x748>)
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	4606      	mov	r6, r0
 800ba04:	460f      	mov	r7, r1
 800ba06:	4620      	mov	r0, r4
 800ba08:	4629      	mov	r1, r5
 800ba0a:	f7f4 fdf5 	bl	80005f8 <__aeabi_dmul>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	4630      	mov	r0, r6
 800ba14:	4639      	mov	r1, r7
 800ba16:	f7f4 fc39 	bl	800028c <__adddf3>
 800ba1a:	9a07      	ldr	r2, [sp, #28]
 800ba1c:	4b37      	ldr	r3, [pc, #220]	; (800bafc <__ieee754_pow+0x774>)
 800ba1e:	4413      	add	r3, r2
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	f7f4 fc32 	bl	800028c <__adddf3>
 800ba28:	4682      	mov	sl, r0
 800ba2a:	9805      	ldr	r0, [sp, #20]
 800ba2c:	468b      	mov	fp, r1
 800ba2e:	f7f4 fd79 	bl	8000524 <__aeabi_i2d>
 800ba32:	9a07      	ldr	r2, [sp, #28]
 800ba34:	4b32      	ldr	r3, [pc, #200]	; (800bb00 <__ieee754_pow+0x778>)
 800ba36:	4413      	add	r3, r2
 800ba38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	460f      	mov	r7, r1
 800ba40:	4652      	mov	r2, sl
 800ba42:	465b      	mov	r3, fp
 800ba44:	ec51 0b18 	vmov	r0, r1, d8
 800ba48:	f7f4 fc20 	bl	800028c <__adddf3>
 800ba4c:	4642      	mov	r2, r8
 800ba4e:	464b      	mov	r3, r9
 800ba50:	f7f4 fc1c 	bl	800028c <__adddf3>
 800ba54:	4632      	mov	r2, r6
 800ba56:	463b      	mov	r3, r7
 800ba58:	f7f4 fc18 	bl	800028c <__adddf3>
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	4632      	mov	r2, r6
 800ba60:	463b      	mov	r3, r7
 800ba62:	4604      	mov	r4, r0
 800ba64:	460d      	mov	r5, r1
 800ba66:	f7f4 fc0f 	bl	8000288 <__aeabi_dsub>
 800ba6a:	4642      	mov	r2, r8
 800ba6c:	464b      	mov	r3, r9
 800ba6e:	f7f4 fc0b 	bl	8000288 <__aeabi_dsub>
 800ba72:	ec53 2b18 	vmov	r2, r3, d8
 800ba76:	f7f4 fc07 	bl	8000288 <__aeabi_dsub>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	4650      	mov	r0, sl
 800ba80:	4659      	mov	r1, fp
 800ba82:	e610      	b.n	800b6a6 <__ieee754_pow+0x31e>
 800ba84:	2401      	movs	r4, #1
 800ba86:	e6a1      	b.n	800b7cc <__ieee754_pow+0x444>
 800ba88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bad8 <__ieee754_pow+0x750>
 800ba8c:	e617      	b.n	800b6be <__ieee754_pow+0x336>
 800ba8e:	bf00      	nop
 800ba90:	4a454eef 	.word	0x4a454eef
 800ba94:	3fca7e28 	.word	0x3fca7e28
 800ba98:	93c9db65 	.word	0x93c9db65
 800ba9c:	3fcd864a 	.word	0x3fcd864a
 800baa0:	a91d4101 	.word	0xa91d4101
 800baa4:	3fd17460 	.word	0x3fd17460
 800baa8:	518f264d 	.word	0x518f264d
 800baac:	3fd55555 	.word	0x3fd55555
 800bab0:	db6fabff 	.word	0xdb6fabff
 800bab4:	3fdb6db6 	.word	0x3fdb6db6
 800bab8:	33333303 	.word	0x33333303
 800babc:	3fe33333 	.word	0x3fe33333
 800bac0:	e0000000 	.word	0xe0000000
 800bac4:	3feec709 	.word	0x3feec709
 800bac8:	dc3a03fd 	.word	0xdc3a03fd
 800bacc:	3feec709 	.word	0x3feec709
 800bad0:	145b01f5 	.word	0x145b01f5
 800bad4:	be3e2fe0 	.word	0xbe3e2fe0
 800bad8:	00000000 	.word	0x00000000
 800badc:	3ff00000 	.word	0x3ff00000
 800bae0:	7ff00000 	.word	0x7ff00000
 800bae4:	43400000 	.word	0x43400000
 800bae8:	0003988e 	.word	0x0003988e
 800baec:	000bb679 	.word	0x000bb679
 800baf0:	0800c600 	.word	0x0800c600
 800baf4:	3ff00000 	.word	0x3ff00000
 800baf8:	40080000 	.word	0x40080000
 800bafc:	0800c620 	.word	0x0800c620
 800bb00:	0800c610 	.word	0x0800c610
 800bb04:	a3b3      	add	r3, pc, #716	; (adr r3, 800bdd4 <__ieee754_pow+0xa4c>)
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	f7f4 fbbd 	bl	800028c <__adddf3>
 800bb12:	4622      	mov	r2, r4
 800bb14:	ec41 0b1a 	vmov	d10, r0, r1
 800bb18:	462b      	mov	r3, r5
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	4639      	mov	r1, r7
 800bb1e:	f7f4 fbb3 	bl	8000288 <__aeabi_dsub>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	ec51 0b1a 	vmov	r0, r1, d10
 800bb2a:	f7f4 fff5 	bl	8000b18 <__aeabi_dcmpgt>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f47f ae04 	bne.w	800b73c <__ieee754_pow+0x3b4>
 800bb34:	4aa2      	ldr	r2, [pc, #648]	; (800bdc0 <__ieee754_pow+0xa38>)
 800bb36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	f340 8107 	ble.w	800bd4e <__ieee754_pow+0x9c6>
 800bb40:	151b      	asrs	r3, r3, #20
 800bb42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bb46:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bb4a:	fa4a fa03 	asr.w	sl, sl, r3
 800bb4e:	44da      	add	sl, fp
 800bb50:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bb54:	489b      	ldr	r0, [pc, #620]	; (800bdc4 <__ieee754_pow+0xa3c>)
 800bb56:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bb5a:	4108      	asrs	r0, r1
 800bb5c:	ea00 030a 	and.w	r3, r0, sl
 800bb60:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bb64:	f1c1 0114 	rsb	r1, r1, #20
 800bb68:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bb6c:	fa4a fa01 	asr.w	sl, sl, r1
 800bb70:	f1bb 0f00 	cmp.w	fp, #0
 800bb74:	f04f 0200 	mov.w	r2, #0
 800bb78:	4620      	mov	r0, r4
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	bfb8      	it	lt
 800bb7e:	f1ca 0a00 	rsblt	sl, sl, #0
 800bb82:	f7f4 fb81 	bl	8000288 <__aeabi_dsub>
 800bb86:	ec41 0b19 	vmov	d9, r0, r1
 800bb8a:	4642      	mov	r2, r8
 800bb8c:	464b      	mov	r3, r9
 800bb8e:	ec51 0b19 	vmov	r0, r1, d9
 800bb92:	f7f4 fb7b 	bl	800028c <__adddf3>
 800bb96:	a37a      	add	r3, pc, #488	; (adr r3, 800bd80 <__ieee754_pow+0x9f8>)
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	4604      	mov	r4, r0
 800bba0:	460d      	mov	r5, r1
 800bba2:	f7f4 fd29 	bl	80005f8 <__aeabi_dmul>
 800bba6:	ec53 2b19 	vmov	r2, r3, d9
 800bbaa:	4606      	mov	r6, r0
 800bbac:	460f      	mov	r7, r1
 800bbae:	4620      	mov	r0, r4
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	f7f4 fb69 	bl	8000288 <__aeabi_dsub>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	4640      	mov	r0, r8
 800bbbc:	4649      	mov	r1, r9
 800bbbe:	f7f4 fb63 	bl	8000288 <__aeabi_dsub>
 800bbc2:	a371      	add	r3, pc, #452	; (adr r3, 800bd88 <__ieee754_pow+0xa00>)
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	f7f4 fd16 	bl	80005f8 <__aeabi_dmul>
 800bbcc:	a370      	add	r3, pc, #448	; (adr r3, 800bd90 <__ieee754_pow+0xa08>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	4680      	mov	r8, r0
 800bbd4:	4689      	mov	r9, r1
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4629      	mov	r1, r5
 800bbda:	f7f4 fd0d 	bl	80005f8 <__aeabi_dmul>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4640      	mov	r0, r8
 800bbe4:	4649      	mov	r1, r9
 800bbe6:	f7f4 fb51 	bl	800028c <__adddf3>
 800bbea:	4604      	mov	r4, r0
 800bbec:	460d      	mov	r5, r1
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	4639      	mov	r1, r7
 800bbf6:	f7f4 fb49 	bl	800028c <__adddf3>
 800bbfa:	4632      	mov	r2, r6
 800bbfc:	463b      	mov	r3, r7
 800bbfe:	4680      	mov	r8, r0
 800bc00:	4689      	mov	r9, r1
 800bc02:	f7f4 fb41 	bl	8000288 <__aeabi_dsub>
 800bc06:	4602      	mov	r2, r0
 800bc08:	460b      	mov	r3, r1
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	f7f4 fb3b 	bl	8000288 <__aeabi_dsub>
 800bc12:	4642      	mov	r2, r8
 800bc14:	4606      	mov	r6, r0
 800bc16:	460f      	mov	r7, r1
 800bc18:	464b      	mov	r3, r9
 800bc1a:	4640      	mov	r0, r8
 800bc1c:	4649      	mov	r1, r9
 800bc1e:	f7f4 fceb 	bl	80005f8 <__aeabi_dmul>
 800bc22:	a35d      	add	r3, pc, #372	; (adr r3, 800bd98 <__ieee754_pow+0xa10>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	4604      	mov	r4, r0
 800bc2a:	460d      	mov	r5, r1
 800bc2c:	f7f4 fce4 	bl	80005f8 <__aeabi_dmul>
 800bc30:	a35b      	add	r3, pc, #364	; (adr r3, 800bda0 <__ieee754_pow+0xa18>)
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	f7f4 fb27 	bl	8000288 <__aeabi_dsub>
 800bc3a:	4622      	mov	r2, r4
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	f7f4 fcdb 	bl	80005f8 <__aeabi_dmul>
 800bc42:	a359      	add	r3, pc, #356	; (adr r3, 800bda8 <__ieee754_pow+0xa20>)
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	f7f4 fb20 	bl	800028c <__adddf3>
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	462b      	mov	r3, r5
 800bc50:	f7f4 fcd2 	bl	80005f8 <__aeabi_dmul>
 800bc54:	a356      	add	r3, pc, #344	; (adr r3, 800bdb0 <__ieee754_pow+0xa28>)
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	f7f4 fb15 	bl	8000288 <__aeabi_dsub>
 800bc5e:	4622      	mov	r2, r4
 800bc60:	462b      	mov	r3, r5
 800bc62:	f7f4 fcc9 	bl	80005f8 <__aeabi_dmul>
 800bc66:	a354      	add	r3, pc, #336	; (adr r3, 800bdb8 <__ieee754_pow+0xa30>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	f7f4 fb0e 	bl	800028c <__adddf3>
 800bc70:	4622      	mov	r2, r4
 800bc72:	462b      	mov	r3, r5
 800bc74:	f7f4 fcc0 	bl	80005f8 <__aeabi_dmul>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	4649      	mov	r1, r9
 800bc80:	f7f4 fb02 	bl	8000288 <__aeabi_dsub>
 800bc84:	4604      	mov	r4, r0
 800bc86:	460d      	mov	r5, r1
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4640      	mov	r0, r8
 800bc8e:	4649      	mov	r1, r9
 800bc90:	f7f4 fcb2 	bl	80005f8 <__aeabi_dmul>
 800bc94:	2200      	movs	r2, #0
 800bc96:	ec41 0b19 	vmov	d9, r0, r1
 800bc9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc9e:	4620      	mov	r0, r4
 800bca0:	4629      	mov	r1, r5
 800bca2:	f7f4 faf1 	bl	8000288 <__aeabi_dsub>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	ec51 0b19 	vmov	r0, r1, d9
 800bcae:	f7f4 fdcd 	bl	800084c <__aeabi_ddiv>
 800bcb2:	4632      	mov	r2, r6
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	460d      	mov	r5, r1
 800bcb8:	463b      	mov	r3, r7
 800bcba:	4640      	mov	r0, r8
 800bcbc:	4649      	mov	r1, r9
 800bcbe:	f7f4 fc9b 	bl	80005f8 <__aeabi_dmul>
 800bcc2:	4632      	mov	r2, r6
 800bcc4:	463b      	mov	r3, r7
 800bcc6:	f7f4 fae1 	bl	800028c <__adddf3>
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	4620      	mov	r0, r4
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	f7f4 fad9 	bl	8000288 <__aeabi_dsub>
 800bcd6:	4642      	mov	r2, r8
 800bcd8:	464b      	mov	r3, r9
 800bcda:	f7f4 fad5 	bl	8000288 <__aeabi_dsub>
 800bcde:	460b      	mov	r3, r1
 800bce0:	4602      	mov	r2, r0
 800bce2:	4939      	ldr	r1, [pc, #228]	; (800bdc8 <__ieee754_pow+0xa40>)
 800bce4:	2000      	movs	r0, #0
 800bce6:	f7f4 facf 	bl	8000288 <__aeabi_dsub>
 800bcea:	ec41 0b10 	vmov	d0, r0, r1
 800bcee:	ee10 3a90 	vmov	r3, s1
 800bcf2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bcf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcfa:	da2b      	bge.n	800bd54 <__ieee754_pow+0x9cc>
 800bcfc:	4650      	mov	r0, sl
 800bcfe:	f000 f877 	bl	800bdf0 <scalbn>
 800bd02:	ec51 0b10 	vmov	r0, r1, d0
 800bd06:	ec53 2b18 	vmov	r2, r3, d8
 800bd0a:	f7ff bbee 	b.w	800b4ea <__ieee754_pow+0x162>
 800bd0e:	4b2f      	ldr	r3, [pc, #188]	; (800bdcc <__ieee754_pow+0xa44>)
 800bd10:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bd14:	429e      	cmp	r6, r3
 800bd16:	f77f af0d 	ble.w	800bb34 <__ieee754_pow+0x7ac>
 800bd1a:	4b2d      	ldr	r3, [pc, #180]	; (800bdd0 <__ieee754_pow+0xa48>)
 800bd1c:	440b      	add	r3, r1
 800bd1e:	4303      	orrs	r3, r0
 800bd20:	d009      	beq.n	800bd36 <__ieee754_pow+0x9ae>
 800bd22:	ec51 0b18 	vmov	r0, r1, d8
 800bd26:	2200      	movs	r2, #0
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f7f4 fed7 	bl	8000adc <__aeabi_dcmplt>
 800bd2e:	3800      	subs	r0, #0
 800bd30:	bf18      	it	ne
 800bd32:	2001      	movne	r0, #1
 800bd34:	e448      	b.n	800b5c8 <__ieee754_pow+0x240>
 800bd36:	4622      	mov	r2, r4
 800bd38:	462b      	mov	r3, r5
 800bd3a:	f7f4 faa5 	bl	8000288 <__aeabi_dsub>
 800bd3e:	4642      	mov	r2, r8
 800bd40:	464b      	mov	r3, r9
 800bd42:	f7f4 fedf 	bl	8000b04 <__aeabi_dcmpge>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	f43f aef4 	beq.w	800bb34 <__ieee754_pow+0x7ac>
 800bd4c:	e7e9      	b.n	800bd22 <__ieee754_pow+0x99a>
 800bd4e:	f04f 0a00 	mov.w	sl, #0
 800bd52:	e71a      	b.n	800bb8a <__ieee754_pow+0x802>
 800bd54:	ec51 0b10 	vmov	r0, r1, d0
 800bd58:	4619      	mov	r1, r3
 800bd5a:	e7d4      	b.n	800bd06 <__ieee754_pow+0x97e>
 800bd5c:	491a      	ldr	r1, [pc, #104]	; (800bdc8 <__ieee754_pow+0xa40>)
 800bd5e:	2000      	movs	r0, #0
 800bd60:	f7ff bb31 	b.w	800b3c6 <__ieee754_pow+0x3e>
 800bd64:	2000      	movs	r0, #0
 800bd66:	2100      	movs	r1, #0
 800bd68:	f7ff bb2d 	b.w	800b3c6 <__ieee754_pow+0x3e>
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	4639      	mov	r1, r7
 800bd70:	f7ff bb29 	b.w	800b3c6 <__ieee754_pow+0x3e>
 800bd74:	9204      	str	r2, [sp, #16]
 800bd76:	f7ff bb7b 	b.w	800b470 <__ieee754_pow+0xe8>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f7ff bb65 	b.w	800b44a <__ieee754_pow+0xc2>
 800bd80:	00000000 	.word	0x00000000
 800bd84:	3fe62e43 	.word	0x3fe62e43
 800bd88:	fefa39ef 	.word	0xfefa39ef
 800bd8c:	3fe62e42 	.word	0x3fe62e42
 800bd90:	0ca86c39 	.word	0x0ca86c39
 800bd94:	be205c61 	.word	0xbe205c61
 800bd98:	72bea4d0 	.word	0x72bea4d0
 800bd9c:	3e663769 	.word	0x3e663769
 800bda0:	c5d26bf1 	.word	0xc5d26bf1
 800bda4:	3ebbbd41 	.word	0x3ebbbd41
 800bda8:	af25de2c 	.word	0xaf25de2c
 800bdac:	3f11566a 	.word	0x3f11566a
 800bdb0:	16bebd93 	.word	0x16bebd93
 800bdb4:	3f66c16c 	.word	0x3f66c16c
 800bdb8:	5555553e 	.word	0x5555553e
 800bdbc:	3fc55555 	.word	0x3fc55555
 800bdc0:	3fe00000 	.word	0x3fe00000
 800bdc4:	fff00000 	.word	0xfff00000
 800bdc8:	3ff00000 	.word	0x3ff00000
 800bdcc:	4090cbff 	.word	0x4090cbff
 800bdd0:	3f6f3400 	.word	0x3f6f3400
 800bdd4:	652b82fe 	.word	0x652b82fe
 800bdd8:	3c971547 	.word	0x3c971547

0800bddc <fabs>:
 800bddc:	ec51 0b10 	vmov	r0, r1, d0
 800bde0:	ee10 2a10 	vmov	r2, s0
 800bde4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bde8:	ec43 2b10 	vmov	d0, r2, r3
 800bdec:	4770      	bx	lr
	...

0800bdf0 <scalbn>:
 800bdf0:	b570      	push	{r4, r5, r6, lr}
 800bdf2:	ec55 4b10 	vmov	r4, r5, d0
 800bdf6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	462b      	mov	r3, r5
 800bdfe:	b999      	cbnz	r1, 800be28 <scalbn+0x38>
 800be00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800be04:	4323      	orrs	r3, r4
 800be06:	d03f      	beq.n	800be88 <scalbn+0x98>
 800be08:	4b35      	ldr	r3, [pc, #212]	; (800bee0 <scalbn+0xf0>)
 800be0a:	4629      	mov	r1, r5
 800be0c:	ee10 0a10 	vmov	r0, s0
 800be10:	2200      	movs	r2, #0
 800be12:	f7f4 fbf1 	bl	80005f8 <__aeabi_dmul>
 800be16:	4b33      	ldr	r3, [pc, #204]	; (800bee4 <scalbn+0xf4>)
 800be18:	429e      	cmp	r6, r3
 800be1a:	4604      	mov	r4, r0
 800be1c:	460d      	mov	r5, r1
 800be1e:	da10      	bge.n	800be42 <scalbn+0x52>
 800be20:	a327      	add	r3, pc, #156	; (adr r3, 800bec0 <scalbn+0xd0>)
 800be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be26:	e01f      	b.n	800be68 <scalbn+0x78>
 800be28:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800be2c:	4291      	cmp	r1, r2
 800be2e:	d10c      	bne.n	800be4a <scalbn+0x5a>
 800be30:	ee10 2a10 	vmov	r2, s0
 800be34:	4620      	mov	r0, r4
 800be36:	4629      	mov	r1, r5
 800be38:	f7f4 fa28 	bl	800028c <__adddf3>
 800be3c:	4604      	mov	r4, r0
 800be3e:	460d      	mov	r5, r1
 800be40:	e022      	b.n	800be88 <scalbn+0x98>
 800be42:	460b      	mov	r3, r1
 800be44:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800be48:	3936      	subs	r1, #54	; 0x36
 800be4a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800be4e:	4296      	cmp	r6, r2
 800be50:	dd0d      	ble.n	800be6e <scalbn+0x7e>
 800be52:	2d00      	cmp	r5, #0
 800be54:	a11c      	add	r1, pc, #112	; (adr r1, 800bec8 <scalbn+0xd8>)
 800be56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be5a:	da02      	bge.n	800be62 <scalbn+0x72>
 800be5c:	a11c      	add	r1, pc, #112	; (adr r1, 800bed0 <scalbn+0xe0>)
 800be5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be62:	a319      	add	r3, pc, #100	; (adr r3, 800bec8 <scalbn+0xd8>)
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f7f4 fbc6 	bl	80005f8 <__aeabi_dmul>
 800be6c:	e7e6      	b.n	800be3c <scalbn+0x4c>
 800be6e:	1872      	adds	r2, r6, r1
 800be70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800be74:	428a      	cmp	r2, r1
 800be76:	dcec      	bgt.n	800be52 <scalbn+0x62>
 800be78:	2a00      	cmp	r2, #0
 800be7a:	dd08      	ble.n	800be8e <scalbn+0x9e>
 800be7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be88:	ec45 4b10 	vmov	d0, r4, r5
 800be8c:	bd70      	pop	{r4, r5, r6, pc}
 800be8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800be92:	da08      	bge.n	800bea6 <scalbn+0xb6>
 800be94:	2d00      	cmp	r5, #0
 800be96:	a10a      	add	r1, pc, #40	; (adr r1, 800bec0 <scalbn+0xd0>)
 800be98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be9c:	dac0      	bge.n	800be20 <scalbn+0x30>
 800be9e:	a10e      	add	r1, pc, #56	; (adr r1, 800bed8 <scalbn+0xe8>)
 800bea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bea4:	e7bc      	b.n	800be20 <scalbn+0x30>
 800bea6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800beaa:	3236      	adds	r2, #54	; 0x36
 800beac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800beb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800beb4:	4620      	mov	r0, r4
 800beb6:	4b0c      	ldr	r3, [pc, #48]	; (800bee8 <scalbn+0xf8>)
 800beb8:	2200      	movs	r2, #0
 800beba:	e7d5      	b.n	800be68 <scalbn+0x78>
 800bebc:	f3af 8000 	nop.w
 800bec0:	c2f8f359 	.word	0xc2f8f359
 800bec4:	01a56e1f 	.word	0x01a56e1f
 800bec8:	8800759c 	.word	0x8800759c
 800becc:	7e37e43c 	.word	0x7e37e43c
 800bed0:	8800759c 	.word	0x8800759c
 800bed4:	fe37e43c 	.word	0xfe37e43c
 800bed8:	c2f8f359 	.word	0xc2f8f359
 800bedc:	81a56e1f 	.word	0x81a56e1f
 800bee0:	43500000 	.word	0x43500000
 800bee4:	ffff3cb0 	.word	0xffff3cb0
 800bee8:	3c900000 	.word	0x3c900000

0800beec <with_errno>:
 800beec:	b570      	push	{r4, r5, r6, lr}
 800beee:	4604      	mov	r4, r0
 800bef0:	460d      	mov	r5, r1
 800bef2:	4616      	mov	r6, r2
 800bef4:	f7fc fc92 	bl	800881c <__errno>
 800bef8:	4629      	mov	r1, r5
 800befa:	6006      	str	r6, [r0, #0]
 800befc:	4620      	mov	r0, r4
 800befe:	bd70      	pop	{r4, r5, r6, pc}

0800bf00 <xflow>:
 800bf00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf02:	4614      	mov	r4, r2
 800bf04:	461d      	mov	r5, r3
 800bf06:	b108      	cbz	r0, 800bf0c <xflow+0xc>
 800bf08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf0c:	e9cd 2300 	strd	r2, r3, [sp]
 800bf10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	f7f4 fb6e 	bl	80005f8 <__aeabi_dmul>
 800bf1c:	2222      	movs	r2, #34	; 0x22
 800bf1e:	b003      	add	sp, #12
 800bf20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf24:	f7ff bfe2 	b.w	800beec <with_errno>

0800bf28 <__math_uflow>:
 800bf28:	b508      	push	{r3, lr}
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bf30:	f7ff ffe6 	bl	800bf00 <xflow>
 800bf34:	ec41 0b10 	vmov	d0, r0, r1
 800bf38:	bd08      	pop	{r3, pc}

0800bf3a <__math_oflow>:
 800bf3a:	b508      	push	{r3, lr}
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bf42:	f7ff ffdd 	bl	800bf00 <xflow>
 800bf46:	ec41 0b10 	vmov	d0, r0, r1
 800bf4a:	bd08      	pop	{r3, pc}

0800bf4c <__ieee754_sqrt>:
 800bf4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf50:	ec55 4b10 	vmov	r4, r5, d0
 800bf54:	4e67      	ldr	r6, [pc, #412]	; (800c0f4 <__ieee754_sqrt+0x1a8>)
 800bf56:	43ae      	bics	r6, r5
 800bf58:	ee10 0a10 	vmov	r0, s0
 800bf5c:	ee10 2a10 	vmov	r2, s0
 800bf60:	4629      	mov	r1, r5
 800bf62:	462b      	mov	r3, r5
 800bf64:	d10d      	bne.n	800bf82 <__ieee754_sqrt+0x36>
 800bf66:	f7f4 fb47 	bl	80005f8 <__aeabi_dmul>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4620      	mov	r0, r4
 800bf70:	4629      	mov	r1, r5
 800bf72:	f7f4 f98b 	bl	800028c <__adddf3>
 800bf76:	4604      	mov	r4, r0
 800bf78:	460d      	mov	r5, r1
 800bf7a:	ec45 4b10 	vmov	d0, r4, r5
 800bf7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf82:	2d00      	cmp	r5, #0
 800bf84:	dc0b      	bgt.n	800bf9e <__ieee754_sqrt+0x52>
 800bf86:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bf8a:	4326      	orrs	r6, r4
 800bf8c:	d0f5      	beq.n	800bf7a <__ieee754_sqrt+0x2e>
 800bf8e:	b135      	cbz	r5, 800bf9e <__ieee754_sqrt+0x52>
 800bf90:	f7f4 f97a 	bl	8000288 <__aeabi_dsub>
 800bf94:	4602      	mov	r2, r0
 800bf96:	460b      	mov	r3, r1
 800bf98:	f7f4 fc58 	bl	800084c <__aeabi_ddiv>
 800bf9c:	e7eb      	b.n	800bf76 <__ieee754_sqrt+0x2a>
 800bf9e:	1509      	asrs	r1, r1, #20
 800bfa0:	f000 808d 	beq.w	800c0be <__ieee754_sqrt+0x172>
 800bfa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfa8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800bfac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfb0:	07c9      	lsls	r1, r1, #31
 800bfb2:	bf5c      	itt	pl
 800bfb4:	005b      	lslpl	r3, r3, #1
 800bfb6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800bfba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bfbe:	bf58      	it	pl
 800bfc0:	0052      	lslpl	r2, r2, #1
 800bfc2:	2500      	movs	r5, #0
 800bfc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bfc8:	1076      	asrs	r6, r6, #1
 800bfca:	0052      	lsls	r2, r2, #1
 800bfcc:	f04f 0e16 	mov.w	lr, #22
 800bfd0:	46ac      	mov	ip, r5
 800bfd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bfd6:	eb0c 0001 	add.w	r0, ip, r1
 800bfda:	4298      	cmp	r0, r3
 800bfdc:	bfde      	ittt	le
 800bfde:	1a1b      	suble	r3, r3, r0
 800bfe0:	eb00 0c01 	addle.w	ip, r0, r1
 800bfe4:	186d      	addle	r5, r5, r1
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	f1be 0e01 	subs.w	lr, lr, #1
 800bfec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800bff0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bff4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bff8:	d1ed      	bne.n	800bfd6 <__ieee754_sqrt+0x8a>
 800bffa:	4674      	mov	r4, lr
 800bffc:	2720      	movs	r7, #32
 800bffe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c002:	4563      	cmp	r3, ip
 800c004:	eb01 000e 	add.w	r0, r1, lr
 800c008:	dc02      	bgt.n	800c010 <__ieee754_sqrt+0xc4>
 800c00a:	d113      	bne.n	800c034 <__ieee754_sqrt+0xe8>
 800c00c:	4290      	cmp	r0, r2
 800c00e:	d811      	bhi.n	800c034 <__ieee754_sqrt+0xe8>
 800c010:	2800      	cmp	r0, #0
 800c012:	eb00 0e01 	add.w	lr, r0, r1
 800c016:	da57      	bge.n	800c0c8 <__ieee754_sqrt+0x17c>
 800c018:	f1be 0f00 	cmp.w	lr, #0
 800c01c:	db54      	blt.n	800c0c8 <__ieee754_sqrt+0x17c>
 800c01e:	f10c 0801 	add.w	r8, ip, #1
 800c022:	eba3 030c 	sub.w	r3, r3, ip
 800c026:	4290      	cmp	r0, r2
 800c028:	bf88      	it	hi
 800c02a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c02e:	1a12      	subs	r2, r2, r0
 800c030:	440c      	add	r4, r1
 800c032:	46c4      	mov	ip, r8
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	3f01      	subs	r7, #1
 800c038:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c03c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c040:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c044:	d1dd      	bne.n	800c002 <__ieee754_sqrt+0xb6>
 800c046:	4313      	orrs	r3, r2
 800c048:	d01b      	beq.n	800c082 <__ieee754_sqrt+0x136>
 800c04a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c0f8 <__ieee754_sqrt+0x1ac>
 800c04e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c0fc <__ieee754_sqrt+0x1b0>
 800c052:	e9da 0100 	ldrd	r0, r1, [sl]
 800c056:	e9db 2300 	ldrd	r2, r3, [fp]
 800c05a:	f7f4 f915 	bl	8000288 <__aeabi_dsub>
 800c05e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	4640      	mov	r0, r8
 800c068:	4649      	mov	r1, r9
 800c06a:	f7f4 fd41 	bl	8000af0 <__aeabi_dcmple>
 800c06e:	b140      	cbz	r0, 800c082 <__ieee754_sqrt+0x136>
 800c070:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c074:	e9da 0100 	ldrd	r0, r1, [sl]
 800c078:	e9db 2300 	ldrd	r2, r3, [fp]
 800c07c:	d126      	bne.n	800c0cc <__ieee754_sqrt+0x180>
 800c07e:	3501      	adds	r5, #1
 800c080:	463c      	mov	r4, r7
 800c082:	106a      	asrs	r2, r5, #1
 800c084:	0863      	lsrs	r3, r4, #1
 800c086:	07e9      	lsls	r1, r5, #31
 800c088:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c08c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c090:	bf48      	it	mi
 800c092:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c096:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c09a:	461c      	mov	r4, r3
 800c09c:	e76d      	b.n	800bf7a <__ieee754_sqrt+0x2e>
 800c09e:	0ad3      	lsrs	r3, r2, #11
 800c0a0:	3815      	subs	r0, #21
 800c0a2:	0552      	lsls	r2, r2, #21
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d0fa      	beq.n	800c09e <__ieee754_sqrt+0x152>
 800c0a8:	02dc      	lsls	r4, r3, #11
 800c0aa:	d50a      	bpl.n	800c0c2 <__ieee754_sqrt+0x176>
 800c0ac:	f1c1 0420 	rsb	r4, r1, #32
 800c0b0:	fa22 f404 	lsr.w	r4, r2, r4
 800c0b4:	1e4d      	subs	r5, r1, #1
 800c0b6:	408a      	lsls	r2, r1
 800c0b8:	4323      	orrs	r3, r4
 800c0ba:	1b41      	subs	r1, r0, r5
 800c0bc:	e772      	b.n	800bfa4 <__ieee754_sqrt+0x58>
 800c0be:	4608      	mov	r0, r1
 800c0c0:	e7f0      	b.n	800c0a4 <__ieee754_sqrt+0x158>
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	3101      	adds	r1, #1
 800c0c6:	e7ef      	b.n	800c0a8 <__ieee754_sqrt+0x15c>
 800c0c8:	46e0      	mov	r8, ip
 800c0ca:	e7aa      	b.n	800c022 <__ieee754_sqrt+0xd6>
 800c0cc:	f7f4 f8de 	bl	800028c <__adddf3>
 800c0d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	4640      	mov	r0, r8
 800c0da:	4649      	mov	r1, r9
 800c0dc:	f7f4 fcfe 	bl	8000adc <__aeabi_dcmplt>
 800c0e0:	b120      	cbz	r0, 800c0ec <__ieee754_sqrt+0x1a0>
 800c0e2:	1ca0      	adds	r0, r4, #2
 800c0e4:	bf08      	it	eq
 800c0e6:	3501      	addeq	r5, #1
 800c0e8:	3402      	adds	r4, #2
 800c0ea:	e7ca      	b.n	800c082 <__ieee754_sqrt+0x136>
 800c0ec:	3401      	adds	r4, #1
 800c0ee:	f024 0401 	bic.w	r4, r4, #1
 800c0f2:	e7c6      	b.n	800c082 <__ieee754_sqrt+0x136>
 800c0f4:	7ff00000 	.word	0x7ff00000
 800c0f8:	200001d8 	.word	0x200001d8
 800c0fc:	200001e0 	.word	0x200001e0

0800c100 <_init>:
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	bf00      	nop
 800c104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c106:	bc08      	pop	{r3}
 800c108:	469e      	mov	lr, r3
 800c10a:	4770      	bx	lr

0800c10c <_fini>:
 800c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10e:	bf00      	nop
 800c110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c112:	bc08      	pop	{r3}
 800c114:	469e      	mov	lr, r3
 800c116:	4770      	bx	lr
